{
"version":3,
"file":"build/v86_all.js",
"lineCount":594,
"mappings":"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AAA,CChGiBxQ,CDgGjB,CAA2B2xD,CAAA,CChGV3xD,CDgGU,CAAwB,GAAxB,CAA3B,CAAwD,EAAxD,CAEA2wD,EAAA,CClGiB3wD,CDkGjB,CClGiBA,CDkGL0/C,EAAA,C1B9LQ8D,C0B8LR,CAAZ,CACAmN,EAAA,CCnGiB3wD,CDmGjB,CCnGiBA,CDmGL0/C,EAAA,C1B9LQwO,C0B8LR,CAAZ,CACAyC,EAAA,CCpGiB3wD,CDoGjB,CCpGiBA,CDoGL0/C,EAAA,C1B9LQ0O,C0B8LR,CAAZ,CACAuC,EAAA,CCrGiB3wD,CDqGjB,CCrGiBA,CDqGL0/C,EAAA,C1B9LQ+D,C0B8LR,CAAZ,CACAkN,EAAA,CCtGiB3wD,CDsGjB,CAAY6mE,CAAZ,CACAlW,EAAA,CCvGiB3wD,CDuGjB,CCvGiBA,CDuGL0/C,EAAA,C1B9LQ8O,C0B8LR,CAAZ,CACAmC,EAAA,CCxGiB3wD,CDwGjB,CCxGiBA,CDwGL0/C,EAAA,C1B9LQgP,C0B8LR,CAAZ,CACAiC,EAAA,CCzGiB3wD,CDyGjB,CCzGiBA,CDyGL0/C,EAAA,C1B9LQkP,C0B8LR,CAAZ,CCzGe,CACnB0Y,EAAA,CAAI,EAAJ,CAAA,CAAY,QAAA,CAAAtnE,CAAA,CAAO,CD6Gf2nD,EAAA,CC7GiB3nD,CD6GjB,CAA4B2xD,CAAA,CC7GX3xD,CD6GW,CAAuB,CAAvB,CAA5B,CACA2nD,GAAA,CC9GiB3nD,CD8GjB,CAA4B2xD,CAAA,CC9GX3xD,CD8GW,CAAuB,EAAvB,CAA5B,CC9GiBA,EDgHjB6/C,EAAA,C1B7LmBoc,E0B6LnB,CAAA,CAAqBmO,EAAA,CChHJpqE,CDgHI,CChHJA,EDiHjB6/C,EAAA,C1B/LmBmc,E0B+LnB,CAAA,CAAqBoO,EAAA,CCjHJpqE,CDiHI,CCjHJA,EDkHjB6/C,EAAA,C1BjMmBsc,E0BiMnB,CAAA,CAAqBiO,EAAA,CClHJpqE,CDkHI,CACrB8xD,EAAA,CCnHiB9xD,CDmHjB,CAAsB,CAAtB,CCnHiBA,EDoHjB6/C,EAAA,C1BrMmBkc,C0BqMnB,CAAA,CAAqBqO,EAAA,CCpHJpqE,CDoHI,CCpHJA,EDqHjB6/C,EAA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",
"sources":["lib/closure-base.js"," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/polyfill] "," [synthetic:es6/string/endswith] "," [synthetic:util/checkstringargs] "," [synthetic:es6/math/trunc] "," [synthetic:es6/util/iteratorfromarray] "," [synthetic:es6/array/entries] "," [synthetic:util/owns] "," [synthetic:es6/weakmap] "," [synthetic:es6/map] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/construct] "," [synthetic:es6/reflect/construct] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/reflect/setprototypeof] ","lib/9p.js","lib/filesystem.js","src/browser/screen.js","src/browser/main.js","src/browser/starter.js","src/io.js","src/const.js","src/main.js","src/cpu.js","src/config.js","src/lib.js","src/sb16.js","src/fpu.js","src/ide.js","src/rtc.js","src/memory.js","src/pci.js","src/floppy.js","src/dma.js","src/pit.js","src/vga.js","src/ps2.js","src/pic.js","src/uart.js","src/state.js","src/ne2k.js","src/virtio.js","lib/jor1k.js","src/bus.js","src/modrm.js","src/string.js","src/arith.js","src/misc_instr.js","src/instructions.js","src/debug.js","src/elf.js","lib/marshall.js","lib/utf8.js","src/browser/keyboard.js","src/browser/mouse.js","src/browser/speaker.js","src/browser/serial.js","src/browser/network.js","src/browser/lib.js","src/browser/dummy_screen.js"],
"sourcesContent":["// Copyright 2006 The Closure Library Authors. All Rights Reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS-IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * @fileoverview Bootstrap for the Google JS Library (Closure).\n *\n * In uncompiled mode base.js will write out Closure's deps file, unless the\n * global <code>CLOSURE_NO_DEPS</code> is set to true.  This allows projects to\n * include their own deps file(s) from different locations.\n *\n * @author arv@google.com (Erik Arvidsson)\n *\n * @provideGoog\n */\n\n\n/**\n * @define {boolean} Overridden to true by the compiler when --closure_pass\n *     or --mark_as_compiled is specified.\n */\nvar COMPILED = false;\n\n\n/**\n * Base namespace for the Closure library.  Checks to see goog is already\n * defined in the current scope before assigning to prevent clobbering if\n * base.js is loaded more than once.\n *\n * @const\n */\nvar goog = goog || {};\n\n\n/**\n * Reference to the global context.  In most cases this will be 'window'.\n */\ngoog.global = this;\n\n\n/**\n * A hook for overriding the define values in uncompiled mode.\n *\n * In uncompiled mode, {@code CLOSURE_UNCOMPILED_DEFINES} may be defined before\n * loading base.js.  If a key is defined in {@code CLOSURE_UNCOMPILED_DEFINES},\n * {@code goog.define} will use the value instead of the default value.  This\n * allows flags to be overwritten without compilation (this is normally\n * accomplished with the compiler's \"define\" flag).\n *\n * Example:\n * <pre>\n *   var CLOSURE_UNCOMPILED_DEFINES = {'goog.DEBUG': false};\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_UNCOMPILED_DEFINES;\n\n\n/**\n * A hook for overriding the define values in uncompiled or compiled mode,\n * like CLOSURE_UNCOMPILED_DEFINES but effective in compiled code.  In\n * uncompiled code CLOSURE_UNCOMPILED_DEFINES takes precedence.\n *\n * Also unlike CLOSURE_UNCOMPILED_DEFINES the values must be number, boolean or\n * string literals or the compiler will emit an error.\n *\n * While any @define value may be set, only those set with goog.define will be\n * effective for uncompiled code.\n *\n * Example:\n * <pre>\n *   var CLOSURE_DEFINES = {'goog.DEBUG': false} ;\n * </pre>\n *\n * @type {Object<string, (string|number|boolean)>|undefined}\n */\ngoog.global.CLOSURE_DEFINES;\n\n\n/**\n * Returns true if the specified value is not undefined.\n * WARNING: Do not use this to test if an object has a property. Use the in\n * operator instead.\n *\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined.\n */\ngoog.isDef = function(val) {\n  // void 0 always evaluates to undefined and hence we do not need to depend on\n  // the definition of the global variable named 'undefined'.\n  return val !== void 0;\n};\n\n\n/**\n * Builds an object structure for the provided namespace path, ensuring that\n * names that already exist are not overwritten. For example:\n * \"a.b.c\" -> a = {};a.b={};a.b.c={};\n * Used by goog.provide and goog.exportSymbol.\n * @param {string} name name of the object that this file defines.\n * @param {*=} opt_object the object to expose at the end of the path.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is |goog.global|.\n * @private\n */\ngoog.exportPath_ = function(name, opt_object, opt_objectToExportTo) {\n  var parts = name.split('.');\n  var cur = opt_objectToExportTo || goog.global;\n\n  // Internet Explorer exhibits strange behavior when throwing errors from\n  // methods externed in this manner.  See the testExportSymbolExceptions in\n  // base_test.html for an example.\n  if (!(parts[0] in cur) && cur.execScript) {\n    cur.execScript('var ' + parts[0]);\n  }\n\n  // Certain browsers cannot parse code in the form for((a in b); c;);\n  // This pattern is produced by the JSCompiler when it collapses the\n  // statement above into the conditional loop below. To prevent this from\n  // happening, use a for-loop and reserve the init logic as below.\n\n  // Parentheses added to eliminate strict JS warning in Firefox.\n  for (var part; parts.length && (part = parts.shift());) {\n    if (!parts.length && goog.isDef(opt_object)) {\n      // last part and we have an object; use it\n      cur[part] = opt_object;\n    } else if (cur[part]) {\n      cur = cur[part];\n    } else {\n      cur = cur[part] = {};\n    }\n  }\n};\n\n\n/**\n * Defines a named value. In uncompiled mode, the value is retrieved from\n * CLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\n * has the property specified, and otherwise used the defined defaultValue.\n * When compiled the default can be overridden using the compiler\n * options or the value set in the CLOSURE_DEFINES object.\n *\n * @param {string} name The distinguished name to provide.\n * @param {string|number|boolean} defaultValue\n */\ngoog.define = function(name, defaultValue) {\n  var value = defaultValue;\n  if (!COMPILED) {\n    if (goog.global.CLOSURE_UNCOMPILED_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_UNCOMPILED_DEFINES, name)) {\n      value = goog.global.CLOSURE_UNCOMPILED_DEFINES[name];\n    } else if (goog.global.CLOSURE_DEFINES &&\n        Object.prototype.hasOwnProperty.call(\n            goog.global.CLOSURE_DEFINES, name)) {\n      value = goog.global.CLOSURE_DEFINES[name];\n    }\n  }\n  goog.exportPath_(name, value);\n};\n\n\n/**\n * @define {boolean} DEBUG is provided as a convenience so that debugging code\n * that should not be included in a production js_binary can be easily stripped\n * by specifying --define goog.DEBUG=false to the JSCompiler. For example, most\n * toString() methods should be declared inside an \"if (goog.DEBUG)\" conditional\n * because they are generally used for debugging purposes and it is difficult\n * for the JSCompiler to statically determine whether they are used.\n */\ngoog.define('goog.DEBUG', true);\n\n\n/**\n * @define {string} LOCALE defines the locale being used for compilation. It is\n * used to select locale specific data to be compiled in js binary. BUILD rule\n * can specify this value by \"--define goog.LOCALE=<locale_name>\" as JSCompiler\n * option.\n *\n * Take into account that the locale code format is important. You should use\n * the canonical Unicode format with hyphen as a delimiter. Language must be\n * lowercase, Language Script - Capitalized, Region - UPPERCASE.\n * There are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.\n *\n * See more info about locale codes here:\n * http://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers\n *\n * For language codes you should use values defined by ISO 693-1. See it here\n * http://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\n * this rule: the Hebrew language. For legacy reasons the old code (iw) should\n * be used instead of the new code (he), see http://wiki/Main/IIISynonyms.\n */\ngoog.define('goog.LOCALE', 'en');  // default to en\n\n\n/**\n * @define {boolean} Whether this code is running on trusted sites.\n *\n * On untrusted sites, several native functions can be defined or overridden by\n * external libraries like Prototype, Datejs, and JQuery and setting this flag\n * to false forces closure to use its own implementations when possible.\n *\n * If your JavaScript can be loaded by a third party site and you are wary about\n * relying on non-standard implementations, specify\n * \"--define goog.TRUSTED_SITE=false\" to the JSCompiler.\n */\ngoog.define('goog.TRUSTED_SITE', true);\n\n\n/**\n * @define {boolean} Whether a project is expected to be running in strict mode.\n *\n * This define can be used to trigger alternate implementations compatible with\n * running in EcmaScript Strict mode or warn about unavailable functionality.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\n *\n */\ngoog.define('goog.STRICT_MODE_COMPATIBLE', false);\n\n\n/**\n * @define {boolean} Whether code that calls {@link goog.setTestOnly} should\n *     be disallowed in the compilation unit.\n */\ngoog.define('goog.DISALLOW_TEST_ONLY_CODE', COMPILED && !goog.DEBUG);\n\n\n/**\n * @define {boolean} Whether to use a Chrome app CSP-compliant method for\n *     loading scripts via goog.require. @see appendScriptSrcNode_.\n */\ngoog.define('goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING', false);\n\n\n/**\n * Defines a namespace in Closure.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * The presence of one or more goog.provide() calls in a file indicates\n * that the file defines the given objects/namespaces.\n * Provided symbols must not be null or undefined.\n *\n * In addition, goog.provide() creates the object stubs for a namespace\n * (for example, goog.provide(\"goog.foo.bar\") will create the object\n * goog.foo.bar if it does not already exist).\n *\n * Build tools also scan for provide/require/module statements\n * to discern dependencies, build dependency files (see deps.js), etc.\n *\n * @see goog.require\n * @see goog.module\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n */\ngoog.provide = function(name) {\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n  }\n\n  goog.constructNamespace_(name);\n};\n\n\n/**\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\".\n * @param {Object=} opt_obj The object to embed in the namespace.\n * @private\n */\ngoog.constructNamespace_ = function(name, opt_obj) {\n  if (!COMPILED) {\n    delete goog.implicitNamespaces_[name];\n\n    var namespace = name;\n    while ((namespace = namespace.substring(0, namespace.lastIndexOf('.')))) {\n      if (goog.getObjectByName(namespace)) {\n        break;\n      }\n      goog.implicitNamespaces_[namespace] = true;\n    }\n  }\n\n  goog.exportPath_(name, opt_obj);\n};\n\n\n/**\n * Module identifier validation regexp.\n * Note: This is a conservative check, it is very possible to be more lenient,\n *   the primary exclusion here is \"/\" and \"\\\" and a leading \".\", these\n *   restrictions are intended to leave the door open for using goog.require\n *   with relative file paths rather than module identifiers.\n * @private\n */\ngoog.VALID_MODULE_RE_ = /^[a-zA-Z_$][a-zA-Z0-9._$]*$/;\n\n\n/**\n * Defines a module in Closure.\n *\n * Marks that this file must be loaded as a module and claims the namespace.\n *\n * A namespace may only be defined once in a codebase. It may be defined using\n * goog.provide() or goog.module().\n *\n * goog.module() has three requirements:\n * - goog.module may not be used in the same file as goog.provide.\n * - goog.module must be the first statement in the file.\n * - only one goog.module is allowed per file.\n *\n * When a goog.module annotated file is loaded, it is enclosed in\n * a strict function closure. This means that:\n * - any variables declared in a goog.module file are private to the file\n * (not global), though the compiler is expected to inline the module.\n * - The code must obey all the rules of \"strict\" JavaScript.\n * - the file will be marked as \"use strict\"\n *\n * NOTE: unlike goog.provide, goog.module does not declare any symbols by\n * itself. If declared symbols are desired, use\n * goog.module.declareLegacyNamespace().\n *\n *\n * See the public goog.module proposal: http://goo.gl/Va1hin\n *\n * @param {string} name Namespace provided by this file in the form\n *     \"goog.package.part\", is expected but not required.\n */\ngoog.module = function(name) {\n  if (!goog.isString(name) ||\n      !name ||\n      name.search(goog.VALID_MODULE_RE_) == -1) {\n    throw Error('Invalid module identifier');\n  }\n  if (!goog.isInModuleLoader_()) {\n    throw Error('Module ' + name + ' has been loaded incorrectly.');\n  }\n  if (goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module may only be called once per module.');\n  }\n\n  // Store the module name for the loader.\n  goog.moduleLoaderState_.moduleName = name;\n  if (!COMPILED) {\n    // Ensure that the same namespace isn't provided twice.\n    // A goog.module/goog.provide maps a goog.require to a specific file\n    if (goog.isProvided_(name)) {\n      throw Error('Namespace \"' + name + '\" already declared.');\n    }\n    delete goog.implicitNamespaces_[name];\n  }\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n *\n * Note: This is not an alternative to goog.require, it does not\n * indicate a hard dependency, instead it is used to indicate\n * an optional dependency or to access the exports of a module\n * that has already been loaded.\n * @suppress {missingProvide}\n */\ngoog.module.get = function(name) {\n  return goog.module.getInternal_(name);\n};\n\n\n/**\n * @param {string} name The module identifier.\n * @return {?} The module exports for an already loaded module or null.\n * @private\n */\ngoog.module.getInternal_ = function(name) {\n  if (!COMPILED) {\n    if (goog.isProvided_(name)) {\n      // goog.require only return a value with-in goog.module files.\n      return name in goog.loadedModules_ ?\n          goog.loadedModules_[name] :\n          goog.getObjectByName(name);\n    } else {\n      return null;\n    }\n  }\n};\n\n\n/**\n * @private {?{\n *   moduleName: (string|undefined),\n *   declareTestMethods: boolean\n * }}\n */\ngoog.moduleLoaderState_ = null;\n\n\n/**\n * @private\n * @return {boolean} Whether a goog.module is currently being initialized.\n */\ngoog.isInModuleLoader_ = function() {\n  return goog.moduleLoaderState_ != null;\n};\n\n\n/**\n * Indicate that a module's exports that are known test methods should\n * be copied to the global object.  This makes the test methods visible to\n * test runners that inspect the global object.\n *\n * TODO(johnlenz): Make the test framework aware of goog.module so\n * that this isn't necessary. Alternately combine this with goog.setTestOnly\n * to minimize boiler plate.\n * @suppress {missingProvide}\n * @deprecated This approach does not translate to ES6 module syntax, instead\n *    use goog.testing.testSuite to declare the test methods.\n */\ngoog.module.declareTestMethods = function() {\n  if (!goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareTestMethods must be called from ' +\n        'within a goog.module');\n  }\n  goog.moduleLoaderState_.declareTestMethods = true;\n};\n\n\n/**\n * Provide the module's exports as a globally accessible object under the\n * module's declared name.  This is intended to ease migration to goog.module\n * for files that have existing usages.\n * @suppress {missingProvide}\n */\ngoog.module.declareLegacyNamespace = function() {\n  if (!COMPILED && !goog.isInModuleLoader_()) {\n    throw new Error('goog.module.declareLegacyNamespace must be called from ' +\n        'within a goog.module');\n  }\n  if (!COMPILED && !goog.moduleLoaderState_.moduleName) {\n    throw Error('goog.module must be called prior to ' +\n        'goog.module.declareLegacyNamespace.');\n  }\n  goog.moduleLoaderState_.declareLegacyNamespace = true;\n};\n\n\n/**\n * Marks that the current file should only be used for testing, and never for\n * live code in production.\n *\n * In the case of unit tests, the message may optionally be an exact namespace\n * for the test (e.g. 'goog.stringTest'). The linter will then ignore the extra\n * provide (if not explicitly defined in the code).\n *\n * @param {string=} opt_message Optional message to add to the error that's\n *     raised when used in production code.\n */\ngoog.setTestOnly = function(opt_message) {\n  if (goog.DISALLOW_TEST_ONLY_CODE) {\n    opt_message = opt_message || '';\n    throw Error('Importing test-only code into non-debug environment' +\n                (opt_message ? ': ' + opt_message : '.'));\n  }\n};\n\n\n/**\n * Forward declares a symbol. This is an indication to the compiler that the\n * symbol may be used in the source yet is not required and may not be provided\n * in compilation.\n *\n * The most common usage of forward declaration is code that takes a type as a\n * function parameter but does not need to require it. By forward declaring\n * instead of requiring, no hard dependency is made, and (if not required\n * elsewhere) the namespace may never be required and thus, not be pulled\n * into the JavaScript binary. If it is required elsewhere, it will be type\n * checked as normal.\n *\n *\n * @param {string} name The namespace to forward declare in the form of\n *     \"goog.package.part\".\n */\ngoog.forwardDeclare = function(name) {};\n\n\nif (!COMPILED) {\n\n  /**\n   * Check if the given name has been goog.provided. This will return false for\n   * names that are available only as implicit namespaces.\n   * @param {string} name name of the object to look for.\n   * @return {boolean} Whether the name has been provided.\n   * @private\n   */\n  goog.isProvided_ = function(name) {\n    return (name in goog.loadedModules_) ||\n        (!goog.implicitNamespaces_[name] &&\n            goog.isDefAndNotNull(goog.getObjectByName(name)));\n  };\n\n  /**\n   * Namespaces implicitly defined by goog.provide. For example,\n   * goog.provide('goog.events.Event') implicitly declares that 'goog' and\n   * 'goog.events' must be namespaces.\n   *\n   * @type {!Object<string, (boolean|undefined)>}\n   * @private\n   */\n  goog.implicitNamespaces_ = {'goog.module': true};\n\n  // NOTE: We add goog.module as an implicit namespace as goog.module is defined\n  // here and because the existing module package has not been moved yet out of\n  // the goog.module namespace. This satisifies both the debug loader and\n  // ahead-of-time dependency management.\n}\n\n\n/**\n * Returns an object based on its fully qualified external name.  The object\n * is not found if null or undefined.  If you are using a compilation pass that\n * renames property names beware that using this function will not find renamed\n * properties.\n *\n * @param {string} name The fully qualified name.\n * @param {Object=} opt_obj The object within which to look; default is\n *     |goog.global|.\n * @return {?} The value (object or primitive) or, if not found, null.\n */\ngoog.getObjectByName = function(name, opt_obj) {\n  var parts = name.split('.');\n  var cur = opt_obj || goog.global;\n  for (var part; part = parts.shift(); ) {\n    if (goog.isDefAndNotNull(cur[part])) {\n      cur = cur[part];\n    } else {\n      return null;\n    }\n  }\n  return cur;\n};\n\n\n/**\n * Globalizes a whole namespace, such as goog or goog.lang.\n *\n * @param {!Object} obj The namespace to globalize.\n * @param {Object=} opt_global The object to add the properties to.\n * @deprecated Properties may be explicitly exported to the global scope, but\n *     this should no longer be done in bulk.\n */\ngoog.globalize = function(obj, opt_global) {\n  var global = opt_global || goog.global;\n  for (var x in obj) {\n    global[x] = obj[x];\n  }\n};\n\n\n/**\n * Adds a dependency from a file to the files it requires.\n * @param {string} relPath The path to the js file.\n * @param {!Array<string>} provides An array of strings with\n *     the names of the objects this file provides.\n * @param {!Array<string>} requires An array of strings with\n *     the names of the objects this file requires.\n * @param {boolean=} opt_isModule Whether this dependency must be loaded as\n *     a module as declared by goog.module.\n */\ngoog.addDependency = function(relPath, provides, requires, opt_isModule) {\n  if (goog.DEPENDENCIES_ENABLED) {\n    var provide, require;\n    var path = relPath.replace(/\\\\/g, '/');\n    var deps = goog.dependencies_;\n    for (var i = 0; provide = provides[i]; i++) {\n      deps.nameToPath[provide] = path;\n      deps.pathIsModule[path] = !!opt_isModule;\n    }\n    for (var j = 0; require = requires[j]; j++) {\n      if (!(path in deps.requires)) {\n        deps.requires[path] = {};\n      }\n      deps.requires[path][require] = true;\n    }\n  }\n};\n\n\n\n\n// NOTE(nnaze): The debug DOM loader was included in base.js as an original way\n// to do \"debug-mode\" development.  The dependency system can sometimes be\n// confusing, as can the debug DOM loader's asynchronous nature.\n//\n// With the DOM loader, a call to goog.require() is not blocking -- the script\n// will not load until some point after the current script.  If a namespace is\n// needed at runtime, it needs to be defined in a previous script, or loaded via\n// require() with its registered dependencies.\n// User-defined namespaces may need their own deps file.  See http://go/js_deps,\n// http://go/genjsdeps, or, externally, DepsWriter.\n// https://developers.google.com/closure/library/docs/depswriter\n//\n// Because of legacy clients, the DOM loader can't be easily removed from\n// base.js.  Work is being done to make it disableable or replaceable for\n// different environments (DOM-less JavaScript interpreters like Rhino or V8,\n// for example). See bootstrap/ for more information.\n\n\n/**\n * @define {boolean} Whether to enable the debug loader.\n *\n * If enabled, a call to goog.require() will attempt to load the namespace by\n * appending a script tag to the DOM (if the namespace has been registered).\n *\n * If disabled, goog.require() will simply assert that the namespace has been\n * provided (and depend on the fact that some outside tool correctly ordered\n * the script).\n */\ngoog.define('goog.ENABLE_DEBUG_LOADER', true);\n\n\n/**\n * @param {string} msg\n * @private\n */\ngoog.logToConsole_ = function(msg) {\n  if (goog.global.console) {\n    goog.global.console['error'](msg);\n  }\n};\n\n\n/**\n * Implements a system for the dynamic resolution of dependencies that works in\n * parallel with the BUILD system. Note that all calls to goog.require will be\n * stripped by the JSCompiler when the --closure_pass option is used.\n * @see goog.provide\n * @param {string} name Namespace to include (as was given in goog.provide()) in\n *     the form \"goog.package.part\".\n * @return {?} If called within a goog.module file, the associated namespace or\n *     module otherwise null.\n */\ngoog.require = function(name) {\n\n  // If the object already exists we do not need do do anything.\n  if (!COMPILED) {\n    if (goog.ENABLE_DEBUG_LOADER && goog.IS_OLD_IE_) {\n      goog.maybeProcessDeferredDep_(name);\n    }\n\n    if (goog.isProvided_(name)) {\n      if (goog.isInModuleLoader_()) {\n        return goog.module.getInternal_(name);\n      } else {\n        return null;\n      }\n    }\n\n    if (goog.ENABLE_DEBUG_LOADER) {\n      var path = goog.getPathFromDeps_(name);\n      if (path) {\n        goog.included_[path] = true;\n        goog.writeScripts_();\n        return null;\n      }\n    }\n\n    var errorMessage = 'goog.require could not find: ' + name;\n    goog.logToConsole_(errorMessage);\n\n    throw Error(errorMessage);\n  }\n};\n\n\n/**\n * Path for included scripts.\n * @type {string}\n */\ngoog.basePath = '';\n\n\n/**\n * A hook for overriding the base path.\n * @type {string|undefined}\n */\ngoog.global.CLOSURE_BASE_PATH;\n\n\n/**\n * Whether to write out Closure's deps file. By default, the deps are written.\n * @type {boolean|undefined}\n */\ngoog.global.CLOSURE_NO_DEPS;\n\n\n/**\n * A function to import a single script. This is meant to be overridden when\n * Closure is being run in non-HTML contexts, such as web workers. It's defined\n * in the global scope so that it can be set before base.js is loaded, which\n * allows deps.js to be imported properly.\n *\n * The function is passed the script source, which is a relative URI. It should\n * return true if the script was imported, false otherwise.\n * @type {(function(string): boolean)|undefined}\n */\ngoog.global.CLOSURE_IMPORT_SCRIPT;\n\n\n/**\n * Null function used for default values of callbacks, etc.\n * @return {void} Nothing.\n */\ngoog.nullFunction = function() {};\n\n\n\n/**\n * When defining a class Foo with an abstract method bar(), you can do:\n * Foo.prototype.bar = goog.abstractMethod\n *\n * Now if a subclass of Foo fails to override bar(), an error will be thrown\n * when bar() is invoked.\n *\n * Note: This does not take the name of the function to override as an argument\n * because that would make it more difficult to obfuscate our JavaScript code.\n *\n * @type {!Function}\n * @throws {Error} when invoked to indicate the method should be overridden.\n */\ngoog.abstractMethod = function() {\n  throw Error('unimplemented abstract method');\n};\n\n\n/**\n * Adds a {@code getInstance} static method that always returns the same\n * instance object.\n * @param {!Function} ctor The constructor for the class to add the static\n *     method to.\n */\ngoog.addSingletonGetter = function(ctor) {\n  ctor.getInstance = function() {\n    if (ctor.instance_) {\n      return ctor.instance_;\n    }\n    if (goog.DEBUG) {\n      // NOTE: JSCompiler can't optimize away Array#push.\n      goog.instantiatedSingletons_[goog.instantiatedSingletons_.length] = ctor;\n    }\n    return ctor.instance_ = new ctor;\n  };\n};\n\n\n/**\n * All singleton classes that have been instantiated, for testing. Don't read\n * it directly, use the {@code goog.testing.singleton} module. The compiler\n * removes this variable if unused.\n * @type {!Array<!Function>}\n * @private\n */\ngoog.instantiatedSingletons_ = [];\n\n\n/**\n * @define {boolean} Whether to load goog.modules using {@code eval} when using\n * the debug loader.  This provides a better debugging experience as the\n * source is unmodified and can be edited using Chrome Workspaces or similar.\n * However in some environments the use of {@code eval} is banned\n * so we provide an alternative.\n */\ngoog.define('goog.LOAD_MODULE_USING_EVAL', true);\n\n\n/**\n * @define {boolean} Whether the exports of goog.modules should be sealed when\n * possible.\n */\ngoog.define('goog.SEAL_MODULE_EXPORTS', goog.DEBUG);\n\n\n/**\n * The registry of initialized modules:\n * the module identifier to module exports map.\n * @private @const {!Object<string, ?>}\n */\ngoog.loadedModules_ = {};\n\n\n/**\n * True if goog.dependencies_ is available.\n * @const {boolean}\n */\ngoog.DEPENDENCIES_ENABLED = !COMPILED && goog.ENABLE_DEBUG_LOADER;\n\n\nif (goog.DEPENDENCIES_ENABLED) {\n  /**\n   * Object used to keep track of urls that have already been added. This record\n   * allows the prevention of circular dependencies.\n   * @private {!Object<string, boolean>}\n   */\n  goog.included_ = {};\n\n\n  /**\n   * This object is used to keep track of dependencies and other data that is\n   * used for loading scripts.\n   * @private\n   * @type {{\n   *   pathIsModule: !Object<string, boolean>,\n   *   nameToPath: !Object<string, string>,\n   *   requires: !Object<string, !Object<string, boolean>>,\n   *   visited: !Object<string, boolean>,\n   *   written: !Object<string, boolean>,\n   *   deferred: !Object<string, string>\n   * }}\n   */\n  goog.dependencies_ = {\n    pathIsModule: {}, // 1 to 1\n\n    nameToPath: {}, // 1 to 1\n\n    requires: {}, // 1 to many\n\n    // Used when resolving dependencies to prevent us from visiting file twice.\n    visited: {},\n\n    written: {}, // Used to keep track of script files we have written.\n\n    deferred: {} // Used to track deferred module evaluations in old IEs\n  };\n\n\n  /**\n   * Tries to detect whether is in the context of an HTML document.\n   * @return {boolean} True if it looks like HTML document.\n   * @private\n   */\n  goog.inHtmlDocument_ = function() {\n    var doc = goog.global.document;\n    return typeof doc != 'undefined' &&\n           'write' in doc;  // XULDocument misses write.\n  };\n\n\n  /**\n   * Tries to detect the base path of base.js script that bootstraps Closure.\n   * @private\n   */\n  goog.findBasePath_ = function() {\n    if (goog.global.CLOSURE_BASE_PATH) {\n      goog.basePath = goog.global.CLOSURE_BASE_PATH;\n      return;\n    } else if (!goog.inHtmlDocument_()) {\n      return;\n    }\n    var doc = goog.global.document;\n    var scripts = doc.getElementsByTagName('SCRIPT');\n    // Search backwards since the current script is in almost all cases the one\n    // that has base.js.\n    for (var i = scripts.length - 1; i >= 0; --i) {\n      var script = /** @type {!HTMLScriptElement} */ (scripts[i]);\n      var src = script.src;\n      var qmark = src.lastIndexOf('?');\n      var l = qmark == -1 ? src.length : qmark;\n      if (src.substr(l - 7, 7) == 'base.js') {\n        goog.basePath = src.substr(0, l - 7);\n        return;\n      }\n    }\n  };\n\n\n  /**\n   * Imports a script if, and only if, that script hasn't already been imported.\n   * (Must be called at execution time)\n   * @param {string} src Script source.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @private\n   */\n  goog.importScript_ = function(src, opt_sourceText) {\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n    if (importScript(src, opt_sourceText)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @const @private {boolean} */\n  goog.IS_OLD_IE_ = !goog.global.atob && goog.global.document &&\n      goog.global.document.all;\n\n\n  /**\n   * Given a URL initiate retrieval and execution of the module.\n   * @param {string} src Script source URL.\n   * @private\n   */\n  goog.importModule_ = function(src) {\n    // In an attempt to keep browsers from timing out loading scripts using\n    // synchronous XHRs, put each load in its own script block.\n    var bootstrap = 'goog.retrieveAndExecModule_(\"' + src + '\");';\n\n    if (goog.importScript_('', bootstrap)) {\n      goog.dependencies_.written[src] = true;\n    }\n  };\n\n\n  /** @private {!Array<string>} */\n  goog.queuedModules_ = [];\n\n\n  /**\n   * Return an appropriate module text. Suitable to insert into\n   * a script tag (that is unescaped).\n   * @param {string} srcUrl\n   * @param {string} scriptText\n   * @return {string}\n   * @private\n   */\n  goog.wrapModule_ = function(srcUrl, scriptText) {\n    if (!goog.LOAD_MODULE_USING_EVAL || !goog.isDef(goog.global.JSON)) {\n      return '' +\n          'goog.loadModule(function(exports) {' +\n          '\"use strict\";' +\n          scriptText +\n          '\\n' + // terminate any trailing single line comment.\n          ';return exports' +\n          '});' +\n          '\\n//# sourceURL=' + srcUrl + '\\n';\n    } else {\n      return '' +\n          'goog.loadModule(' +\n          goog.global.JSON.stringify(\n              scriptText + '\\n//# sourceURL=' + srcUrl + '\\n') +\n          ');';\n    }\n  };\n\n  // On IE9 and earlier, it is necessary to handle\n  // deferred module loads. In later browsers, the\n  // code to be evaluated is simply inserted as a script\n  // block in the correct order. To eval deferred\n  // code at the right time, we piggy back on goog.require to call\n  // goog.maybeProcessDeferredDep_.\n  //\n  // The goog.requires are used both to bootstrap\n  // the loading process (when no deps are available) and\n  // declare that they should be available.\n  //\n  // Here we eval the sources, if all the deps are available\n  // either already eval'd or goog.require'd.  This will\n  // be the case when all the dependencies have already\n  // been loaded, and the dependent module is loaded.\n  //\n  // But this alone isn't sufficient because it is also\n  // necessary to handle the case where there is no root\n  // that is not deferred.  For that there we register for an event\n  // and trigger goog.loadQueuedModules_ handle any remaining deferred\n  // evaluations.\n\n  /**\n   * Handle any remaining deferred goog.module evals.\n   * @private\n   */\n  goog.loadQueuedModules_ = function() {\n    var count = goog.queuedModules_.length;\n    if (count > 0) {\n      var queue = goog.queuedModules_;\n      goog.queuedModules_ = [];\n      for (var i = 0; i < count; i++) {\n        var path = queue[i];\n        goog.maybeProcessDeferredPath_(path);\n      }\n    }\n  };\n\n\n  /**\n   * Eval the named module if its dependencies are\n   * available.\n   * @param {string} name The module to load.\n   * @private\n   */\n  goog.maybeProcessDeferredDep_ = function(name) {\n    if (goog.isDeferredModule_(name) &&\n        goog.allDepsAreAvailable_(name)) {\n      var path = goog.getPathFromDeps_(name);\n      goog.maybeProcessDeferredPath_(goog.basePath + path);\n    }\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose evaluation has been deferred.\n   * @private\n   */\n  goog.isDeferredModule_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && goog.dependencies_.pathIsModule[path]) {\n      var abspath = goog.basePath + path;\n      return (abspath) in goog.dependencies_.deferred;\n    }\n    return false;\n  };\n\n  /**\n   * @param {string} name The module to check.\n   * @return {boolean} Whether the name represents a\n   *     module whose declared dependencies have all been loaded\n   *     (eval'd or a deferred module load)\n   * @private\n   */\n  goog.allDepsAreAvailable_ = function(name) {\n    var path = goog.getPathFromDeps_(name);\n    if (path && (path in goog.dependencies_.requires)) {\n      for (var requireName in goog.dependencies_.requires[path]) {\n        if (!goog.isProvided_(requireName) &&\n            !goog.isDeferredModule_(requireName)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n\n  /**\n   * @param {string} abspath\n   * @private\n   */\n  goog.maybeProcessDeferredPath_ = function(abspath) {\n    if (abspath in goog.dependencies_.deferred) {\n      var src = goog.dependencies_.deferred[abspath];\n      delete goog.dependencies_.deferred[abspath];\n      goog.globalEval(src);\n    }\n  };\n\n\n  /**\n   * @param {function(?):?|string} moduleDef The module definition.\n   */\n  goog.loadModule = function(moduleDef) {\n    // NOTE: we allow function definitions to be either in the from\n    // of a string to eval (which keeps the original source intact) or\n    // in a eval forbidden environment (CSP) we allow a function definition\n    // which in its body must call {@code goog.module}, and return the exports\n    // of the module.\n    var previousState = goog.moduleLoaderState_;\n    try {\n      goog.moduleLoaderState_ = {\n        moduleName: undefined, declareTestMethods: false};\n      var exports;\n      if (goog.isFunction(moduleDef)) {\n        exports = moduleDef.call(goog.global, {});\n      } else if (goog.isString(moduleDef)) {\n        exports = goog.loadModuleFromSource_.call(goog.global, moduleDef);\n      } else {\n        throw Error('Invalid module definition');\n      }\n\n      var moduleName = goog.moduleLoaderState_.moduleName;\n      if (!goog.isString(moduleName) || !moduleName) {\n        throw Error('Invalid module name \\\"' + moduleName + '\\\"');\n      }\n\n      // Don't seal legacy namespaces as they may be uses as a parent of\n      // another namespace\n      if (goog.moduleLoaderState_.declareLegacyNamespace) {\n        goog.constructNamespace_(moduleName, exports);\n      } else if (goog.SEAL_MODULE_EXPORTS && Object.seal) {\n        Object.seal(exports);\n      }\n\n      goog.loadedModules_[moduleName] = exports;\n      if (goog.moduleLoaderState_.declareTestMethods) {\n        for (var entry in exports) {\n          if (entry.indexOf('test', 0) === 0 ||\n              entry == 'tearDown' ||\n              entry == 'setUp' ||\n              entry == 'setUpPage' ||\n              entry == 'tearDownPage') {\n            goog.global[entry] = exports[entry];\n          }\n        }\n      }\n    } finally {\n      goog.moduleLoaderState_ = previousState;\n    }\n  };\n\n\n  /**\n   * @param {string} source\n   * @return {!Object}\n   * @private\n   */\n  goog.loadModuleFromSource_ = function(source) {\n    // NOTE: we avoid declaring parameters or local variables here to avoid\n    // masking globals or leaking values into the module definition.\n    'use strict';\n    var exports = {};\n    eval(arguments[0]);\n    return exports;\n  };\n\n\n  /**\n   * Writes a new script pointing to {@code src} directly into the DOM.\n   *\n   * NOTE: This method is not CSP-compliant. @see goog.appendScriptSrcNode_ for\n   * the fallback mechanism.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.writeScriptSrcNode_ = function(src) {\n    goog.global.document.write(\n        '<script type=\"text/javascript\" src=\"' + src + '\"></' + 'script>');\n  };\n\n\n  /**\n   * Appends a new script node to the DOM using a CSP-compliant mechanism. This\n   * method exists as a fallback for document.write (which is not allowed in a\n   * strict CSP context, e.g., Chrome apps).\n   *\n   * NOTE: This method is not analogous to using document.write to insert a\n   * <script> tag; specifically, the user agent will execute a script added by\n   * document.write immediately after the current script block finishes\n   * executing, whereas the DOM-appended script node will not be executed until\n   * the entire document is parsed and executed. That is to say, this script is\n   * added to the end of the script execution queue.\n   *\n   * The page must not attempt to call goog.required entities until after the\n   * document has loaded, e.g., in or after the window.onload callback.\n   *\n   * @param {string} src The script URL.\n   * @private\n   */\n  goog.appendScriptSrcNode_ = function(src) {\n    var doc = goog.global.document;\n    var scriptEl = doc.createElement('script');\n    scriptEl.type = 'text/javascript';\n    scriptEl.src = src;\n    scriptEl.defer = false;\n    scriptEl.async = false;\n    doc.head.appendChild(scriptEl);\n  };\n\n\n  /**\n   * The default implementation of the import function. Writes a script tag to\n   * import the script.\n   *\n   * @param {string} src The script url.\n   * @param {string=} opt_sourceText The optionally source text to evaluate\n   * @return {boolean} True if the script was imported, false otherwise.\n   * @private\n   */\n  goog.writeScriptTag_ = function(src, opt_sourceText) {\n    if (goog.inHtmlDocument_()) {\n      var doc = goog.global.document;\n\n      // If the user tries to require a new symbol after document load,\n      // something has gone terribly wrong. Doing a document.write would\n      // wipe out the page. This does not apply to the CSP-compliant method\n      // of writing script tags.\n      if (!goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING &&\n          doc.readyState == 'complete') {\n        // Certain test frameworks load base.js multiple times, which tries\n        // to write deps.js each time. If that happens, just fail silently.\n        // These frameworks wipe the page between each load of base.js, so this\n        // is OK.\n        var isDeps = /\\bdeps.js$/.test(src);\n        if (isDeps) {\n          return false;\n        } else {\n          throw Error('Cannot write \"' + src + '\" after document load');\n        }\n      }\n\n      var isOldIE = goog.IS_OLD_IE_;\n\n      if (opt_sourceText === undefined) {\n        if (!isOldIE) {\n          if (goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING) {\n            goog.appendScriptSrcNode_(src);\n          } else {\n            goog.writeScriptSrcNode_(src);\n          }\n        } else {\n          var state = \" onreadystatechange='goog.onScriptLoad_(this, \" +\n              ++goog.lastNonModuleScriptIndex_ + \")' \";\n          doc.write(\n              '<script type=\"text/javascript\" src=\"' +\n                  src + '\"' + state + '></' + 'script>');\n        }\n      } else {\n        doc.write(\n            '<script type=\"text/javascript\">' +\n            opt_sourceText +\n            '</' + 'script>');\n      }\n      return true;\n    } else {\n      return false;\n    }\n  };\n\n\n  /** @private {number} */\n  goog.lastNonModuleScriptIndex_ = 0;\n\n\n  /**\n   * A readystatechange handler for legacy IE\n   * @param {!HTMLScriptElement} script\n   * @param {number} scriptIndex\n   * @return {boolean}\n   * @private\n   */\n  goog.onScriptLoad_ = function(script, scriptIndex) {\n    // for now load the modules when we reach the last script,\n    // later allow more inter-mingling.\n    if (script.readyState == 'complete' &&\n        goog.lastNonModuleScriptIndex_ == scriptIndex) {\n      goog.loadQueuedModules_();\n    }\n    return true;\n  };\n\n  /**\n   * Resolves dependencies based on the dependencies added using addDependency\n   * and calls importScript_ in the correct order.\n   * @private\n   */\n  goog.writeScripts_ = function() {\n    /** @type {!Array<string>} The scripts we need to write this time. */\n    var scripts = [];\n    var seenScript = {};\n    var deps = goog.dependencies_;\n\n    /** @param {string} path */\n    function visitNode(path) {\n      if (path in deps.written) {\n        return;\n      }\n\n      // We have already visited this one. We can get here if we have cyclic\n      // dependencies.\n      if (path in deps.visited) {\n        if (!(path in seenScript)) {\n          seenScript[path] = true;\n          scripts.push(path);\n        }\n        return;\n      }\n\n      deps.visited[path] = true;\n\n      if (path in deps.requires) {\n        for (var requireName in deps.requires[path]) {\n          // If the required name is defined, we assume that it was already\n          // bootstrapped by other means.\n          if (!goog.isProvided_(requireName)) {\n            if (requireName in deps.nameToPath) {\n              visitNode(deps.nameToPath[requireName]);\n            } else {\n              throw Error('Undefined nameToPath for ' + requireName);\n            }\n          }\n        }\n      }\n\n      if (!(path in seenScript)) {\n        seenScript[path] = true;\n        scripts.push(path);\n      }\n    }\n\n    for (var path in goog.included_) {\n      if (!deps.written[path]) {\n        visitNode(path);\n      }\n    }\n\n    // record that we are going to load all these scripts.\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      goog.dependencies_.written[path] = true;\n    }\n\n    // If a module is loaded synchronously then we need to\n    // clear the current inModuleLoader value, and restore it when we are\n    // done loading the current \"requires\".\n    var moduleState = goog.moduleLoaderState_;\n    goog.moduleLoaderState_ = null;\n\n    var loadingModule = false;\n    for (var i = 0; i < scripts.length; i++) {\n      var path = scripts[i];\n      if (path) {\n        if (!deps.pathIsModule[path]) {\n          goog.importScript_(goog.basePath + path);\n        } else {\n          loadingModule = true;\n          goog.importModule_(goog.basePath + path);\n        }\n      } else {\n        goog.moduleLoaderState_ = moduleState;\n        throw Error('Undefined script input');\n      }\n    }\n\n    // restore the current \"module loading state\"\n    goog.moduleLoaderState_ = moduleState;\n  };\n\n\n  /**\n   * Looks at the dependency rules and tries to determine the script file that\n   * fulfills a particular rule.\n   * @param {string} rule In the form goog.namespace.Class or project.script.\n   * @return {?string} Url corresponding to the rule, or null.\n   * @private\n   */\n  goog.getPathFromDeps_ = function(rule) {\n    if (rule in goog.dependencies_.nameToPath) {\n      return goog.dependencies_.nameToPath[rule];\n    } else {\n      return null;\n    }\n  };\n\n  goog.findBasePath_();\n\n  // Allow projects to manage the deps files themselves.\n  if (!goog.global.CLOSURE_NO_DEPS) {\n    goog.importScript_(goog.basePath + 'deps.js');\n  }\n}\n\n\n/**\n * Normalize a file path by removing redundant \"..\" and extraneous \".\" file\n * path components.\n * @param {string} path\n * @return {string}\n * @private\n */\ngoog.normalizePath_ = function(path) {\n  var components = path.split('/');\n  var i = 0;\n  while (i < components.length) {\n    if (components[i] == '.') {\n      components.splice(i, 1);\n    } else if (i && components[i] == '..' &&\n        components[i - 1] && components[i - 1] != '..') {\n      components.splice(--i, 2);\n    } else {\n      i++;\n    }\n  }\n  return components.join('/');\n};\n\n\n/**\n * Loads file by synchronous XHR. Should not be used in production environments.\n * @param {string} src Source URL.\n * @return {string} File contents.\n * @private\n */\ngoog.loadFileSync_ = function(src) {\n  if (goog.global.CLOSURE_LOAD_FILE_SYNC) {\n    return goog.global.CLOSURE_LOAD_FILE_SYNC(src);\n  } else {\n    var xhr = new goog.global['XMLHttpRequest']();\n    xhr.open('get', src, false);\n    xhr.send();\n    return xhr.responseText;\n  }\n};\n\n\n/**\n * Retrieve and execute a module.\n * @param {string} src Script source URL.\n * @private\n */\ngoog.retrieveAndExecModule_ = function(src) {\n  if (!COMPILED) {\n    // The full but non-canonicalized URL for later use.\n    var originalPath = src;\n    // Canonicalize the path, removing any /./ or /../ since Chrome's debugging\n    // console doesn't auto-canonicalize XHR loads as it does <script> srcs.\n    src = goog.normalizePath_(src);\n\n    var importScript = goog.global.CLOSURE_IMPORT_SCRIPT ||\n        goog.writeScriptTag_;\n\n    var scriptText = goog.loadFileSync_(src);\n\n    if (scriptText != null) {\n      var execModuleScript = goog.wrapModule_(src, scriptText);\n      var isOldIE = goog.IS_OLD_IE_;\n      if (isOldIE) {\n        goog.dependencies_.deferred[originalPath] = execModuleScript;\n        goog.queuedModules_.push(originalPath);\n      } else {\n        importScript(src, execModuleScript);\n      }\n    } else {\n      throw new Error('load of ' + src + 'failed');\n    }\n  }\n};\n\n\n//==============================================================================\n// Language Enhancements\n//==============================================================================\n\n\n/**\n * This is a \"fixed\" version of the typeof operator.  It differs from the typeof\n * operator in such a way that null returns 'null' and arrays return 'array'.\n * @param {*} value The value to get the type of.\n * @return {string} The name of the type.\n */\ngoog.typeOf = function(value) {\n  var s = typeof value;\n  if (s == 'object') {\n    if (value) {\n      // Check these first, so we can avoid calling Object.prototype.toString if\n      // possible.\n      //\n      // IE improperly marshals tyepof across execution contexts, but a\n      // cross-context object will still return false for \"instanceof Object\".\n      if (value instanceof Array) {\n        return 'array';\n      } else if (value instanceof Object) {\n        return s;\n      }\n\n      // HACK: In order to use an Object prototype method on the arbitrary\n      //   value, the compiler requires the value be cast to type Object,\n      //   even though the ECMA spec explicitly allows it.\n      var className = Object.prototype.toString.call(\n          /** @type {Object} */ (value));\n      // In Firefox 3.6, attempting to access iframe window objects' length\n      // property throws an NS_ERROR_FAILURE, so we need to special-case it\n      // here.\n      if (className == '[object Window]') {\n        return 'object';\n      }\n\n      // We cannot always use constructor == Array or instanceof Array because\n      // different frames have different Array objects. In IE6, if the iframe\n      // where the array was created is destroyed, the array loses its\n      // prototype. Then dereferencing val.splice here throws an exception, so\n      // we can't use goog.isFunction. Calling typeof directly returns 'unknown'\n      // so that will work. In this case, this function will return false and\n      // most array functions will still work because the array is still\n      // array-like (supports length and []) even though it has lost its\n      // prototype.\n      // Mark Miller noticed that Object.prototype.toString\n      // allows access to the unforgeable [[Class]] property.\n      //  15.2.4.2 Object.prototype.toString ( )\n      //  When the toString method is called, the following steps are taken:\n      //      1. Get the [[Class]] property of this object.\n      //      2. Compute a string value by concatenating the three strings\n      //         \"[object \", Result(1), and \"]\".\n      //      3. Return Result(2).\n      // and this behavior survives the destruction of the execution context.\n      if ((className == '[object Array]' ||\n           // In IE all non value types are wrapped as objects across window\n           // boundaries (not iframe though) so we have to do object detection\n           // for this edge case.\n           typeof value.length == 'number' &&\n           typeof value.splice != 'undefined' &&\n           typeof value.propertyIsEnumerable != 'undefined' &&\n           !value.propertyIsEnumerable('splice')\n\n          )) {\n        return 'array';\n      }\n      // HACK: There is still an array case that fails.\n      //     function ArrayImpostor() {}\n      //     ArrayImpostor.prototype = [];\n      //     var impostor = new ArrayImpostor;\n      // this can be fixed by getting rid of the fast path\n      // (value instanceof Array) and solely relying on\n      // (value && Object.prototype.toString.vall(value) === '[object Array]')\n      // but that would require many more function calls and is not warranted\n      // unless closure code is receiving objects from untrusted sources.\n\n      // IE in cross-window calls does not correctly marshal the function type\n      // (it appears just as an object) so we cannot use just typeof val ==\n      // 'function'. However, if the object has a call property, it is a\n      // function.\n      if ((className == '[object Function]' ||\n          typeof value.call != 'undefined' &&\n          typeof value.propertyIsEnumerable != 'undefined' &&\n          !value.propertyIsEnumerable('call'))) {\n        return 'function';\n      }\n\n    } else {\n      return 'null';\n    }\n\n  } else if (s == 'function' && typeof value.call == 'undefined') {\n    // In Safari typeof nodeList returns 'function', and on Firefox typeof\n    // behaves similarly for HTML{Applet,Embed,Object}, Elements and RegExps. We\n    // would like to return object for those and we can detect an invalid\n    // function by making sure that the function object has a call method.\n    return 'object';\n  }\n  return s;\n};\n\n\n/**\n * Returns true if the specified value is null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is null.\n */\ngoog.isNull = function(val) {\n  return val === null;\n};\n\n\n/**\n * Returns true if the specified value is defined and not null.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is defined and not null.\n */\ngoog.isDefAndNotNull = function(val) {\n  // Note that undefined == null.\n  return val != null;\n};\n\n\n/**\n * Returns true if the specified value is an array.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArray = function(val) {\n  return goog.typeOf(val) == 'array';\n};\n\n\n/**\n * Returns true if the object looks like an array. To qualify as array like\n * the value needs to be either a NodeList or an object with a Number length\n * property. As a special case, a function value is not array like, because its\n * length property is fixed to correspond to the number of expected arguments.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an array.\n */\ngoog.isArrayLike = function(val) {\n  var type = goog.typeOf(val);\n  // We do not use goog.isObject here in order to exclude function values.\n  return type == 'array' || type == 'object' && typeof val.length == 'number';\n};\n\n\n/**\n * Returns true if the object looks like a Date. To qualify as Date-like the\n * value needs to be an object and have a getFullYear() function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a like a Date.\n */\ngoog.isDateLike = function(val) {\n  return goog.isObject(val) && typeof val.getFullYear == 'function';\n};\n\n\n/**\n * Returns true if the specified value is a string.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a string.\n */\ngoog.isString = function(val) {\n  return typeof val == 'string';\n};\n\n\n/**\n * Returns true if the specified value is a boolean.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is boolean.\n */\ngoog.isBoolean = function(val) {\n  return typeof val == 'boolean';\n};\n\n\n/**\n * Returns true if the specified value is a number.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a number.\n */\ngoog.isNumber = function(val) {\n  return typeof val == 'number';\n};\n\n\n/**\n * Returns true if the specified value is a function.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is a function.\n */\ngoog.isFunction = function(val) {\n  return goog.typeOf(val) == 'function';\n};\n\n\n/**\n * Returns true if the specified value is an object.  This includes arrays and\n * functions.\n * @param {?} val Variable to test.\n * @return {boolean} Whether variable is an object.\n */\ngoog.isObject = function(val) {\n  var type = typeof val;\n  return type == 'object' && val != null || type == 'function';\n  // return Object(val) === val also works, but is slower, especially if val is\n  // not an object.\n};\n\n\n/**\n * Gets a unique ID for an object. This mutates the object so that further calls\n * with the same object as a parameter returns the same value. The unique ID is\n * guaranteed to be unique across the current session amongst objects that are\n * passed into {@code getUid}. There is no guarantee that the ID is unique or\n * consistent across sessions. It is unsafe to generate unique ID for function\n * prototypes.\n *\n * @param {Object} obj The object to get the unique ID for.\n * @return {number} The unique ID for the object.\n */\ngoog.getUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In Opera window.hasOwnProperty exists but always returns false so we avoid\n  // using it. As a consequence the unique ID generated for BaseClass.prototype\n  // and SubClass.prototype will be the same.\n  return obj[goog.UID_PROPERTY_] ||\n      (obj[goog.UID_PROPERTY_] = ++goog.uidCounter_);\n};\n\n\n/**\n * Whether the given object is already assigned a unique ID.\n *\n * This does not modify the object.\n *\n * @param {!Object} obj The object to check.\n * @return {boolean} Whether there is an assigned unique id for the object.\n */\ngoog.hasUid = function(obj) {\n  return !!obj[goog.UID_PROPERTY_];\n};\n\n\n/**\n * Removes the unique ID from an object. This is useful if the object was\n * previously mutated using {@code goog.getUid} in which case the mutation is\n * undone.\n * @param {Object} obj The object to remove the unique ID field from.\n */\ngoog.removeUid = function(obj) {\n  // TODO(arv): Make the type stricter, do not accept null.\n\n  // In IE, DOM nodes are not instances of Object and throw an exception if we\n  // try to delete.  Instead we try to use removeAttribute.\n  if ('removeAttribute' in obj) {\n    obj.removeAttribute(goog.UID_PROPERTY_);\n  }\n  /** @preserveTry */\n  try {\n    delete obj[goog.UID_PROPERTY_];\n  } catch (ex) {\n  }\n};\n\n\n/**\n * Name for unique ID property. Initialized in a way to help avoid collisions\n * with other closure JavaScript on the same page.\n * @type {string}\n * @private\n */\ngoog.UID_PROPERTY_ = 'closure_uid_' + ((Math.random() * 1e9) >>> 0);\n\n\n/**\n * Counter for UID.\n * @type {number}\n * @private\n */\ngoog.uidCounter_ = 0;\n\n\n/**\n * Adds a hash code field to an object. The hash code is unique for the\n * given object.\n * @param {Object} obj The object to get the hash code for.\n * @return {number} The hash code for the object.\n * @deprecated Use goog.getUid instead.\n */\ngoog.getHashCode = goog.getUid;\n\n\n/**\n * Removes the hash code field from an object.\n * @param {Object} obj The object to remove the field from.\n * @deprecated Use goog.removeUid instead.\n */\ngoog.removeHashCode = goog.removeUid;\n\n\n/**\n * Clones a value. The input may be an Object, Array, or basic type. Objects and\n * arrays will be cloned recursively.\n *\n * WARNINGS:\n * <code>goog.cloneObject</code> does not detect reference loops. Objects that\n * refer to themselves will cause infinite recursion.\n *\n * <code>goog.cloneObject</code> is unaware of unique identifiers, and copies\n * UIDs created by <code>getUid</code> into cloned results.\n *\n * @param {*} obj The value to clone.\n * @return {*} A clone of the input value.\n * @deprecated goog.cloneObject is unsafe. Prefer the goog.object methods.\n */\ngoog.cloneObject = function(obj) {\n  var type = goog.typeOf(obj);\n  if (type == 'object' || type == 'array') {\n    if (obj.clone) {\n      return obj.clone();\n    }\n    var clone = type == 'array' ? [] : {};\n    for (var key in obj) {\n      clone[key] = goog.cloneObject(obj[key]);\n    }\n    return clone;\n  }\n\n  return obj;\n};\n\n\n/**\n * A native implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n * @suppress {deprecated} The compiler thinks that Function.prototype.bind is\n *     deprecated because some people have declared a pure-JS version.\n *     Only the pure-JS version is truly deprecated.\n */\ngoog.bindNative_ = function(fn, selfObj, var_args) {\n  return /** @type {!Function} */ (fn.call.apply(fn.bind, arguments));\n};\n\n\n/**\n * A pure-JS implementation of goog.bind.\n * @param {Function} fn A function to partially apply.\n * @param {Object|undefined} selfObj Specifies the object which this should\n *     point to when the function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @private\n */\ngoog.bindJs_ = function(fn, selfObj, var_args) {\n  if (!fn) {\n    throw new Error();\n  }\n\n  if (arguments.length > 2) {\n    var boundArgs = Array.prototype.slice.call(arguments, 2);\n    return function() {\n      // Prepend the bound arguments to the current arguments.\n      var newArgs = Array.prototype.slice.call(arguments);\n      Array.prototype.unshift.apply(newArgs, boundArgs);\n      return fn.apply(selfObj, newArgs);\n    };\n\n  } else {\n    return function() {\n      return fn.apply(selfObj, arguments);\n    };\n  }\n};\n\n\n/**\n * Partially applies this function to a particular 'this object' and zero or\n * more arguments. The result is a new function with some arguments of the first\n * function pre-filled and the value of this 'pre-specified'.\n *\n * Remaining arguments specified at call-time are appended to the pre-specified\n * ones.\n *\n * Also see: {@link #partial}.\n *\n * Usage:\n * <pre>var barMethBound = bind(myFunction, myObj, 'arg1', 'arg2');\n * barMethBound('arg3', 'arg4');</pre>\n *\n * @param {?function(this:T, ...)} fn A function to partially apply.\n * @param {T} selfObj Specifies the object which this should point to when the\n *     function is run.\n * @param {...*} var_args Additional arguments that are partially applied to the\n *     function.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n * @template T\n * @suppress {deprecated} See above.\n */\ngoog.bind = function(fn, selfObj, var_args) {\n  // TODO(nicksantos): narrow the type signature.\n  if (Function.prototype.bind &&\n      // NOTE(nicksantos): Somebody pulled base.js into the default Chrome\n      // extension environment. This means that for Chrome extensions, they get\n      // the implementation of Function.prototype.bind that calls goog.bind\n      // instead of the native one. Even worse, we don't want to introduce a\n      // circular dependency between goog.bind and Function.prototype.bind, so\n      // we have to hack this to make sure it works correctly.\n      Function.prototype.bind.toString().indexOf('native code') != -1) {\n    goog.bind = goog.bindNative_;\n  } else {\n    goog.bind = goog.bindJs_;\n  }\n  return goog.bind.apply(null, arguments);\n};\n\n\n/**\n * Like bind(), except that a 'this object' is not required. Useful when the\n * target function is already bound.\n *\n * Usage:\n * var g = partial(f, arg1, arg2);\n * g(arg3, arg4);\n *\n * @param {Function} fn A function to partially apply.\n * @param {...*} var_args Additional arguments that are partially applied to fn.\n * @return {!Function} A partially-applied form of the function bind() was\n *     invoked as a method of.\n */\ngoog.partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n\n/**\n * Copies all the members of a source object to a target object. This method\n * does not work on all browsers for all objects that contain keys such as\n * toString or hasOwnProperty. Use goog.object.extend for this purpose.\n * @param {Object} target Target.\n * @param {Object} source Source.\n */\ngoog.mixin = function(target, source) {\n  for (var x in source) {\n    target[x] = source[x];\n  }\n\n  // For IE7 or lower, the for-in-loop does not contain any properties that are\n  // not enumerable on the prototype object (for example, isPrototypeOf from\n  // Object.prototype) but also it will not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n};\n\n\n/**\n * @return {number} An integer value representing the number of milliseconds\n *     between midnight, January 1, 1970 and the current time.\n */\ngoog.now = (goog.TRUSTED_SITE && Date.now) || (function() {\n  // Unary plus operator converts its operand to a number which in the case of\n  // a date is done by calling getTime().\n  return +new Date();\n});\n\n\n/**\n * Evals JavaScript in the global scope.  In IE this uses execScript, other\n * browsers use goog.global.eval. If goog.global.eval does not evaluate in the\n * global scope (for example, in Safari), appends a script tag instead.\n * Throws an exception if neither execScript or eval is defined.\n * @param {string} script JavaScript string.\n */\ngoog.globalEval = function(script) {\n  if (goog.global.execScript) {\n    goog.global.execScript(script, 'JavaScript');\n  } else if (goog.global.eval) {\n    // Test to see if eval works\n    if (goog.evalWorksForGlobals_ == null) {\n      goog.global.eval('var _et_ = 1;');\n      if (typeof goog.global['_et_'] != 'undefined') {\n        delete goog.global['_et_'];\n        goog.evalWorksForGlobals_ = true;\n      } else {\n        goog.evalWorksForGlobals_ = false;\n      }\n    }\n\n    if (goog.evalWorksForGlobals_) {\n      goog.global.eval(script);\n    } else {\n      var doc = goog.global.document;\n      var scriptElt = doc.createElement('SCRIPT');\n      scriptElt.type = 'text/javascript';\n      scriptElt.defer = false;\n      // Note(user): can't use .innerHTML since \"t('<test>')\" will fail and\n      // .text doesn't work in Safari 2.  Therefore we append a text node.\n      scriptElt.appendChild(doc.createTextNode(script));\n      doc.body.appendChild(scriptElt);\n      doc.body.removeChild(scriptElt);\n    }\n  } else {\n    throw Error('goog.globalEval not available');\n  }\n};\n\n\n/**\n * Indicates whether or not we can call 'eval' directly to eval code in the\n * global scope. Set to a Boolean by the first call to goog.globalEval (which\n * empirically tests whether eval works for globals). @see goog.globalEval\n * @type {?boolean}\n * @private\n */\ngoog.evalWorksForGlobals_ = null;\n\n\n/**\n * Optional map of CSS class names to obfuscated names used with\n * goog.getCssName().\n * @private {!Object<string, string>|undefined}\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMapping_;\n\n\n/**\n * Optional obfuscation style for CSS class names. Should be set to either\n * 'BY_WHOLE' or 'BY_PART' if defined.\n * @type {string|undefined}\n * @private\n * @see goog.setCssNameMapping\n */\ngoog.cssNameMappingStyle_;\n\n\n/**\n * Handles strings that are intended to be used as CSS class names.\n *\n * This function works in tandem with @see goog.setCssNameMapping.\n *\n * Without any mapping set, the arguments are simple joined with a hyphen and\n * passed through unaltered.\n *\n * When there is a mapping, there are two possible styles in which these\n * mappings are used. In the BY_PART style, each part (i.e. in between hyphens)\n * of the passed in css name is rewritten according to the map. In the BY_WHOLE\n * style, the full css name is looked up in the map directly. If a rewrite is\n * not specified by the map, the compiler will output a warning.\n *\n * When the mapping is passed to the compiler, it will replace calls to\n * goog.getCssName with the strings from the mapping, e.g.\n *     var x = goog.getCssName('foo');\n *     var y = goog.getCssName(this.baseClass, 'active');\n *  becomes:\n *     var x= 'foo';\n *     var y = this.baseClass + '-active';\n *\n * If one argument is passed it will be processed, if two are passed only the\n * modifier will be processed, as it is assumed the first argument was generated\n * as a result of calling goog.getCssName.\n *\n * @param {string} className The class name.\n * @param {string=} opt_modifier A modifier to be appended to the class name.\n * @return {string} The class name or the concatenation of the class name and\n *     the modifier.\n */\ngoog.getCssName = function(className, opt_modifier) {\n  var getMapping = function(cssName) {\n    return goog.cssNameMapping_[cssName] || cssName;\n  };\n\n  var renameByParts = function(cssName) {\n    // Remap all the parts individually.\n    var parts = cssName.split('-');\n    var mapped = [];\n    for (var i = 0; i < parts.length; i++) {\n      mapped.push(getMapping(parts[i]));\n    }\n    return mapped.join('-');\n  };\n\n  var rename;\n  if (goog.cssNameMapping_) {\n    rename = goog.cssNameMappingStyle_ == 'BY_WHOLE' ?\n        getMapping : renameByParts;\n  } else {\n    rename = function(a) {\n      return a;\n    };\n  }\n\n  if (opt_modifier) {\n    return className + '-' + rename(opt_modifier);\n  } else {\n    return rename(className);\n  }\n};\n\n\n/**\n * Sets the map to check when returning a value from goog.getCssName(). Example:\n * <pre>\n * goog.setCssNameMapping({\n *   \"goog\": \"a\",\n *   \"disabled\": \"b\",\n * });\n *\n * var x = goog.getCssName('goog');\n * // The following evaluates to: \"a a-b\".\n * goog.getCssName('goog') + ' ' + goog.getCssName(x, 'disabled')\n * </pre>\n * When declared as a map of string literals to string literals, the JSCompiler\n * will replace all calls to goog.getCssName() using the supplied map if the\n * --closure_pass flag is set.\n *\n * @param {!Object} mapping A map of strings to strings where keys are possible\n *     arguments to goog.getCssName() and values are the corresponding values\n *     that should be returned.\n * @param {string=} opt_style The style of css name mapping. There are two valid\n *     options: 'BY_PART', and 'BY_WHOLE'.\n * @see goog.getCssName for a description.\n */\ngoog.setCssNameMapping = function(mapping, opt_style) {\n  goog.cssNameMapping_ = mapping;\n  goog.cssNameMappingStyle_ = opt_style;\n};\n\n\n/**\n * To use CSS renaming in compiled mode, one of the input files should have a\n * call to goog.setCssNameMapping() with an object literal that the JSCompiler\n * can extract and use to replace all calls to goog.getCssName(). In uncompiled\n * mode, JavaScript code should be loaded before this base.js file that declares\n * a global variable, CLOSURE_CSS_NAME_MAPPING, which is used below. This is\n * to ensure that the mapping is loaded before any calls to goog.getCssName()\n * are made in uncompiled mode.\n *\n * A hook for overriding the CSS name mapping.\n * @type {!Object<string, string>|undefined}\n */\ngoog.global.CLOSURE_CSS_NAME_MAPPING;\n\n\nif (!COMPILED && goog.global.CLOSURE_CSS_NAME_MAPPING) {\n  // This does not call goog.setCssNameMapping() because the JSCompiler\n  // requires that goog.setCssNameMapping() be called with an object literal.\n  goog.cssNameMapping_ = goog.global.CLOSURE_CSS_NAME_MAPPING;\n}\n\n\n/**\n * Gets a localized message.\n *\n * This function is a compiler primitive. If you give the compiler a localized\n * message bundle, it will replace the string at compile-time with a localized\n * version, and expand goog.getMsg call to a concatenated string.\n *\n * Messages must be initialized in the form:\n * <code>\n * var MSG_NAME = goog.getMsg('Hello {$placeholder}', {'placeholder': 'world'});\n * </code>\n *\n * @param {string} str Translatable string, places holders in the form {$foo}.\n * @param {Object<string, string>=} opt_values Maps place holder name to value.\n * @return {string} message with placeholders filled.\n */\ngoog.getMsg = function(str, opt_values) {\n  if (opt_values) {\n    str = str.replace(/\\{\\$([^}]+)}/g, function(match, key) {\n      return key in opt_values ? opt_values[key] : match;\n    });\n  }\n  return str;\n};\n\n\n/**\n * Gets a localized message. If the message does not have a translation, gives a\n * fallback message.\n *\n * This is useful when introducing a new message that has not yet been\n * translated into all languages.\n *\n * This function is a compiler primitive. Must be used in the form:\n * <code>var x = goog.getMsgWithFallback(MSG_A, MSG_B);</code>\n * where MSG_A and MSG_B were initialized with goog.getMsg.\n *\n * @param {string} a The preferred message.\n * @param {string} b The fallback message.\n * @return {string} The best translated message.\n */\ngoog.getMsgWithFallback = function(a, b) {\n  return a;\n};\n\n\n/**\n * Exposes an unobfuscated global namespace path for the given object.\n * Note that fields of the exported object *will* be obfuscated, unless they are\n * exported in turn via this function or goog.exportProperty.\n *\n * Also handy for making public items that are defined in anonymous closures.\n *\n * ex. goog.exportSymbol('public.path.Foo', Foo);\n *\n * ex. goog.exportSymbol('public.path.Foo.staticFunction', Foo.staticFunction);\n *     public.path.Foo.staticFunction();\n *\n * ex. goog.exportSymbol('public.path.Foo.prototype.myMethod',\n *                       Foo.prototype.myMethod);\n *     new public.path.Foo().myMethod();\n *\n * @param {string} publicPath Unobfuscated name to export.\n * @param {*} object Object the name should point to.\n * @param {Object=} opt_objectToExportTo The object to add the path to; default\n *     is goog.global.\n */\ngoog.exportSymbol = function(publicPath, object, opt_objectToExportTo) {\n  goog.exportPath_(publicPath, object, opt_objectToExportTo);\n};\n\n\n/**\n * Exports a property unobfuscated into the object's namespace.\n * ex. goog.exportProperty(Foo, 'staticFunction', Foo.staticFunction);\n * ex. goog.exportProperty(Foo.prototype, 'myMethod', Foo.prototype.myMethod);\n * @param {Object} object Object whose static property is being exported.\n * @param {string} publicName Unobfuscated name to export.\n * @param {*} symbol Object the name should point to.\n */\ngoog.exportProperty = function(object, publicName, symbol) {\n  object[publicName] = symbol;\n};\n\n\n/**\n * Inherit the prototype methods from one constructor into another.\n *\n * Usage:\n * <pre>\n * function ParentClass(a, b) { }\n * ParentClass.prototype.foo = function(a) { };\n *\n * function ChildClass(a, b, c) {\n *   ChildClass.base(this, 'constructor', a, b);\n * }\n * goog.inherits(ChildClass, ParentClass);\n *\n * var child = new ChildClass('a', 'b', 'see');\n * child.foo(); // This works.\n * </pre>\n *\n * @param {Function} childCtor Child class.\n * @param {Function} parentCtor Parent class.\n */\ngoog.inherits = function(childCtor, parentCtor) {\n  /** @constructor */\n  function tempCtor() {};\n  tempCtor.prototype = parentCtor.prototype;\n  childCtor.superClass_ = parentCtor.prototype;\n  childCtor.prototype = new tempCtor();\n  /** @override */\n  childCtor.prototype.constructor = childCtor;\n\n  /**\n   * Calls superclass constructor/method.\n   *\n   * This function is only available if you use goog.inherits to\n   * express inheritance relationships between classes.\n   *\n   * NOTE: This is a replacement for goog.base and for superClass_\n   * property defined in childCtor.\n   *\n   * @param {!Object} me Should always be \"this\".\n   * @param {string} methodName The method name to call. Calling\n   *     superclass constructor can be done with the special string\n   *     'constructor'.\n   * @param {...*} var_args The arguments to pass to superclass\n   *     method/constructor.\n   * @return {*} The return value of the superclass method/constructor.\n   */\n  childCtor.base = function(me, methodName, var_args) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var args = new Array(arguments.length - 2);\n    for (var i = 2; i < arguments.length; i++) {\n      args[i - 2] = arguments[i];\n    }\n    return parentCtor.prototype[methodName].apply(me, args);\n  };\n};\n\n\n/**\n * Call up to the superclass.\n *\n * If this is called from a constructor, then this calls the superclass\n * constructor with arguments 1-N.\n *\n * If this is called from a prototype method, then you must pass the name of the\n * method as the second argument to this function. If you do not, you will get a\n * runtime error. This calls the superclass' method with arguments 2-N.\n *\n * This function only works if you use goog.inherits to express inheritance\n * relationships between your classes.\n *\n * This function is a compiler primitive. At compile-time, the compiler will do\n * macro expansion to remove a lot of the extra overhead that this function\n * introduces. The compiler will also enforce a lot of the assumptions that this\n * function makes, and treat it as a compiler error if you break them.\n *\n * @param {!Object} me Should always be \"this\".\n * @param {*=} opt_methodName The method name if calling a super method.\n * @param {...*} var_args The rest of the arguments.\n * @return {*} The return value of the superclass method.\n * @suppress {es5Strict} This method can not be used in strict mode, but\n *     all Closure Library consumers must depend on this file.\n */\ngoog.base = function(me, opt_methodName, var_args) {\n  var caller = arguments.callee.caller;\n\n  if (goog.STRICT_MODE_COMPATIBLE || (goog.DEBUG && !caller)) {\n    throw Error('arguments.caller not defined.  goog.base() cannot be used ' +\n                'with strict mode code. See ' +\n                'http://www.ecma-international.org/ecma-262/5.1/#sec-C');\n  }\n\n  if (caller.superClass_) {\n    // Copying using loop to avoid deop due to passing arguments object to\n    // function. This is faster in many JS engines as of late 2014.\n    var ctorArgs = new Array(arguments.length - 1);\n    for (var i = 1; i < arguments.length; i++) {\n      ctorArgs[i - 1] = arguments[i];\n    }\n    // This is a constructor. Call the superclass constructor.\n    return caller.superClass_.constructor.apply(me, ctorArgs);\n  }\n\n  // Copying using loop to avoid deop due to passing arguments object to\n  // function. This is faster in many JS engines as of late 2014.\n  var args = new Array(arguments.length - 2);\n  for (var i = 2; i < arguments.length; i++) {\n    args[i - 2] = arguments[i];\n  }\n  var foundCaller = false;\n  for (var ctor = me.constructor;\n       ctor; ctor = ctor.superClass_ && ctor.superClass_.constructor) {\n    if (ctor.prototype[opt_methodName] === caller) {\n      foundCaller = true;\n    } else if (foundCaller) {\n      return ctor.prototype[opt_methodName].apply(me, args);\n    }\n  }\n\n  // If we did not find the caller in the prototype chain, then one of two\n  // things happened:\n  // 1) The caller is an instance method.\n  // 2) This method was not called by the right caller.\n  if (me[opt_methodName] === caller) {\n    return me.constructor.prototype[opt_methodName].apply(me, args);\n  } else {\n    throw Error(\n        'goog.base called from a method of one name ' +\n        'to a method of a different name');\n  }\n};\n\n\n/**\n * Allow for aliasing within scope functions.  This function exists for\n * uncompiled code - in compiled code the calls will be inlined and the aliases\n * applied.  In uncompiled code the function is simply run since the aliases as\n * written are valid JavaScript.\n *\n *\n * @param {function()} fn Function to call.  This function can contain aliases\n *     to namespaces (e.g. \"var dom = goog.dom\") or classes\n *     (e.g. \"var Timer = goog.Timer\").\n */\ngoog.scope = function(fn) {\n  fn.call(goog.global);\n};\n\n\n/*\n * To support uncompiled, strict mode bundles that use eval to divide source\n * like so:\n *    eval('someSource;//# sourceUrl sourcefile.js');\n * We need to export the globally defined symbols \"goog\" and \"COMPILED\".\n * Exporting \"goog\" breaks the compiler optimizations, so we required that\n * be defined externally.\n * NOTE: We don't use goog.exportSymbol here because we don't want to trigger\n * extern generation when that compiler option is enabled.\n */\nif (!COMPILED) {\n  goog.global['COMPILED'] = COMPILED;\n}\n\n\n\n//==============================================================================\n// goog.defineClass implementation\n//==============================================================================\n\n\n/**\n * Creates a restricted form of a Closure \"class\":\n *   - from the compiler's perspective, the instance returned from the\n *     constructor is sealed (no new properties may be added).  This enables\n *     better checks.\n *   - the compiler will rewrite this definition to a form that is optimal\n *     for type checking and optimization (initially this will be a more\n *     traditional form).\n *\n * @param {Function} superClass The superclass, Object or null.\n * @param {goog.defineClass.ClassDescriptor} def\n *     An object literal describing\n *     the class.  It may have the following properties:\n *     \"constructor\": the constructor function\n *     \"statics\": an object literal containing methods to add to the constructor\n *        as \"static\" methods or a function that will receive the constructor\n *        function as its only parameter to which static properties can\n *        be added.\n *     all other properties are added to the prototype.\n * @return {!Function} The class constructor.\n */\ngoog.defineClass = function(superClass, def) {\n  // TODO(johnlenz): consider making the superClass an optional parameter.\n  var constructor = def.constructor;\n  var statics = def.statics;\n  // Wrap the constructor prior to setting up the prototype and static methods.\n  if (!constructor || constructor == Object.prototype.constructor) {\n    constructor = function() {\n      throw Error('cannot instantiate an interface (no constructor defined).');\n    };\n  }\n\n  var cls = goog.defineClass.createSealingConstructor_(constructor, superClass);\n  if (superClass) {\n    goog.inherits(cls, superClass);\n  }\n\n  // Remove all the properties that should not be copied to the prototype.\n  delete def.constructor;\n  delete def.statics;\n\n  goog.defineClass.applyProperties_(cls.prototype, def);\n  if (statics != null) {\n    if (statics instanceof Function) {\n      statics(cls);\n    } else {\n      goog.defineClass.applyProperties_(cls, statics);\n    }\n  }\n\n  return cls;\n};\n\n\n/**\n * @typedef {\n *     !Object|\n *     {constructor:!Function}|\n *     {constructor:!Function, statics:(Object|function(Function):void)}}\n * @suppress {missingProvide}\n */\ngoog.defineClass.ClassDescriptor;\n\n\n/**\n * @define {boolean} Whether the instances returned by\n * goog.defineClass should be sealed when possible.\n */\ngoog.define('goog.defineClass.SEAL_CLASS_INSTANCES', goog.DEBUG);\n\n\n/**\n * If goog.defineClass.SEAL_CLASS_INSTANCES is enabled and Object.seal is\n * defined, this function will wrap the constructor in a function that seals the\n * results of the provided constructor function.\n *\n * @param {!Function} ctr The constructor whose results maybe be sealed.\n * @param {Function} superClass The superclass constructor.\n * @return {!Function} The replacement constructor.\n * @private\n */\ngoog.defineClass.createSealingConstructor_ = function(ctr, superClass) {\n  if (goog.defineClass.SEAL_CLASS_INSTANCES &&\n      Object.seal instanceof Function) {\n    // Don't seal subclasses of unsealable-tagged legacy classes.\n    if (superClass && superClass.prototype &&\n        superClass.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_]) {\n      return ctr;\n    }\n    /**\n     * @this {Object}\n     * @return {?}\n     */\n    var wrappedCtr = function() {\n      // Don't seal an instance of a subclass when it calls the constructor of\n      // its super class as there is most likely still setup to do.\n      var instance = ctr.apply(this, arguments) || this;\n      instance[goog.UID_PROPERTY_] = instance[goog.UID_PROPERTY_];\n      if (this.constructor === wrappedCtr) {\n        Object.seal(instance);\n      }\n      return instance;\n    };\n    return wrappedCtr;\n  }\n  return ctr;\n};\n\n\n// TODO(johnlenz): share these values with the goog.object\n/**\n * The names of the fields that are defined on Object.prototype.\n * @type {!Array<string>}\n * @private\n * @const\n */\ngoog.defineClass.OBJECT_PROTOTYPE_FIELDS_ = [\n  'constructor',\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'propertyIsEnumerable',\n  'toLocaleString',\n  'toString',\n  'valueOf'\n];\n\n\n// TODO(johnlenz): share this function with the goog.object\n/**\n * @param {!Object} target The object to add properties to.\n * @param {!Object} source The object to copy properties from.\n * @private\n */\ngoog.defineClass.applyProperties_ = function(target, source) {\n  // TODO(johnlenz): update this to support ES5 getters/setters\n\n  var key;\n  for (key in source) {\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n\n  // For IE the for-in-loop does not contain any properties that are not\n  // enumerable on the prototype object (for example isPrototypeOf from\n  // Object.prototype) and it will also not include 'replace' on objects that\n  // extend String and change 'replace' (not that it is common for anyone to\n  // extend anything except Object).\n  for (var i = 0; i < goog.defineClass.OBJECT_PROTOTYPE_FIELDS_.length; i++) {\n    key = goog.defineClass.OBJECT_PROTOTYPE_FIELDS_[i];\n    if (Object.prototype.hasOwnProperty.call(source, key)) {\n      target[key] = source[key];\n    }\n  }\n};\n\n\n/**\n * Sealing classes breaks the older idiom of assigning properties on the\n * prototype rather than in the constructor.  As such, goog.defineClass\n * must not seal subclasses of these old-style classes until they are fixed.\n * Until then, this marks a class as \"broken\", instructing defineClass\n * not to seal subclasses.\n * @param {!Function} ctr The legacy constructor to tag as unsealable.\n */\ngoog.tagUnsealableClass = function(ctr) {\n  if (!COMPILED && goog.defineClass.SEAL_CLASS_INSTANCES) {\n    ctr.prototype[goog.UNSEALABLE_CONSTRUCTOR_PROPERTY_] = true;\n  }\n};\n\n\n/**\n * Name for unsealable tag property.\n * @const @private {string}\n */\ngoog.UNSEALABLE_CONSTRUCTOR_PROPERTY_ = 'goog_defineClass_legacy_unsealable';\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n * @suppress {reportUnknownTypes}\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.defineProperty() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\n *\n * Refuses to define properties on Array.prototype and Object.prototype,\n * since we can't make them non-enumerable and this messes up peoples' for\n * loops.  Beyond this, we simply assign values and not worry\n * about enumerability or writeability.\n * @param {?} target\n * @param {string} property\n * @param {?} descriptor\n * @suppress {reportUnknownTypes}\n */\n$jscomp.defineProperty =\n    $jscomp.ASSUME_ES5 || typeof Object.defineProperties == 'function' ?\n    Object.defineProperty :\n    function(target, property, descriptor) {\n      descriptor = /** @type {!ObjectPropertyDescriptor} */ (descriptor);\n      // NOTE: This is currently never called with a descriptor outside\n      // the control of the compiler.  If we ever decide to polyfill either\n      // Object.defineProperty or Reflect.defineProperty for ES3, we should\n      // explicitly check for `get` or `set` on the descriptor and throw a\n      // TypeError, since it's impossible to properly polyfill it.\n      if (target == Array.prototype || target == Object.prototype) return;\n      target[property] = descriptor.value;\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Runtime code to store the global object.\n */\n'require base';\n'declare global';\n'declare window';\n\n\n/**\n * @param {!Object} maybeGlobal\n * @return {!Object} The global object.\n * @suppress {undefinedVars|reportUnknownTypes}\n */\n$jscomp.getGlobal = function(maybeGlobal) {\n  return (typeof window != 'undefined' && window === maybeGlobal) ?\n      maybeGlobal :\n      (typeof global != 'undefined' && global != null) ? global : maybeGlobal;\n};\n\n\n// TODO(sdh): This should be typed as \"the global object\", but there's not\n// currently any way to do this in the existing type system.\n/**\n * The global object. For browsers we could just use `this` but in Node that\n * doesn't work.\n * @const {?}\n */\n$jscomp.global = $jscomp.getGlobal(this);\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/defineproperty';\n'require util/global';\n\n/** @const {string} */\n$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_';\n\n\n/**\n * Initializes the Symbol function.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbol = function() {\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbol = function() {};\n\n  if (!$jscomp.global['Symbol']) {\n    $jscomp.global['Symbol'] = $jscomp.Symbol;\n  }\n};\n\n\n/**\n * Produces \"symbols\" (actually just unique strings).\n * @param {string=} opt_description\n * @return {symbol}\n */\n$jscomp.Symbol = /** @type {function(): !Function} */ (function() {\n  var counter = 0;\n  /**\n   * @param {string=} opt_description\n   * @return {symbol}\n   * @suppress {reportUnknownTypes}\n   */\n  function Symbol(opt_description) {\n    return /** @type {?} */ (\n        $jscomp.SYMBOL_PREFIX + (opt_description || '') + (counter++));\n  }\n  return Symbol;\n})();\n\n\n/**\n * Initializes Symbol.iterator (if it's not already defined) and adds a\n * Symbol.iterator property to the Array prototype.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.initSymbolIterator = function() {\n  $jscomp.initSymbol();\n  var symbolIterator = $jscomp.global['Symbol'].iterator;\n  if (!symbolIterator) {\n    symbolIterator = $jscomp.global['Symbol'].iterator =\n        $jscomp.global['Symbol']('iterator');\n  }\n\n  if (typeof Array.prototype[symbolIterator] != 'function') {\n    $jscomp.defineProperty(\n        Array.prototype, symbolIterator, {\n          configurable: true,\n          writable: true,\n          /**\n           * @this {Array}\n           * @return {!IteratorIterable}\n           */\n          value: function() {\n            return $jscomp.arrayIterator(this);\n          }\n        });\n  }\n\n  // Only need to do this once. All future calls are no-ops.\n  $jscomp.initSymbolIterator = function() {};\n};\n\n\n/**\n * Returns an iterator from the given array.\n * @param {!Array<T>} array\n * @return {!IteratorIterable<T>}\n * @template T\n */\n$jscomp.arrayIterator = function(array) {\n  var index = 0;\n  return $jscomp.iteratorPrototype(function() {\n    if (index < array.length) {\n      return {\n        done: false,\n        value: array[index++],\n      };\n    } else {\n      return {done: true};\n    }\n  });\n};\n\n\n/**\n * Returns an iterator with the given `next` method.  Passing\n * all iterators through this function allows easily extending\n * the definition of `%IteratorPrototype%` if methods are ever\n * added to it in the future.\n *\n * @param {function(this: Iterator<T>): T} next\n * @return {!IteratorIterable<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.iteratorPrototype = function(next) {\n  $jscomp.initSymbolIterator();\n\n  var iterator = {next: next};\n  /**\n   * @this {IteratorIterable}\n   * @return {!IteratorIterable}\n   */\n  iterator[$jscomp.global['Symbol'].iterator] = function() { return this; };\n  return /** @type {!IteratorIterable} */ (iterator);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Polyfill for for-of loops.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator for the given iterable.\n *\n * @param {string|!Iterable<T>|!Iterator<T>|!Arguments<T>} iterable\n * @return {!Iterator<T>}\n * @template T\n * @suppress {reportUnknownTypes}\n */\n$jscomp.makeIterator = function(iterable) {\n  $jscomp.initSymbolIterator();\n\n  // NOTE: Disabling typechecking because [] not allowed on @struct.\n  var iteratorFunction = /** @type {?} */ (iterable)[Symbol.iterator];\n  return iteratorFunction ? iteratorFunction.call(iterable) :\n      $jscomp.arrayIterator(/** @type {!Array} */ (iterable));\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides methods to polyfill native objects.\n */\n'require util/defineproperty';\n'require util/global';\n\n\n/**\n * @param {string} target Qualified name of the class or method to polyfill,\n *     e.g. 'Array.prototype.includes' or 'Map'.\n * @param {?function(*): *} polyfill A function that takes the current browser\n *     implementation of the target and returns an optional new polyfill\n *     implementation.  If null is returned, then no polyfill will be added.  A\n *     null argument for this parameter indicates that the function will not be\n *     polyfilled, and is only useful for `build_polyfill_table.js` bookkeeping.\n * @param {string} fromLang The language level in which the target is expected\n *     to already be present in the browser.  The compiler requires that\n *     `languageOut < fromLang` before injecting a polyfill (i.e. if the\n *     specified output language already includes the feature then there's no\n *     need to polyfill it).\n * @param {string} toLang The language level required by the polyfill\n *     implementation.  The compiler will issue an error if a polyfill is\n *     required, but `languageOut < toLang`.  Additionally, the\n *     `build_polyfill_table.js` script audits the polyfill dependency tree to\n *     ensure that no polyfill with a lower `toLang` depends on one with a\n *     higher `toLang`.\n * @suppress {reportUnknownTypes}\n * @noinline\n * NOTE: We prevent inlining so RemoveUnusedPolyfills can always recognize this\n * call.\n */\n$jscomp.polyfill = function(target, polyfill, fromLang, toLang) {\n  if (!polyfill) return;\n  var obj = $jscomp.global;\n  var split = target.split('.');\n  for (var i = 0; i < split.length - 1; i++) {\n    var key = split[i];\n    if (!(key in obj)) obj[key] = {};  // Might want to be defineProperty.\n    obj = obj[key];\n  }\n  var property = split[split.length - 1];\n  var orig = obj[property];\n  var impl = polyfill(orig);\n  if (impl == orig || impl == null) return;\n  $jscomp.defineProperty(\n      obj, property, {configurable: true, writable: true, value: impl});\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/checkstringargs';\n'require util/polyfill';\n\n$jscomp.polyfill('String.prototype.endsWith', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Tests whether the string ends with a given substring.\n   *\n   * <p>Polyfills the instance method String.prototype.endsWith().\n   *\n   * @this {string}\n   * @param {string} searchString\n   * @param {number=} opt_position\n   * @return {boolean}\n   */\n  var polyfill = function(searchString, opt_position) {\n    'use strict';\n    var string = $jscomp.checkStringArgs(this, searchString, 'endsWith');\n    searchString = searchString + '';\n    if (opt_position === void 0) opt_position = string.length;\n    var i = Math.max(0, Math.min(opt_position | 0, string.length));\n    var j = searchString.length;\n    while (j > 0 && i > 0) {\n      if (string[--i] != searchString[--j]) return false;\n    }\n    return j <= 0;\n  };\nreturn polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n\n/**\n * Throws if the argument is a RegExp, or if thisArg is undefined.\n * @param {?} thisArg The 'this' arg, which must be defined.\n * @param {*} arg The first argument of the function, which mustn't be a RegExp.\n * @param {string} func Name of the function, for reporting.\n * @return {string} The thisArg, coerced to a string.\n * @suppress {reportUnknownTypes}\n */\n$jscomp.checkStringArgs = function(thisArg, arg, func) {\n  if (thisArg == null) {\n    throw new TypeError(\n        \"The 'this' value for String.prototype.\" + func +\n        ' must not be null or undefined');\n  }\n  if (arg instanceof RegExp) {\n    throw new TypeError(\n        'First argument to String.prototype.' + func +\n        ' must not be a regular expression');\n  }\n  return thisArg + '';\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n\n$jscomp.polyfill('Math.trunc', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Truncates any fractional digits from its argument (towards zero).\n   *\n   * <p>Polyfills the static function Math.trunc().\n   *\n   * @param {number} x Any number, or value that can be coerced to a number.\n   * @return {number}\n   */\n  var polyfill = function(x) {\n    x = Number(x);\n    if (isNaN(x) || x === Infinity || x === -Infinity || x === 0) return x;\n    var y = Math.floor(Math.abs(x));\n    return x < 0 ? -y : y;\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Utilities for iterator-returning methods.\n */\n'require es6/symbol';\n\n\n/**\n * Creates an iterator from an array-like, with a transformation function.\n * @param {!IArrayLike<INPUT>} array\n * @param {function(number, INPUT): OUTPUT} transform\n * @return {!IteratorIterable<OUTPUT>}\n * @template INPUT, OUTPUT\n * @suppress {checkTypes|reportUnknownTypes}\n */\n$jscomp.iteratorFromArray = function(array, transform) {\n  $jscomp.initSymbolIterator();\n  // NOTE: IE8 doesn't support indexing from boxed Strings.\n  if (array instanceof String) array = array + '';\n  var i = 0;\n  var iter = {\n    next: function() {\n      if (i < array.length) {\n        var index = i++;\n        return {value: transform(index, array[index]), done: false};\n      }\n      iter.next = function() { return {done: true, value: void 0}; };\n      return iter.next();\n    }\n  };\n  iter[Symbol.iterator] = function() { return iter; };\n  return iter;\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require util/polyfill';\n'require es6/util/iteratorfromarray';\n\n$jscomp.polyfill('Array.prototype.entries', function(orig) {\n  if (orig) return orig;\n\n  /**\n   * Returns an iterator of [key, value] arrays, one for each entry\n   * in the given array.\n   *\n   * @this {!IArrayLike<VALUE>}\n   * @return {!IteratorIterable<!Array<number|VALUE>>}\n   * @template VALUE\n   * @suppress {reportUnknownTypes}\n   */\n  var polyfill = function() {\n    return $jscomp.iteratorFromArray(\n        this, function(i, v) { return [i, v]; });\n  };\n\n  return polyfill;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require base';\n\n/**\n * Synonym for Object.prototype.hasOwnProperty.call(obj, prop).\n * @param {!Object} obj\n * @param {string} prop\n * @return {boolean}\n */\n$jscomp.owns = function(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/symbol';\n'require es6/util/makeiterator';\n'require util/defineproperty';\n'require util/owns';\n'require util/polyfill';\n\n$jscomp.polyfill('WeakMap',\n    /**\n     * @param {*} NativeWeakMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeWeakMap) {\n  /**\n   * Checks conformance of the existing WeakMap.\n   * @return {boolean} True if the browser's implementation conforms.\n   */\n  function isConformant() {\n    if (!NativeWeakMap || !Object.seal) return false;\n    try {\n      var x = Object.seal({});\n      var y = Object.seal({});\n      var map = new /** @type {function(new: WeakMap, !Array)} */ (\n          NativeWeakMap)([[x, 2], [y, 3]]);\n      if (map.get(x) != 2 || map.get(y) != 3) return false;\n      map.delete(x);\n      map.set(y, 4);\n      return !map.has(x) && map.get(y) == 4;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeWeakMap && $jscomp.ES6_CONFORMANCE) return NativeWeakMap;\n  } else {\n    if (isConformant()) return NativeWeakMap;\n  }\n\n  var prop = '$jscomp_hidden_' + Math.random();\n\n  /**\n   * Inserts the hidden property into the target.\n   * @param {!Object} target\n   */\n  function insert(target) {\n    if (!$jscomp.owns(target, prop)) {\n      var obj = {};\n      // TODO(sdh): This property will be enumerated in IE8.  If this becomes\n      // a problem, we could avoid it by copying an infrequently-used non-enum\n      // method (like toLocaleString) onto the object itself and encoding the\n      // property on the copy instead.  This codepath must be easily removable\n      // if IE8 support is not needed.\n      $jscomp.defineProperty(target, prop, {value: obj});\n    }\n  }\n\n  /**\n   * Monkey-patches the freezing methods to ensure that the hidden\n   * property is added before any freezing happens.\n   * @param {string} name\n   */\n  function patch(name) {\n    var prev = Object[name];\n    if (prev) {\n      Object[name] = function(target) {\n        insert(target);\n        return prev(target);\n      };\n    }\n  }\n  patch('freeze');\n  patch('preventExtensions');\n  patch('seal');\n  // Note: no need to patch Reflect.preventExtensions since the polyfill\n  // just calls Object.preventExtensions anyway (and if it's not polyfilled\n  // then neither is WeakMap).\n\n  var index = 0;\n\n  /**\n   * Polyfill for WeakMap:\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\n   *\n   * This implementation is as non-leaky as possible, due to patching\n   * the freezing and sealing operations.  It does not include any logic\n   * to handle cases where a key was somehow made non-extensible without\n   * the special hidden property being added.  It takes some care to ensure\n   * the hidden property is not enumerated over nor discoverable, though\n   * it's not completely secure (particularly in IE8).\n   *\n   * @constructor\n   * @extends {WeakMap<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @param {!Iterator<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional initial data.\n   */\n  var PolyfillWeakMap = function(opt_iterable) {\n    /** @private @const {string} */\n    this.id_ = (index += (Math.random() + 1)).toString();\n\n    if (opt_iterable) {\n      $jscomp.initSymbol();\n      $jscomp.initSymbolIterator();\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item = entry.value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.set = function(key, value) {\n    insert(key);\n    if (!$jscomp.owns(key, prop)) {\n      // NOTE: If the insert() call fails on the key, but the property\n      // has previously successfully been added higher up the prototype\n      // chain, then we'll silently misbehave.  Instead, throw immediately\n      // before doing something bad.  If this becomes a problem (e.g. due\n      // to some rogue frozen objects) then we may need to add a slow and\n      // leaky fallback array to each WeakMap instance, as well as extra\n      // logic in each accessor to use it (*only*) when necessary.\n      throw new Error('WeakMap key fail: ' + key);\n    }\n    key[prop][this.id_] = value;\n    return this;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.get = function(key) {\n    return $jscomp.owns(key, prop) ? key[prop][this.id_] : undefined;\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.has = function(key) {\n    return $jscomp.owns(key, prop) && $jscomp.owns(key[prop], this.id_);\n  };\n\n  /** @override */\n  PolyfillWeakMap.prototype.delete = function(key) {\n    if (!$jscomp.owns(key, prop) ||\n        !$jscomp.owns(key[prop], this.id_)) {\n      return false;\n    }\n    return delete key[prop][this.id_];\n  };\n\n  return PolyfillWeakMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n'require es6/conformance';\n'require es6/symbol';\n'require es6/util/makeiterator';\n'require es6/weakmap';\n'require util/defines';\n'require util/owns';\n'require util/polyfill';\n\n\n/**\n * Internal record type for entries.\n * @record\n * @template KEY, VALUE\n * @suppress {reportUnknownTypes}\n */\n$jscomp.MapEntry = function() {\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.previous;\n  /** @type {!$jscomp.MapEntry<KEY, VALUE>} */\n  this.next;\n  /** @type {?Object} */\n  this.head;\n  /** @type {KEY} */\n  this.key;\n  /** @type {VALUE} */\n  this.value;\n};\n\n\n$jscomp.polyfill('Map',\n    /**\n     * @param {*} NativeMap\n     * @return {*}\n     * @suppress {reportUnknownTypes}\n     */\n    function(NativeMap) {\n\n  /**\n   * Checks conformance of the existing Map.\n   * @return {boolean} True if the browser's implementation conforms.\n   * @suppress {missingProperties} \"entries\" unknown prototype\n   */\n  function isConformant() {\n    if ($jscomp.ASSUME_NO_NATIVE_MAP ||\n        !NativeMap ||\n        typeof NativeMap != \"function\" ||\n        !NativeMap.prototype.entries ||\n        typeof Object.seal != 'function') {\n      return false;\n    }\n    // Some implementations don't support constructor arguments.\n    try {\n      NativeMap = /** @type {function(new: Map, !Iterator=)} */ (NativeMap);\n      var key = Object.seal({x: 4});\n      var map = new NativeMap($jscomp.makeIterator([[key, 's']]));\n      if (map.get(key) != 's' || map.size != 1 || map.get({x: 4}) ||\n          map.set({x: 4}, 't') != map || map.size != 2) {\n        return false;\n      }\n      var /** !Iterator<!Array> */ iter = map.entries();\n      var item = iter.next();\n      if (item.done || item.value[0] != key || item.value[1] != 's') {\n        return false;\n      }\n      item = iter.next();\n      if (item.done || item.value[0].x != 4 ||\n          item.value[1] != 't' || !iter.next().done) {\n        return false;\n      }\n      return true;\n    } catch (err) { // This should hopefully never happen, but let's be safe.\n      return false;\n    }\n  }\n\n  if ($jscomp.USE_PROXY_FOR_ES6_CONFORMANCE_CHECKS) {\n    if (NativeMap && $jscomp.ES6_CONFORMANCE) return NativeMap;\n  } else {\n    if (isConformant()) return NativeMap;\n  }\n\n  // We depend on Symbol.iterator, so ensure it's loaded.\n  $jscomp.initSymbol();\n  $jscomp.initSymbolIterator();\n\n\n  /** @const {!WeakMap<!Object, string>} */\n  var idMap = new WeakMap();\n\n\n  /**\n   * Polyfill for the global Map data type.\n   * @constructor\n   * @struct\n   * @extends {Map<KEY, VALUE>}\n   * @implements {Iterable<!Array<KEY|VALUE>>}\n   * @template KEY, VALUE\n   * @param {!Iterable<!Array<KEY|VALUE>>|!Array<!Array<KEY|VALUE>>|null=}\n   *     opt_iterable Optional data to populate the map.\n   */\n  // TODO(sdh): fix param type if heterogeneous arrays ever supported.\n  var PolyfillMap = function(opt_iterable) {\n    /** @private {!Object<!Array<!$jscomp.MapEntry<KEY, VALUE>>>} */\n    this.data_ = {};\n\n    /** @private {!$jscomp.MapEntry<KEY, VALUE>} */\n    this.head_ = createHead();\n\n    // Note: this property should not be changed.  If we're willing to give up\n    // ES3 support, we could define it as a property directly.  It should be\n    // marked readonly if such an annotation ever comes into existence.\n    /** @type {number} */\n    this.size = 0;\n\n    if (opt_iterable) {\n      var iter = $jscomp.makeIterator(opt_iterable);\n      var entry;\n      while (!(entry = iter.next()).done) {\n        var item =\n            /** @type {!IIterableResult<!Array<KEY|VALUE>>} */ (entry).value;\n        this.set(/** @type {KEY} */ (item[0]), /** @type {VALUE} */ (item[1]));\n      }\n    }\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.set = function(key, value) {\n    // normalize -0/+0 to +0\n    key = key === 0 ? 0 : key;\n    var r = maybeGetEntry(this, key);\n    if (!r.list) {\n      r.list = (this.data_[r.id] = []);\n    }\n    if (!r.entry) {\n      r.entry = {\n        next: this.head_,\n        previous: this.head_.previous,\n        head: this.head_,\n        key: key,\n        value: value,\n      };\n      r.list.push(r.entry);\n      this.head_.previous.next = r.entry;\n      this.head_.previous = r.entry;\n      this.size++;\n    } else {\n      r.entry.value = value;\n    }\n    return this;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.delete = function(key) {\n    var r = maybeGetEntry(this, key);\n    if (r.entry && r.list) {\n      r.list.splice(r.index, 1);\n      if (!r.list.length) delete this.data_[r.id];\n      r.entry.previous.next = r.entry.next;\n      r.entry.next.previous = r.entry.previous;\n      r.entry.head = null;\n      this.size--;\n      return true;\n    }\n    return false;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.clear = function() {\n    this.data_ = {};\n    this.head_ = this.head_.previous = createHead();\n    this.size = 0;\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.has = function(key) {\n    return !!(maybeGetEntry(this, key).entry);\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.get = function(key) {\n    var entry = maybeGetEntry(this, key).entry;\n    // NOTE: this cast is a lie, but so is the extern.\n    return /** @type {VALUE} */ (entry &&\n      /** @type {VALUE} */ (entry.value));\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.entries = function() {\n    return makeIterator(this, /** @return {!Array<(KEY|VALUE)>} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return ([entry.key, entry.value]);\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.keys = function() {\n    return makeIterator(this, /** @return {KEY} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.key;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.values = function() {\n    return makeIterator(this, /** @return {VALUE} */ function(\n        /** !$jscomp.MapEntry<KEY, VALUE> */ entry) {\n      return entry.value;\n    });\n  };\n\n\n  /** @override */\n  PolyfillMap.prototype.forEach = function(callback, opt_thisArg) {\n    var iter = this.entries();\n    var item;\n    while (!(item = iter.next()).done) {\n      var entry = item.value;\n      callback.call(\n          /** @type {?} */ (opt_thisArg),\n          /** @type {VALUE} */ (entry[1]),\n          /** @type {KEY} */ (entry[0]),\n          this);\n    }\n  };\n\n\n  /** @type {?} */ (PolyfillMap.prototype)[Symbol.iterator] =\n      PolyfillMap.prototype.entries;\n\n\n  /**\n   * Returns an entry or undefined.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {KEY} key\n   * @return {{id: string,\n   *           list: (!Array<!$jscomp.MapEntry<KEY, VALUE>>|undefined),\n   *           index: number,\n   *           entry: (!$jscomp.MapEntry<KEY, VALUE>|undefined)}}\n   * @template KEY, VALUE\n   */\n  var maybeGetEntry = function(map, key) {\n    var id = getId(key);\n    var list = map.data_[id];\n    if (list && $jscomp.owns(map.data_, id)) {\n      for (var index = 0; index < list.length; index++) {\n        var entry = list[index];\n        if ((key !== key && entry.key !== entry.key) || key === entry.key) {\n          return {id: id, list: list, index: index, entry: entry};\n        }\n      }\n    }\n    return {id: id, list: list, index: -1, entry: undefined};\n  };\n\n\n  /**\n   * Maps over the entries with the given function.\n   * @param {!PolyfillMap<KEY, VALUE>} map\n   * @param {function(!$jscomp.MapEntry<KEY, VALUE>): T} func\n   * @return {!IteratorIterable<T>}\n   * @template KEY, VALUE, T\n   * @private\n   */\n  var makeIterator = function(map, func) {\n    var entry = map.head_;\n    return $jscomp.iteratorPrototype(function() {\n      if (entry) {\n        while (entry.head != map.head_) {\n          entry = entry.previous;\n        }\n        while (entry.next != entry.head) {\n          entry = entry.next;\n          return {done: false, value: func(entry)};\n        }\n        entry = null; // make sure depletion is permanent\n      }\n      return {done: true, value: void 0};\n    });\n  };\n\n\n  /**\n   * Makes a new \"head\" element.\n   * @return {!$jscomp.MapEntry<KEY, VALUE>}\n   * @template KEY, VALUE\n   * @suppress {checkTypes} ignore missing key/value for head only\n   */\n  var createHead = function() {\n    var head = /** type {!$jscomp.MapEntry<KEY, VALUE>} */ ({});\n    head.previous = head.next = head.head = head;\n    return head;\n  };\n\n\n  /**\n   * Counter for generating IDs.\n   * @private {number}\n   */\n  var mapIndex = 0;\n\n\n  /**\n   * @param {*} obj An extensible object.\n   * @return {string} A unique ID.\n   */\n  var getId = function(obj) {\n    var type = obj && typeof obj;\n    if (type == 'object' || type == 'function') {\n      obj = /** @type {!Object} */ (obj);\n      if (!idMap.has(obj)) {\n        var id = '' + (++mapIndex);\n        idMap.set(obj, id);\n        return id;\n      }\n      return idMap.get(obj);\n    }\n    // Add a prefix since obj could be '__proto__';\n    return 'p_' + obj;\n  };\n\n\n  return PolyfillMap;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Provides a partial internal polyfill for Object.create.\n */\n'require util/defines';\n\n\n/**\n * Polyfill for Object.create() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create\n *\n * Does not implement the second argument.\n * @param {!Object} prototype\n * @return {!Object}\n */\n$jscomp.objectCreate =\n    ($jscomp.ASSUME_ES5 || typeof Object.create == 'function') ?\n    Object.create :\n    function(prototype) {\n      /** @constructor */\n      var ctor = function() {};\n      ctor.prototype = prototype;\n      return new ctor();\n    };\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require util/objectcreate';\n\n/**\n * Polyfill for Reflect.construct() method:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect/construct\n *\n * Calls a constructor as with the 'new' operator.\n * TODO(sdh): how to type 'target' with (new: TARGET) if opt_newTarget missing?\n *\n * @param {function(new: ?, ...?)} target The constructor to call.\n * @param {!Array} argList The arguments as a list.\n * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n * @return {TARGET} The result of the function call.\n * @template TARGET\n */\n$jscomp.construct = /** @type {function(): !Function} */ (function() {\n\n  // Check for https://github.com/Microsoft/ChakraCore/issues/3217\n  /** @return {boolean} */\n  function reflectConstructWorks() {\n    /** @constructor */ function Base() {}\n    /** @constructor */ function Derived() {}\n    new Base();\n    Reflect.construct(Base, [], Derived);\n    return new Base() instanceof Base;\n  }\n\n  if (typeof Reflect != 'undefined' && Reflect.construct) {\n    if (reflectConstructWorks()) return Reflect.construct;\n    var brokenConstruct = Reflect.construct;\n    /**\n     * @param {function(new: ?, ...?)} target The constructor to call.\n     * @param {!Array} argList The arguments as a list.\n     * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n     * @return {TARGET} The result of the function call.\n     * @template TARGET\n     * @suppress {reportUnknownTypes}\n     */\n    var patchedConstruct = function(target, argList, opt_newTarget) {\n      var out = brokenConstruct(target, argList);\n      if (opt_newTarget) Reflect.setPrototypeOf(out, opt_newTarget.prototype);\n      return out;\n    };\n    return patchedConstruct;\n  }\n\n  /**\n   * @param {function(new: ?, ...?)} target The constructor to call.\n   * @param {!Array} argList The arguments as a list.\n   * @param {function(new: TARGET, ...?)=} opt_newTarget The constructor to instantiate.\n   * @return {TARGET} The result of the function call.\n   * @template TARGET\n   * @suppress {reportUnknownTypes}\n   */\n  function construct(target, argList, opt_newTarget) {\n    if (opt_newTarget === undefined) opt_newTarget = target;\n    var proto = opt_newTarget.prototype || Object.prototype;\n    var obj = $jscomp.objectCreate(proto);\n    var apply = Function.prototype.apply;\n    var out = apply.call(target, obj, argList);\n    return out || obj;\n  }\n  return construct;\n})();\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n'require es6/util/construct';\n'require util/polyfill';\n\n$jscomp.polyfill('Reflect.construct', function(orig) {\n  // NOTE: This is just Reflect.construct if it's present and functional.\n  return $jscomp.construct;\n}, 'es6', 'es3');\n","/*\n * Copyright 2017 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n\n/**\n * @suppress {missingProperties,reportUnknownTypes}\n * @return {boolean}\n */\n$jscomp.underscoreProtoCanBeSet = function() {\n  var x = {a: true};\n  var y = {};\n  try {\n    y.__proto__ = x;\n    return y.a;\n  } catch (e) {\n    // __proto__ property is readonly (possibly IE 10?)\n  }\n  return false;\n};\n\n/**\n * If we can implement it, this will be a function that attempts to set the\n * prototype of an object, otherwise it will be `null`.\n *\n * It returns the first argument if successful. Throws a `TypeError` if the\n * object is not extensible.\n *\n * @type {null|function(!Object, ?Object): !Object}\n */\n$jscomp.setPrototypeOf = (typeof Object.setPrototypeOf == 'function') ?\n    Object.setPrototypeOf :\n    $jscomp.underscoreProtoCanBeSet() ?\n    function(target, proto) {\n      target.__proto__ = proto;\n      if (target.__proto__ !== proto) {\n        throw new TypeError(target + ' is not extensible');\n      }\n      return target;\n    } :\n    null;\n","/*\n * Copyright 2016 The Closure Compiler Authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview\n * @suppress {uselessCode}\n */\n'require util/polyfill';\n'require es6/util/setprototypeof';\n\n\n$jscomp.polyfill(\n    'Reflect.setPrototypeOf',\n    /**\n     * These annotations are intended to match the signature of\n     * $jscomp.polyfill(). Being more specific makes the compiler unhappy.\n     * @suppress {reportUnknownTypes}\n     * @param {?*} orig\n     * @return {*}\n     */\n    function(orig) {\n      if (orig) {\n        return orig;\n      } else if ($jscomp.setPrototypeOf) {\n        /** @const {!function(!Object,?Object):!Object} */\n        var setPrototypeOf = $jscomp.setPrototypeOf;\n        /**\n         * @param {!Object} target\n         * @param {?Object} proto\n         * @return {boolean}\n         */\n        var polyfill = function(target, proto) {\n          try {\n            setPrototypeOf(target, proto);\n            return true;\n          } catch (e) {\n            return false;\n          }\n        };\n        return polyfill;\n      } else {\n        // it isn't possible to implement this method\n        return null;\n      }\n    },\n    'es6', 'es5');\n","// -------------------------------------------------\n// --------------------- 9P ------------------------\n// -------------------------------------------------\n// Implementation of the 9p filesystem device following the \n// 9P2000.L protocol ( https://code.google.com/p/diod/wiki/protocol )\n\n\"use strict\";\n\n// TODO\n// flush\n// lock?\n// correct hard links\n\nvar EPERM = 1;       /* Operation not permitted */\nvar ENOENT = 2;      /* No such file or directory */\nvar EINVAL = 22;     /* Invalid argument */\nvar ENOTSUPP = 524;  /* Operation is not supported */\nvar ENOTEMPTY = 39;  /* Directory not empty */\nvar EPROTO    = 71   /* Protocol error */\n\nvar P9_SETATTR_MODE = 0x00000001;\nvar P9_SETATTR_UID = 0x00000002;\nvar P9_SETATTR_GID = 0x00000004;\nvar P9_SETATTR_SIZE = 0x00000008;\nvar P9_SETATTR_ATIME = 0x00000010;\nvar P9_SETATTR_MTIME = 0x00000020;\nvar P9_SETATTR_CTIME = 0x00000040;\nvar P9_SETATTR_ATIME_SET = 0x00000080;\nvar P9_SETATTR_MTIME_SET = 0x00000100;\n\nvar P9_STAT_MODE_DIR = 0x80000000;\nvar P9_STAT_MODE_APPEND = 0x40000000;\nvar P9_STAT_MODE_EXCL = 0x20000000;\nvar P9_STAT_MODE_MOUNT = 0x10000000;\nvar P9_STAT_MODE_AUTH = 0x08000000;\nvar P9_STAT_MODE_TMP = 0x04000000;\nvar P9_STAT_MODE_SYMLINK = 0x02000000;\nvar P9_STAT_MODE_LINK = 0x01000000;\nvar P9_STAT_MODE_DEVICE = 0x00800000;\nvar P9_STAT_MODE_NAMED_PIPE = 0x00200000;\nvar P9_STAT_MODE_SOCKET = 0x00100000;\nvar P9_STAT_MODE_SETUID = 0x00080000;\nvar P9_STAT_MODE_SETGID = 0x00040000;\nvar P9_STAT_MODE_SETVTX = 0x00010000;\n\nvar FID_NONE = -1;\nvar FID_INODE = 1;\nvar FID_XATTR = 2;\n\n/** \n * @constructor \n *\n * @param {FS} filesystem\n */\nfunction Virtio9p(filesystem, bus) {\n    /** @const @type {FS} */\n    this.fs = filesystem;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.SendReply = function(x, y) {};\n    this.deviceid = 0x9; // 9p filesystem\n    this.hostfeature = 0x1; // mountpoint\n    //this.configspace = [0x0, 0x4, 0x68, 0x6F, 0x73, 0x74]; // length of string and \"host\" string\n    //this.configspace = [0x0, 0x9, 0x2F, 0x64, 0x65, 0x76, 0x2F, 0x72, 0x6F, 0x6F, 0x74 ]; // length of string and \"/dev/root\" string\n\n    this.configspace = new Uint8Array([0x6, 0x0, 0x68, 0x6F, 0x73, 0x74, 0x39, 0x70]); // length of string and \"host9p\" string\n    this.VERSION = \"9P2000.L\";\n    this.BLOCKSIZE = 8192; // Let's define one page.\n    this.msize = 8192; // maximum message size\n    this.replybuffer = new Uint8Array(this.msize*2); // Twice the msize to stay on the safe site\n    this.replybuffersize = 0;\n\n    this.fids = [];\n}\n\nVirtio9p.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.deviceid;\n    state[1] = this.hostfeature;\n    state[2] = this.configspace;\n    state[3] = this.VERSION;\n    state[4] = this.BLOCKSIZE;\n    state[5] = this.msize;\n    state[6] = this.replybuffer;\n    state[7] = this.replybuffersize;\n    state[8] = this.fids.map(function(f) { return [f.inodeid, f.type, f.uid] });\n\n    return state;\n};\n\nVirtio9p.prototype.set_state = function(state)\n{\n    this.deviceid = state[0];\n    this.hostfeature = state[1];\n    this.configspace = state[2];\n    this.VERSION = state[3];\n    this.BLOCKSIZE = state[4];\n    this.msize = state[5];\n    this.replybuffer = state[6];\n    this.replybuffersize = state[7];\n    this.fids = state[8].map(function(f) { return { inodeid: f[0], type: f[1], uid: f[2] } });\n};\n\nVirtio9p.prototype.Createfid = function(inode, type, uid) {\n    return {inodeid: inode, type: type, uid: uid};\n}\n\nVirtio9p.prototype.Reset = function() {\n    this.fids = [];\n}\n\n\nVirtio9p.prototype.BuildReply = function(id, tag, payloadsize) {\n    marshall.Marshall([\"w\", \"b\", \"h\"], [payloadsize+7, id+1, tag], this.replybuffer, 0);\n    if ((payloadsize+7) >= this.replybuffer.length) {\n        message.Debug(\"Error in 9p: payloadsize exceeds maximum length\");\n    }\n    //for(var i=0; i<payload.length; i++)\n    //    this.replybuffer[7+i] = payload[i];\n    this.replybuffersize = payloadsize+7;\n    return;\n}\n\nVirtio9p.prototype.SendError = function (tag, errormsg, errorcode) {\n    //var size = marshall.Marshall([\"s\", \"w\"], [errormsg, errorcode], this.replybuffer, 7);\n    var size = marshall.Marshall([\"w\"], [errorcode], this.replybuffer, 7);\n    this.BuildReply(6, tag, size);\n}\n\nVirtio9p.prototype.ReceiveRequest = function (index, GetByte) {\n    var header = marshall.Unmarshall2([\"w\", \"b\", \"h\"], GetByte);\n    var size = header[0];\n    var id = header[1];\n    var tag = header[2];\n    //message.Debug(\"size:\" + size + \" id:\" + id + \" tag:\" + tag);\n\n    switch(id)\n    {\n        case 8: // statfs\n            size = this.fs.GetTotalSize(); // size used by all files\n            var space = this.fs.GetSpace();\n            var req = [];\n            req[0] = 0x01021997;\n            req[1] = this.BLOCKSIZE; // optimal transfer block size\n            req[2] = Math.floor(space/req[1]); // free blocks\n            req[3] = req[2] - Math.floor(size/req[1]); // free blocks in fs\n            req[4] = req[2] - Math.floor(size/req[1]); // free blocks avail to non-superuser\n            req[5] = this.fs.inodes.length; // total number of inodes\n            req[6] = 1024*1024;\n            req[7] = 0; // file system id?\n            req[8] = 256; // maximum length of filenames\n\n            size = marshall.Marshall([\"w\", \"w\", \"d\", \"d\", \"d\", \"d\", \"d\", \"d\", \"w\"], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 112: // topen\n        case 12: // tlopen\n            var req = marshall.Unmarshall2([\"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var mode = req[1];\n            message.Debug(\"[open] fid=\" + fid + \", mode=\" + mode);\n            var idx = this.fids[fid].inodeid;\n            var inode = this.fs.GetInode(idx);\n            message.Debug(\"file open \" + inode.name);\n            //if (inode.status == STATUS_LOADING) return;\n            var ret = this.fs.OpenInode(idx, mode);\n\n            this.fs.AddEvent(this.fids[fid].inodeid,\n                function() {\n                    message.Debug(\"file opened \" + inode.name + \" tag:\"+tag);\n                    req[0] = inode.qid;\n                    req[1] = this.msize - 24;\n                    marshall.Marshall([\"Q\", \"w\"], req, this.replybuffer, 7);\n                    this.BuildReply(id, tag, 13+4);\n                    this.SendReply(0, index);\n                }.bind(this)\n            );\n            break;\n\n        case 70: // link (just copying)\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var dfid = req[0];\n            var fid = req[1];\n            var name = req[2];\n            message.Debug(\"[link] dfid=\" + dfid + \", name=\" + name);\n            var inode = this.fs.CreateInode();\n            var inodetarget = this.fs.GetInode(this.fids[fid].inodeid);\n            var targetdata = this.fs.inodedata[this.fids[fid].inodeid];\n            //inode = inodetarget;\n            inode.mode = inodetarget.mode;\n            inode.size = inodetarget.size;\n            inode.symlink = inodetarget.symlink;\n            var data = this.fs.inodedata[this.fs.inodes.length] = new Uint8Array(inode.size);\n            for(var i=0; i<inode.size; i++) {\n                data[i] = targetdata[i];\n            }\n            inode.name = name;\n            inode.parentid = this.fids[dfid].inodeid;\n            this.fs.PushInode(inode);\n            \n            //inode.uid = inodetarget.uid;\n            //inode.gid = inodetarget.gid;\n            //inode.mode = inodetarget.mode | S_IFLNK;\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);       \n            break;\n\n        case 16: // symlink\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var symgt = req[2];\n            var gid = req[3];\n            message.Debug(\"[symlink] fid=\" + fid + \", name=\" + name + \", symgt=\" + symgt + \", gid=\" + gid); \n            var idx = this.fs.CreateSymlink(name, this.fids[fid].inodeid, symgt);\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 18: // mknod\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var major = req[3];\n            var minor = req[4];\n            var gid = req[5];\n            message.Debug(\"[mknod] fid=\" + fid + \", name=\" + name + \", major=\" + major + \", minor=\" + minor+ \"\");\n            var idx = this.fs.CreateNode(name, this.fids[fid].inodeid, major, minor);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n\n        case 22: // TREADLINK\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            var fid = req[0];\n            message.Debug(\"[readlink] fid=\" + fid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            size = marshall.Marshall([\"s\"], [inode.symlink], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n\n        case 72: // tmkdir\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var mode = req[2];\n            var gid = req[3];\n            message.Debug(\"[mkdir] fid=\" + fid + \", name=\" + name + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateDirectory(name, this.fids[fid].inodeid);\n            var inode = this.fs.GetInode(idx);\n            inode.mode = mode | S_IFDIR;\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 14: // tlcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"w\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var flags = req[2];\n            var mode = req[3];\n            var gid = req[4];\n            message.Debug(\"[create] fid=\" + fid + \", name=\" + name + \", flags=\" + flags + \", mode=\" + mode + \", gid=\" + gid); \n            var idx = this.fs.CreateFile(name, this.fids[fid].inodeid);\n            this.fids[fid].inodeid = idx;\n            this.fids[fid].type = FID_INODE;\n            var inode = this.fs.GetInode(idx);\n            inode.uid = this.fids[fid].uid;\n            inode.gid = gid;\n            inode.mode = mode;\n            marshall.Marshall([\"Q\", \"w\"], [inode.qid, this.msize - 24], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13+4);\n            this.SendReply(0, index);\n            break;\n\n        case 52: // lock always suceed\n            message.Debug(\"lock file\\n\");\n            marshall.Marshall([\"w\"], [0], this.replybuffer, 7);\n            this.BuildReply(id, tag, 1);\n            this.SendReply(0, index);\n            break;\n\n        /*\n        case 54: // getlock\n            break;        \n        */\n\n        case 24: // getattr\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[getattr]: fid=\" + fid + \" name=\" + inode.name + \" request mask=\" + req[1]);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"getattr: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            req[0] |= 0x1000; // P9_STATS_GEN\n\n            req[0] = req[1]; // request mask\n            req[1] = inode.qid;\n\n            req[2] = inode.mode; \n            req[3] = inode.uid; // user id\n            req[4] = inode.gid; // group id\n            \n            req[5] = inode.nlinks; // number of hard links\n            req[6] = (inode.major<<8) | (inode.minor); // device id low\n            req[7] = inode.size; // size low\n            req[8] = this.BLOCKSIZE;\n            req[9] = Math.floor(inode.size/512+1);; // blk size low\n            req[10] = inode.atime; // atime\n            req[11] = 0x0;\n            req[12] = inode.mtime; // mtime\n            req[13] = 0x0;\n            req[14] = inode.ctime; // ctime\n            req[15] = 0x0;\n            req[16] = 0x0; // btime\n            req[17] = 0x0; \n            req[18] = 0x0; // st_gen\n            req[19] = 0x0; // data_version\n            marshall.Marshall([\n            \"d\", \"Q\", \n            \"w\",  \n            \"w\", \"w\", \n            \"d\", \"d\", \n            \"d\", \"d\", \"d\",\n            \"d\", \"d\", // atime\n            \"d\", \"d\", // mtime\n            \"d\", \"d\", // ctime\n            \"d\", \"d\", // btime\n            \"d\", \"d\",\n            ], req, this.replybuffer, 7);\n            this.BuildReply(id, tag, 8 + 13 + 4 + 4+ 4 + 8*15);\n            this.SendReply(0, index);\n            break;\n\n        case 26: // setattr\n            var req = marshall.Unmarshall2([\"w\", \"w\", \n                \"w\", // mode \n                \"w\", \"w\", // uid, gid\n                \"d\", // size\n                \"d\", \"d\", // atime\n                \"d\", \"d\"] // mtime\n            , GetByte);\n            var fid = req[0];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            message.Debug(\"[setattr]: fid=\" + fid + \" request mask=\" + req[1] + \" name=\" +inode.name);\n            if (req[1] & P9_SETATTR_MODE) {\n                inode.mode = req[2];\n            }\n            if (req[1] & P9_SETATTR_UID) {\n                inode.uid = req[3];\n            }\n            if (req[1] & P9_SETATTR_GID) {\n                inode.gid = req[4];\n            }\n            if (req[1] & P9_SETATTR_ATIME) {\n                inode.atime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_MTIME) {\n                inode.mtime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_CTIME) {\n                inode.ctime = Math.floor((new Date()).getTime()/1000);\n            }\n            if (req[1] & P9_SETATTR_ATIME_SET) {\n                inode.atime = req[6];\n            }\n            if (req[1] & P9_SETATTR_MTIME_SET) {\n                inode.mtime = req[8];\n            }\n            if (req[1] & P9_SETATTR_SIZE) {\n                this.fs.ChangeSize(this.fids[fid].inodeid, req[5]);\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 50: // fsync\n            var req = marshall.Unmarshall2([\"w\", \"d\"], GetByte);\n            var fid = req[0];\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 40: // TREADDIR\n        case 116: // read\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            if (id == 40) message.Debug(\"[treaddir]: fid=\" + fid + \" offset=\" + offset + \" count=\" + count);\n            if (id == 116) message.Debug(\"[read]: fid=\" + fid + \" (\" + inode.name + \") offset=\" + offset + \" count=\" + count + \" fidtype=\" + this.fids[fid].type);\n            if(!inode || inode.status === STATUS_UNLINKED)\n            {\n                message.Debug(\"read/treaddir: unlinked\");\n                this.SendError(tag, \"No such file or directory\", ENOENT);\n                this.SendReply(0, index);\n                break;\n            }\n            if (this.fids[fid].type == FID_XATTR) {\n                if (inode.caps.length < offset+count) count = inode.caps.length - offset;\n                for(var i=0; i<count; i++)\n                    this.replybuffer[7+4+i] = inode.caps[offset+i];\n                marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                this.BuildReply(id, tag, 4 + count);\n                this.SendReply(0, index);\n            } else {\n                var file = this.fs.inodes[this.fids[fid].inodeid];\n                this.bus.send(\"9p-read-start\");\n\n                this.fs.OpenInode(this.fids[fid].inodeid, undefined);\n                this.fs.AddEvent(this.fids[fid].inodeid,\n                    function() {\n                        this.bus.send(\"9p-read-end\", [file.name, count]);\n\n                        if (inode.size < offset+count) count = inode.size - offset;\n                        var data = this.fs.inodedata[this.fids[fid].inodeid];\n                        if(data) {\n                            for(var i=0; i<count; i++)\n                                this.replybuffer[7+4+i] = data[offset+i];\n                        }\n                        marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n                        this.BuildReply(id, tag, 4 + count);\n                        this.SendReply(0, index);\n                    }.bind(this)\n                );\n            }\n            break;\n\n        case 118: // write\n            var req = marshall.Unmarshall2([\"w\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var offset = req[1];\n            var count = req[2];\n            message.Debug(\"[write]: fid=\" + fid + \" (\" + this.fs.inodes[this.fids[fid].inodeid].name + \") offset=\" + offset + \" count=\" + count);\n            this.fs.Write(this.fids[fid].inodeid, offset, count, GetByte);\n\n            var file = this.fs.inodes[this.fids[fid].inodeid];\n            this.bus.send(\"9p-write-end\", [file.name, count]);\n\n            marshall.Marshall([\"w\"], [count], this.replybuffer, 7);\n            this.BuildReply(id, tag, 4);\n            this.SendReply(0, index);\n            break;\n\n        case 74: // RENAMEAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\", \"s\"], GetByte);\n            var olddirfid = req[0];\n            var oldname = req[1];\n            var newdirfid = req[2];\n            var newname = req[3];\n            message.Debug(\"[renameat]: oldname=\" + oldname + \" newname=\" + newname);\n            var ret = this.fs.Rename(this.fids[olddirfid].inodeid, oldname, this.fids[newdirfid].inodeid, newname);\n            if (ret == false) {\n                this.SendError(tag, \"No such file or directory\", ENOENT);                   \n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 76: // TUNLINKAT\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"w\"], GetByte);\n            var dirfd = req[0];\n            var name = req[1];\n            var flags = req[2];\n            message.Debug(\"[unlink]: dirfd=\" + dirfd + \" name=\" + name + \" flags=\" + flags);\n            var fid = this.fs.Search(this.fids[dirfd].inodeid, name);\n            if (fid == -1) {\n                   this.SendError(tag, \"No such file or directory\", ENOENT);\n                   this.SendReply(0, index);\n                   break;\n            }\n            var ret = this.fs.Unlink(fid);\n            if (!ret) {\n                this.SendError(tag, \"Directory not empty\", ENOTEMPTY);\n                this.SendReply(0, index);\n                break;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 100: // version\n            var version = marshall.Unmarshall2([\"w\", \"s\"], GetByte);\n            message.Debug(\"[version]: msize=\" + version[0] + \" version=\" + version[1]);\n            this.msize = version[0];\n            size = marshall.Marshall([\"w\", \"s\"], [this.msize, this.VERSION], this.replybuffer, 7);\n            this.BuildReply(id, tag, size);\n            this.SendReply(0, index);\n            break;\n\n        case 104: // attach\n            // return root directorie's QID\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\", \"s\", \"w\"], GetByte);\n            var fid = req[0];\n            var uid = req[4];\n            message.Debug(\"[attach]: fid=\" + fid + \" afid=\" + hex8(req[1]) + \" uname=\" + req[2] + \" aname=\" + req[3]);\n            this.fids[fid] = this.Createfid(0, FID_INODE, uid);\n            var inode = this.fs.GetInode(this.fids[fid].inodeid);\n            marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 13);\n            this.SendReply(0, index);\n            break;\n\n        case 108: // tflush\n            var req = marshall.Unmarshall2([\"h\"], GetByte);\n            var oldtag = req[0];\n            message.Debug(\"[flush] \" + tag);\n            //marshall.Marshall([\"Q\"], [inode.qid], this.replybuffer, 7);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n\n        case 110: // walk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"h\"], GetByte);\n            var fid = req[0];\n            var nwfid = req[1];\n            var nwname = req[2];\n            message.Debug(\"[walk]: fid=\" + req[0] + \" nwfid=\" + req[1] + \" nwname=\" + nwname);\n            if (nwname == 0) {\n                this.fids[nwfid] = this.Createfid(this.fids[fid].inodeid, FID_INODE, this.fids[fid].uid);\n                //this.fids[nwfid].inodeid = this.fids[fid].inodeid;\n                marshall.Marshall([\"h\"], [0], this.replybuffer, 7);\n                this.BuildReply(id, tag, 2);\n                this.SendReply(0, index);\n                break;\n            }\n            var wnames = [];\n            for(var i=0; i<nwname; i++) {\n                wnames.push(\"s\");\n            }\n            var walk = marshall.Unmarshall2(wnames, GetByte);\n            var idx = this.fids[fid].inodeid;\n            var offset = 7+2;\n            var nwidx = 0;\n            //console.log(idx, this.fs.inodes[idx]);\n            message.Debug(\"walk in dir \" + this.fs.inodes[idx].name  + \" to: \" + walk.toString());\n            for(var i=0; i<nwname; i++) {\n                idx = this.fs.Search(idx, walk[i]);\n\n                if (idx == -1) {\n                   message.Debug(\"Could not find: \" + walk[i]);\n                   break;\n                }\n                offset += marshall.Marshall([\"Q\"], [this.fs.inodes[idx].qid], this.replybuffer, offset);\n                nwidx++;\n                //message.Debug(this.fids[nwfid].inodeid);\n                //this.fids[nwfid].inodeid = idx;\n                //this.fids[nwfid].type = FID_INODE;\n                this.fids[nwfid] = this.Createfid(idx, FID_INODE, this.fids[fid].uid);\n            }\n            marshall.Marshall([\"h\"], [nwidx], this.replybuffer, 7);\n            this.BuildReply(id, tag, offset-7);\n            this.SendReply(0, index);\n            break;\n\n        case 120: // clunk\n            var req = marshall.Unmarshall2([\"w\"], GetByte);\n            message.Debug(\"[clunk]: fid=\" + req[0]);\n            if (this.fids[req[0]] && this.fids[req[0]].inodeid >=  0) {\n                this.fs.CloseInode(this.fids[req[0]].inodeid);\n                this.fids[req[0]].inodeid = -1;\n                this.fids[req[0]].type = FID_NONE;\n            }\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            break;\n\n        case 32: // txattrcreate\n            var req = marshall.Unmarshall2([\"w\", \"s\", \"d\", \"w\"], GetByte);\n            var fid = req[0];\n            var name = req[1];\n            var attr_size = req[2];\n            var flags = req[3];\n            message.Debug(\"[txattrcreate]: fid=\" + fid + \" name=\" + name + \" attr_size=\" + attr_size + \" flags=\" + flags);\n            this.BuildReply(id, tag, 0);\n            this.SendReply(0, index);\n            //this.SendError(tag, \"Operation i not supported\",  EINVAL);\n            //this.SendReply(0, index);\n            break;\n\n        case 30: // xattrwalk\n            var req = marshall.Unmarshall2([\"w\", \"w\", \"s\"], GetByte);\n            var fid = req[0];\n            var newfid = req[1];\n            var name = req[2];\n            message.Debug(\"[xattrwalk]: fid=\" + req[0] + \" newfid=\" + req[1] + \" name=\" + req[2]);\n            this.fids[newfid] = this.Createfid(this.fids[fid].inodeid, FID_NONE, this.fids[fid].uid);\n            //this.fids[newfid].inodeid = this.fids[fid].inodeid;\n            //this.fids[newfid].type = FID_NONE;\n            var length = 0;\n            if (name == \"security.capability\") {\n                length = this.fs.PrepareCAPs(this.fids[fid].inodeid);\n                this.fids[newfid].type = FID_XATTR;\n            }\n            marshall.Marshall([\"d\"], [length], this.replybuffer, 7);\n            this.BuildReply(id, tag, 8);\n            this.SendReply(0, index);\n            break;\n\n        default:\n            message.Debug(\"Error in Virtio9p: Unknown id \" + id + \" received\");\n            message.Abort();\n            //this.SendError(tag, \"Operation i not supported\",  ENOTSUPP);\n            //this.SendReply(0, index);\n            break;\n    }\n\n    //consistency checks if there are problems with the filesystem\n    //this.fs.Check();\n}\n","// -------------------------------------------------\n// ----------------- FILESYSTEM---------------------\n// -------------------------------------------------\n// Implementation of a unix filesystem in memory.\n\n\"use strict\";\n\nvar S_IRWXUGO = 0x1FF;\nvar S_IFMT = 0xF000;\nvar S_IFSOCK = 0xC000;\nvar S_IFLNK = 0xA000;\nvar S_IFREG = 0x8000;\nvar S_IFBLK = 0x6000;\nvar S_IFDIR = 0x4000;\nvar S_IFCHR = 0x2000;\n\n//var S_IFIFO  0010000\n//var S_ISUID  0004000\n//var S_ISGID  0002000\n//var S_ISVTX  0001000\n\nvar O_RDONLY = 0x0000; // open for reading only \nvar O_WRONLY = 0x0001; // open for writing only\nvar O_RDWR = 0x0002; // open for reading and writing\nvar O_ACCMODE = 0x0003; // mask for above modes\n\nvar STATUS_INVALID = -0x1;\nvar STATUS_OK = 0x0;\nvar STATUS_OPEN = 0x1;\nvar STATUS_ON_SERVER = 0x2;\nvar STATUS_LOADING = 0x3;\nvar STATUS_UNLINKED = 0x4;\n\n\n/** @const */ var JSONFS_VERSION = 2;\n\n\n/** @const */ var JSONFS_IDX_NAME = 0\n/** @const */ var JSONFS_IDX_SIZE = 1\n/** @const */ var JSONFS_IDX_MTIME = 2\n/** @const */ var JSONFS_IDX_MODE = 3\n/** @const */ var JSONFS_IDX_UID = 4\n/** @const */ var JSONFS_IDX_GID = 5\n/** @const */ var JSONFS_IDX_TARGET = 6\n\n\n/** @constructor */\nfunction FS(baseurl) {\n    /** @type {Array.<Inode>} */\n    this.inodes = [];\n    this.events = [];\n\n    this.baseurl = baseurl;\n\n    this.qidnumber = 0x0;\n    this.filesinloadingqueue = 0;\n    this.OnLoaded = function() {};\n\n    //this.tar = new TAR(this);\n\n    this.inodedata = {};\n\n    this.total_size = 256 * 1024 * 1024 * 1024;\n    this.used_size = 0;\n\n    //RegisterMessage(\"LoadFilesystem\", this.LoadFilesystem.bind(this) );\n    //RegisterMessage(\"MergeFile\", this.MergeFile.bind(this) );\n    //RegisterMessage(\"tar\",\n    //    function(data) {\n    //        SendToMaster(\"tar\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n    //RegisterMessage(\"sync\",\n    //    function(data) {\n    //        SendToMaster(\"sync\", this.tar.Pack(data));\n    //    }.bind(this)\n    //);\n\n    // root entry\n    this.CreateDirectory(\"\", -1);\n}\n\n\n// -----------------------------------------------------\n\nFS.prototype.AddEvent = function(id, OnEvent) {\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_OK) {\n        OnEvent();\n        return;\n    }\n    this.events.push({id: id, OnEvent: OnEvent});    \n}\n\nFS.prototype.HandleEvent = function(id) {\n\n    if (this.filesinloadingqueue == 0) {\n        this.OnLoaded();\n        this.OnLoaded = function() {}\n    }\n    //message.Debug(\"number of events: \" + this.events.length);\n    var newevents = [];\n    for(var i=0; i<this.events.length; i++) {\n        if (this.events[i].id == id) {\n            this.events[i].OnEvent();\n        } else {\n            newevents.push(this.events[i]);\n        }\n    }\n    this.events = newevents;\n}\n\nFS.prototype.OnJSONLoaded = function(fs)\n{\n    if(DEBUG)\n    {\n        console.assert(fs, \"Invalid fs passed to OnJSONLoaded\");\n    }\n\n    //console.time(\"parse\");\n    var fsdata = JSON.parse(fs);\n    //console.timeEnd(\"parse\");\n\n    if(fsdata[\"version\"] !== JSONFS_VERSION)\n    {\n        throw \"The filesystem JSON format has changed. \" +\n              \"Please update your fs2json (https://github.com/copy/fs2json) and recreate the filesystem JSON.\";\n    }\n\n    var fsroot = fsdata[\"fsroot\"];\n    this.used_size = fsdata[\"size\"];\n\n    var me = this;\n\n    setTimeout(function()\n    {\n        //console.time(\"Load\");\n        //console.profile(\"Load\");\n        for(var i = 0; i < fsroot.length; i++) {\n            me.LoadRecursive(fsroot[i], 0);\n        }\n        //console.profileEnd(\"Load\");\n        //console.timeEnd(\"Load\");\n\n        //if(DEBUG)\n        //{\n        //    console.time(\"Check\");\n        //    me.Check();\n        //    console.timeEnd(\"Check\");\n        //}\n\n        me.OnLoaded();\n        me.OnLoaded = function() {};\n    }, 0);\n};\n\nFS.prototype.LoadRecursive = function(data, parentid)\n{\n    var inode = this.CreateInode();\n\n    inode.name = data[JSONFS_IDX_NAME]\n    inode.size = data[JSONFS_IDX_SIZE];\n    inode.mtime = data[JSONFS_IDX_MTIME];\n    inode.ctime = inode.mtime;\n    inode.atime = inode.mtime;\n    inode.mode = data[JSONFS_IDX_MODE];\n    inode.uid = data[JSONFS_IDX_UID];\n    inode.gid = data[JSONFS_IDX_GID];\n\n    inode.parentid = parentid;\n    this.inodes[inode.parentid].nlinks++;\n\n    var ifmt = inode.mode & S_IFMT;\n\n    if(ifmt === S_IFDIR)\n    {\n        this.LoadDir(inode, data[JSONFS_IDX_TARGET]);\n    }\n    else if(ifmt === S_IFREG)\n    {\n        inode.status = STATUS_ON_SERVER;\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFLNK)\n    {\n        inode.symlink = data[JSONFS_IDX_TARGET];\n        this.PushInode(inode);\n    }\n    else if(ifmt === S_IFSOCK)\n    {\n        // socket: ignore\n    }\n    else\n    {\n        dbg_log(\"Unexpected ifmt: \" + h(ifmt) + \" (\" + inode.name + \")\");\n    }\n}\n\nFS.prototype.LoadDir = function(inode, children)\n{\n    inode.updatedir = true;\n    inode.nlinks = 2; // . and ..\n\n    var p = this.inodes.length;\n    this.PushInode(inode);\n\n    for(var i = 0; i < children.length; i++) {\n        this.LoadRecursive(children[i], p);\n    }\n}\n\n// Loads the data from a url for a specific inode\nFS.prototype.LoadFile = function(idx) {\n    var inode = this.inodes[idx];\n    if (inode.status != STATUS_ON_SERVER) {\n        return;\n    }\n    inode.status = STATUS_LOADING;\n    this.filesinloadingqueue++;\n\n    //if (inode.compressed) {\n    //    inode.data = new Uint8Array(inode.size);\n    //    LoadBinaryResource(inode.url + \".bz2\",\n    //    function(buffer){\n    //        var buffer8 = new Uint8Array(buffer);\n    //        var ofs = 0;\n    //        bzip2.simple(buffer8, function(x){inode.data[ofs++] = x;}.bind(this) );    \n    //        inode.status = STATUS_OK;\n    //        this.filesinloadingqueue--;\n    //        this.HandleEvent(idx);            \n    //    }.bind(this), \n    //    function(error){throw error;});\n    //    return;\n    //}\n\n    if(this.baseurl)\n    {\n        LoadBinaryResource(this.baseurl + this.GetFullPath(inode.fid),  \n            function(buffer){\n                var data = this.inodedata[idx] = new Uint8Array(buffer);\n                inode.size = data.length; // correct size if the previous was wrong. \n                inode.status = STATUS_OK;\n\n                this.filesinloadingqueue--;\n                this.HandleEvent(idx);            \n            }.bind(this), \n            function(error){throw error;});\n    }\n    else\n    {\n        // If baseurl is not set, we started with an empty filesystem. No files\n        // can be loaded\n    }\n}\n\n// -----------------------------------------------------\n\nFS.prototype.PushInode = function(inode) {\n    if (inode.parentid != -1) {\n        this.inodes.push(inode);\n        inode.fid = this.inodes.length - 1;\n        var parent_node = this.inodes[inode.parentid];\n        parent_node.updatedir = true;\n        inode.nextid = parent_node.firstid;\n        parent_node.firstid = this.inodes.length-1;\n        return;\n    } else {\n        if (this.inodes.length == 0) { // if root directory\n            this.inodes.push(inode);\n            return;\n        }\n    }\n\n    message.Debug(\"Error in Filesystem: Pushed inode with name = \"+ inode.name + \" has no parent\");\n    message.Abort();\n\n}\n\n/** @constructor */\nfunction Inode(qidnumber)\n{\n    this.updatedir = false; // did the directory listing changed?\n    this.parentid = -1;\n    this.firstid = -1; // first file id in directory\n    this.nextid = -1; // next id in directory\n    this.status = 0;\n    this.name = \"\";\n    this.size = 0x0;\n    this.uid = 0x0;\n    this.gid = 0x0;\n    this.fid = 0;\n    this.ctime = 0;\n    this.atime = 0;\n    this.mtime = 0;\n    this.major = 0x0;\n    this.minor = 0x0;\n    //data = new Uint8Array(0);\n    this.symlink = \"\";\n    this.nlinks = 1;\n    this.mode = 0x01ED;\n    this.qid = {\n        type: 0,\n        version: 0,\n        path: qidnumber,\n    };\n    this.caps = undefined;\n\n    //this.qid_type = 0;\n    //this.qid_version = 0;\n    //this.qid_path = qidnumber;\n}\n\nFS.prototype.CreateInode = function() {\n    //console.log(\"CreateInode\", Error().stack);\n    return new Inode(++this.qidnumber);\n};\n\n\nFS.prototype.CreateDirectory = function(name, parentid) {\n    var x = this.CreateInode();\n    x.name = name;\n    x.parentid = parentid;\n    x.mode = 0x01FF | S_IFDIR;\n    x.updatedir = true;\n    x.nlinks = 2; // . and ..\n    if (parentid >= 0) {\n        x.uid = this.inodes[parentid].uid;\n        x.gid = this.inodes[parentid].gid;\n        x.mode = (this.inodes[parentid].mode & 0x1FF) | S_IFDIR;\n        this.inodes[parentid].nlinks++;\n    }\n    x.qid.type = S_IFDIR >> 8;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newdir');\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateFile = function(filename, parentid) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFREG >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6) | S_IFREG;\n    this.PushInode(x);\n    this.NotifyListeners(this.inodes.length-1, 'newfile');\n    return this.inodes.length-1;\n}\n\n\nFS.prototype.CreateNode = function(filename, parentid, major, minor) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.major = major;\n    x.minor = minor;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFSOCK >> 8;\n    x.mode = (this.inodes[parentid].mode & 0x1B6);\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n     \nFS.prototype.CreateSymlink = function(filename, parentid, symlink) {\n    var x = this.CreateInode();\n    x.name = filename;\n    x.parentid = parentid;\n    x.uid = this.inodes[parentid].uid;\n    x.gid = this.inodes[parentid].gid;\n    this.inodes[parentid].nlinks++;\n    x.qid.type = S_IFLNK >> 8;\n    x.symlink = symlink;\n    x.mode = S_IFLNK;\n    this.PushInode(x);\n    return this.inodes.length-1;\n}\n\nFS.prototype.CreateTextFile = function(filename, parentid, str) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(str.length);\n    x.size = str.length;\n    for (var j = 0; j < str.length; j++) {\n        data[j] = str.charCodeAt(j);\n    }\n    return id;\n}\n\n/** \n * @param {Uint8Array} buffer\n */\nFS.prototype.CreateBinaryFile = function(filename, parentid, buffer) {\n    var id = this.CreateFile(filename, parentid);\n    var x = this.inodes[id];\n    var data = this.inodedata[id] = new Uint8Array(buffer.length);\n    data.set(buffer);\n    x.size = buffer.length;\n    return id;\n}\n\n\nFS.prototype.OpenInode = function(id, mode) {\n    var inode = this.GetInode(id);\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n        this.FillDirectory(id);\n    }\n    /*\n    var type = \"\";\n    switch(inode.mode&S_IFMT) {\n        case S_IFREG: type = \"File\"; break;\n        case S_IFBLK: type = \"Block Device\"; break;\n        case S_IFDIR: type = \"Directory\"; break;\n        case S_IFCHR: type = \"Character Device\"; break;\n    }\n    */\n    //message.Debug(\"open:\" + this.GetFullPath(id) +  \" type: \" + inode.mode + \" status:\" + inode.status);\n    if (inode.status == STATUS_ON_SERVER) {\n        this.LoadFile(id);\n        return false;\n    }\n    return true;\n}\n\nFS.prototype.CloseInode = function(id) {\n    //message.Debug(\"close: \" + this.GetFullPath(id));\n    var inode = this.GetInode(id);\n    if (inode.status == STATUS_UNLINKED) {\n        //message.Debug(\"Filesystem: Delete unlinked file\");\n        inode.status = STATUS_INVALID;\n        delete this.inodedata[id];\n        inode.size = 0;\n    }\n}\n\nFS.prototype.Rename = function(olddirid, oldname, newdirid, newname) {\n    // message.Debug(\"Rename \" + oldname + \" to \" + newname);\n    if ((olddirid == newdirid) && (oldname == newname)) {\n        return true;\n    }\n    var oldid = this.Search(olddirid, oldname);\n    var oldpath = this.GetFullPath(oldid);\n    if (oldid == -1) {\n        return false;\n    }\n    var newid = this.Search(newdirid, newname);\n    if (newid != -1) {\n        this.Unlink(newid);\n    }\n\n    var idx = oldid; // idx contains the id which we want to rename\n    var inode = this.inodes[idx];\n\n    // remove inode ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n\n    inode.parentid = newdirid;\n    inode.name = newname;\n    inode.qid.version++;\n\n    inode.nextid = this.inodes[inode.parentid].firstid;\n    this.inodes[inode.parentid].firstid = idx;\n\n    this.inodes[olddirid].updatedir = true;\n    this.inodes[newdirid].updatedir = true;\n    this.inodes[olddirid].nlinks--;\n    this.inodes[newdirid].nlinks++;\n\n    this.NotifyListeners(idx, \"rename\", {oldpath: oldpath});\n    \n    return true;\n}\n\nFS.prototype.Write = function(id, offset, count, GetByte) {\n    this.NotifyListeners(id, 'write');\n    var inode = this.inodes[id];\n    var data = this.inodedata[id];\n\n    if (!data || data.length < (offset+count)) {\n        this.ChangeSize(id, Math.floor(((offset+count)*3)/2) );\n        inode.size = offset + count;\n        data = this.inodedata[id];\n    } else\n    if (inode.size < (offset+count)) {\n        inode.size = offset + count;\n    }\n    for(var i=0; i<count; i++)\n        data[offset+i] = GetByte();\n}\n\nFS.prototype.Search = function(parentid, name) {\n    var id = this.inodes[parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].parentid != parentid) { // consistency check\n            message.Debug(\"Error in Filesystem: Found inode with wrong parent id\");\n        }\n        if (this.inodes[id].name == name) return id;\n        id = this.inodes[id].nextid;\n    }\n    return -1;\n}\n\nFS.prototype.GetTotalSize = function() {\n    return this.used_size;\n    //var size = 0;\n    //for(var i=0; i<this.inodes.length; i++) {\n    //    var d = this.inodes[i].data;\n    //    size += d ? d.length : 0;\n    //}\n    //return size;\n}\n\nFS.prototype.GetSpace = function() {\n    return this.total_size;\n};\n\nFS.prototype.GetFullPath = function(idx) {\n    var path = \"\";\n\n    while(idx != 0) {\n        path = \"/\" + this.inodes[idx].name + path;\n        idx = this.inodes[idx].parentid;\n    }\n    return path.substring(1);\n}\n\n// no double linked list. So, we need this\nFS.prototype.FindPreviousID = function(idx) {\n    var inode = this.GetInode(idx);\n    var id = this.inodes[inode.parentid].firstid;\n    while(id != -1) {\n        if (this.inodes[id].nextid == idx) return id;\n        id = this.inodes[id].nextid;\n    }\n    return id;\n}\n\nFS.prototype.Unlink = function(idx) {\n    this.NotifyListeners(idx, 'delete');\n    if (idx == 0) return false; // root node cannot be deleted\n    var inode = this.GetInode(idx);\n    //message.Debug(\"Unlink \" + inode.name);\n\n    // check if directory is not empty\n    if ((inode.mode&S_IFMT) == S_IFDIR) {\n       if (inode.firstid != -1) return false;\n    }\n\n    // update ids\n    if (this.inodes[inode.parentid].firstid == idx) {\n        this.inodes[inode.parentid].firstid = inode.nextid;\n    } else {\n        var id = this.FindPreviousID(idx);\n        if (id == -1) {\n            message.Debug(\"Error in Filesystem: Cannot find previous id of inode\");\n            message.Abort();\n        }\n        this.inodes[id].nextid = inode.nextid;\n    }\n    // don't delete the content. The file is still accessible\n    this.inodes[inode.parentid].updatedir = true;\n    this.inodes[inode.parentid].nlinks--;\n    inode.status = STATUS_UNLINKED;\n    inode.nextid = -1;\n    inode.firstid = -1;\n    inode.parentid = -1;\n    inode.nlinks--;\n    return true;\n}\n\nFS.prototype.GetInode = function(idx)\n{\n    if (isNaN(idx)) {\n        message.Debug(\"Error in filesystem: id is not a number \");\n        return 0;\n    }\n\n    if ((idx < 0) || (idx > this.inodes.length)) {\n        message.Debug(\"Error in filesystem: Attempt to get inode with id \" + idx);\n        return 0;\n    }\n    return this.inodes[idx];\n}\n\nFS.prototype.ChangeSize = function(idx, newsize)\n{\n    var inode = this.GetInode(idx);\n    var temp = this.inodedata[idx];\n    //message.Debug(\"change size to: \" + newsize);\n    if (newsize == inode.size) return;\n    var data = this.inodedata[idx] = new Uint8Array(newsize);\n    inode.size = newsize;\n    if(!temp) return;\n    var size = Math.min(temp.length, inode.size);\n    for(var i=0; i<size; i++) {\n        data[i] = temp[i];\n    }\n}\n\nFS.prototype.SearchPath = function(path) {\n    //path = path.replace(/\\/\\//g, \"/\");\n    path = path.replace(\"//\", \"/\");\n    var walk = path.split(\"/\");\n    var n = walk.length;\n    if (walk[n-1].length == 0) walk.pop();\n    if (walk[0].length == 0) walk.shift();\n    n = walk.length;\n\n    var parentid = 0;\n    var id = -1;\n    for(var i=0; i<n; i++) {\n        id = this.Search(parentid, walk[i]);        \n        if (id == -1) {\n            if (i < n-1) return {id: -1, parentid: -1, name: walk[i]}; // one name of the path cannot be found\n            return {id: -1, parentid: parentid, name: walk[i]}; // the last element in the path does not exist, but the parent\n        }\n        parentid = id;\n    }\n    return {id: id, parentid: parentid, name: walk[i]};\n}\n// -----------------------------------------------------\n\nFS.prototype.GetRecursiveList = function(dirid, list) {\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        list.push(id);\n        if ((this.inodes[id].mode&S_IFMT) == S_IFDIR) {\n            this.GetRecursiveList(id, list);\n        }\n        id = this.inodes[id].nextid;\n    }\n}\n\nFS.prototype.MergeFile = function(file) {\n    message.Debug(\"Merge path:\" + file.name);\n    var ids = this.SearchPath(file.name);\n    if (ids.parentid == -1) return; // not even the path seems to exist\n    if (ids.id == -1) {\n        ids.id = this.CreateFile(ids.name, ids.parentid); \n    }\n    this.inodes[ids.id].data = file.data;\n    this.inodes[ids.id].size = file.data.length;\n    // Don't forget to update the timestamps !\n    this.inodes[ids.id].mtime = Math.floor((new Date()).getTime()/1000);\n    this.inodes[ids.id].atime = this.inodes[ids.id].mtime;\n    this.inodes[ids.id].ctime = this.inodes[ids.id].mtime;\n}\n\n\nFS.prototype.RecursiveDelete = function(path) {\n    var toDelete = []\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    this.GetRecursiveList(ids.id, toDelete);\n\n    for(var i=toDelete.length-1; i>=0; i--)\n        this.Unlink(toDelete[i]);\n\n}\n\nFS.prototype.DeleteNode = function(path) {\n    var ids = this.SearchPath(path);\n    if (ids.parentid == -1 || ids.id == -1) return;\n    \n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFREG){\n        this.Unlink(ids.id);\n        return;\n    }\n    if ((this.inodes[ids.id].mode&S_IFMT) == S_IFDIR){\n        var toDelete = []\n        this.GetRecursiveList(ids.id, toDelete);\n        for(var i=toDelete.length-1; i>=0; i--)\n            this.Unlink(toDelete[i]);\n        this.Unlink(ids.id);\n        return;\n    }\n}\n\n/** @param {*=} info */\nFS.prototype.NotifyListeners = function(id, action, info) {\n    //if(info==undefined)\n    //    info = {};\n\n    //var path = this.GetFullPath(id);\n    //if (this.watchFiles[path] == true && action=='write') {\n    //  message.Send(\"WatchFileEvent\", path);\n    //}\n    //for (var directory in this.watchDirectories) {\n    //    if (this.watchDirectories.hasOwnProperty(directory)) {\n    //        var indexOf = path.indexOf(directory)\n    //        if(indexOf == 0 || indexOf == 1)\n    //            message.Send(\"WatchDirectoryEvent\", {path: path, event: action, info: info});         \n    //    }\n    //}\n}\n\n\nFS.prototype.Check = function() {\n    for(var i=1; i<this.inodes.length; i++)\n    {\n        if (this.inodes[i].status == STATUS_INVALID) continue;\n        if (this.inodes[i].nextid == i) {\n            message.Debug(\"Error in filesystem: file points to itself\");\n            message.Abort();\n        }\n\n        var inode = this.GetInode(i);\n        if (inode.parentid < 0) {\n            message.Debug(\"Error in filesystem: negative parent id \" + i);\n        }\n        var n = inode.name.length;\n        if (n == 0) {\n            message.Debug(\"Error in filesystem: inode with no name and id \" + i);\n        }\n\n        for (var j in inode.name) {\n            var c = inode.name.charCodeAt(j);\n            if (c < 32) {\n                message.Debug(\"Error in filesystem: Unallowed char in filename\");\n            } \n        }\n    }\n}\n\nFS.prototype.FillDirectory = function(dirid) {\n    var inode = this.GetInode(dirid);\n    if (!inode.updatedir) return;\n    var parentid = inode.parentid;\n    if (parentid == -1) parentid = 0; // if root directory point to the root directory\n\n    // first get size\n    var size = 0;\n    var id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        size += 13 + 8 + 1 + 2 + UTF8.UTF8Length(this.inodes[id].name);\n        id = this.inodes[id].nextid;\n    }\n\n    size += 13 + 8 + 1 + 2 + 1; // \".\" entry\n    size += 13 + 8 + 1 + 2 + 2; // \"..\" entry\n    //message.Debug(\"size of dir entry: \" + size);\n    var data = this.inodedata[dirid] = new Uint8Array(size);\n    inode.size = size;\n\n    var offset = 0x0;\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[dirid].qid, \n        offset+13+8+1+2+1, \n        this.inodes[dirid].mode >> 12, \n        \".\"],\n        data, offset);\n\n    offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [this.inodes[parentid].qid,\n        offset+13+8+1+2+2, \n        this.inodes[parentid].mode >> 12, \n        \"..\"],\n        data, offset);\n\n    id = this.inodes[dirid].firstid;\n    while(id != -1) {\n        offset += marshall.Marshall(\n        [\"Q\", \"d\", \"b\", \"s\"],\n        [\n            this.inodes[id].qid,\n            offset+13+8+1+2+UTF8.UTF8Length(this.inodes[id].name),\n            this.inodes[id].mode >> 12,\n            this.inodes[id].name\n        ],\n        data, offset);\n        id = this.inodes[id].nextid;\n    }\n    inode.updatedir = false;\n}\n\n\n// -----------------------------------------------------\n\n// only support for security.capabilities\n// should return a  \"struct vfs_cap_data\" defined in\n// linux/capability for format\n// check also:\n//   sys/capability.h\n//   http://lxr.free-electrons.com/source/security/commoncap.c#L376\n//   http://man7.org/linux/man-pages/man7/capabilities.7.html\n//   http://man7.org/linux/man-pages/man8/getcap.8.html\n//   http://man7.org/linux/man-pages/man3/libcap.3.html\nFS.prototype.PrepareCAPs = function(id) {\n    var inode = this.GetInode(id);\n    if (inode.caps) return inode.caps.length;\n    inode.caps = new Uint8Array(12);\n    // format is little endian\n    // magic_etc (revision=0x01: 12 bytes)\n    inode.caps[0]  = 0x00;\n    inode.caps[1]  = 0x00;\n    inode.caps[2]  = 0x00;\n    inode.caps[3]  = 0x01;\n    // permitted (full capabilities)\n    inode.caps[4]  = 0xFF;\n    inode.caps[5]  = 0xFF;\n    inode.caps[6]  = 0xFF;\n    inode.caps[7]  = 0xFF;\n    // inheritable (full capabilities\n    inode.caps[8]  = 0xFF;\n    inode.caps[9]  = 0xFF;\n    inode.caps[10] = 0xFF;\n    inode.caps[11] = 0xFF;\n\n    return inode.caps.length;\n}\n\n","\"use strict\";\n\nif(typeof window !== \"undefined\" && !window.requestAnimationFrame)\n{\n    window.requestAnimationFrame =\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame;\n}\n\n\n/**\n * Adapter to use visual screen in browsers (in constrast to node)\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction ScreenAdapter(screen_container, bus)\n{\n    console.assert(screen_container, \"1st argument must be a DOM container\");\n\n    var\n        graphic_screen = screen_container.getElementsByTagName(\"canvas\")[0],\n        graphic_context = graphic_screen.getContext(\"2d\"),\n\n        text_screen = screen_container.getElementsByTagName(\"div\")[0],\n        cursor_element = document.createElement(\"div\");\n\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        /** @type {number} */\n        scale_x = 1,\n\n        /** @type {number} */\n        scale_y = 1,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        modified_pixel_min = 0,\n        modified_pixel_max = 0,\n\n        changed_rows,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    var screen = this;\n\n    // 0x12345 -> \"#012345\"\n    function number_as_color(n)\n    {\n        n = n.toString(16);\n\n        return \"#\" + Array(7 - n.length).join(\"0\") + n;\n    }\n\n\n    /**\n     * Charmaps that containt unicode sequences for the default dospage\n     * @const\n     */\n    var charmap_high = new Uint16Array([\n        0xC7, 0xFC, 0xE9, 0xE2, 0xE4, 0xE0, 0xE5, 0xE7,\n        0xEA, 0xEB, 0xE8, 0xEF, 0xEE, 0xEC, 0xC4, 0xC5,\n        0xC9, 0xE6, 0xC6, 0xF4, 0xF6, 0xF2, 0xFB, 0xF9,\n        0xFF, 0xD6, 0xDC, 0xA2, 0xA3, 0xA5, 0x20A7, 0x192,\n        0xE1, 0xED, 0xF3, 0xFA, 0xF1, 0xD1, 0xAA, 0xBA,\n        0xBF, 0x2310, 0xAC, 0xBD, 0xBC, 0xA1, 0xAB, 0xBB,\n        0x2591, 0x2592, 0x2593, 0x2502, 0x2524, 0x2561, 0x2562, 0x2556,\n        0x2555, 0x2563, 0x2551, 0x2557, 0x255D, 0x255C, 0x255B, 0x2510,\n        0x2514, 0x2534, 0x252C, 0x251C, 0x2500, 0x253C, 0x255E, 0x255F,\n        0x255A, 0x2554, 0x2569, 0x2566, 0x2560, 0x2550, 0x256C, 0x2567,\n        0x2568, 0x2564, 0x2565, 0x2559, 0x2558, 0x2552, 0x2553, 0x256B,\n        0x256A, 0x2518, 0x250C, 0x2588, 0x2584, 0x258C, 0x2590, 0x2580,\n        0x3B1, 0xDF, 0x393, 0x3C0, 0x3A3, 0x3C3, 0xB5, 0x3C4,\n        0x3A6, 0x398, 0x3A9, 0x3B4, 0x221E, 0x3C6, 0x3B5, 0x2229,\n        0x2261, 0xB1, 0x2265, 0x2264, 0x2320, 0x2321, 0xF7,\n        0x2248, 0xB0, 0x2219, 0xB7, 0x221A, 0x207F, 0xB2, 0x25A0, 0xA0\n    ]);\n\n    /** @const */\n    var charmap_low = new Uint16Array([\n        0x20,   0x263A, 0x263B, 0x2665, 0x2666, 0x2663, 0x2660, 0x2022,\n        0x25D8, 0x25CB, 0x25D9, 0x2642, 0x2640, 0x266A, 0x266B, 0x263C,\n        0x25BA, 0x25C4, 0x2195, 0x203C, 0xB6,   0xA7,   0x25AC, 0x21A8,\n        0x2191, 0x2193, 0x2192, 0x2190, 0x221F, 0x2194, 0x25B2, 0x25BC\n    ]);\n\n    var charmap = [],\n        chr;\n\n    for(var i = 0; i < 256; i++)\n    {\n        if(i > 127)\n        {\n            chr = charmap_high[i - 0x80];\n        }\n        else if(i < 32)\n        {\n            chr = charmap_low[i];\n        }\n        else\n        {\n            chr = i;\n        }\n\n        charmap[i] = String.fromCharCode(chr);\n    }\n\n    graphic_context[\"imageSmoothingEnabled\"] = false;\n\n    cursor_element.style.position = \"absolute\";\n    cursor_element.style.backgroundColor = \"#ccc\";\n    cursor_element.style.width = \"7px\";\n    cursor_element.style.display = \"inline-block\";\n\n    text_screen.style.display = \"block\";\n    graphic_screen.style.display = \"none\";\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        this.update_buffer(data);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-clear\", function()\n    {\n        this.clear_screen();\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1], data[2], data[3]);\n    }, this);\n\n\n    this.init = function()\n    {\n        // not necessary, because this gets initialized by the bios early,\n        // but nicer to look at\n        this.set_size_text(80, 25);\n\n        this.timer();\n    };\n\n    this.make_screenshot = function()\n    {\n        try {\n            window.open(graphic_screen.toDataURL());\n        }\n        catch(e) {}\n    };\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n\n            changed_rows[row] = 1;\n        }\n    };\n\n    this.timer = function()\n    {\n        requestAnimationFrame(is_graphical ? update_graphical : update_text);\n    };\n\n    var update_text = function()\n    {\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            if(changed_rows[i])\n            {\n                screen.text_update_row(i);\n                changed_rows[i] = 0;\n            }\n        }\n\n        this.timer();\n    }.bind(this);\n\n    var update_graphical = function()\n    {\n        this.bus.send(\"screen-fill-buffer\");\n        this.timer();\n    }.bind(this);\n\n    this.destroy = function()\n    {\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n\n        if(graphical)\n        {\n            text_screen.style.display = \"none\";\n            graphic_screen.style.display = \"block\";\n        }\n        else\n        {\n            text_screen.style.display = \"block\";\n            graphic_screen.style.display = \"none\";\n        }\n    };\n\n    this.clear_screen = function()\n    {\n        graphic_context.fillStyle = \"#000\";\n        graphic_context.fillRect(0, 0, graphic_screen.width, graphic_screen.height);\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        changed_rows = new Int8Array(rows);\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n\n        while(text_screen.childNodes.length > rows)\n        {\n            text_screen.removeChild(text_screen.firstChild);\n        }\n\n        while(text_screen.childNodes.length < rows)\n        {\n            text_screen.appendChild(document.createElement(\"div\"));\n        }\n\n        for(var i = 0; i < rows; i++)\n        {\n            this.text_update_row(i);\n        }\n\n        update_scale_text();\n    };\n\n    this.set_size_graphical = function(width, height, buffer_width, buffer_height)\n    {\n        if(DEBUG_SCREEN_LAYERS)\n        {\n            // Draw the entire buffer. Useful for debugging\n            // panning / page flipping / screen splitting code for both\n            // v86 developers and os developers\n            width = buffer_width;\n            height = buffer_height;\n        }\n\n        graphic_screen.style.display = \"block\";\n\n        graphic_screen.width = width;\n        graphic_screen.height = height;\n\n        //graphic_screen.style.width = width * scale_x + \"px\";\n        //graphic_screen.style.height = height * scale_y + \"px\";\n\n        // Make sure to call this here, because pixels are transparent otherwise\n        //screen.clear_screen();\n\n        graphic_image_data = graphic_context.createImageData(buffer_width, buffer_height);\n        graphic_buffer = new Uint8Array(graphic_image_data.data.buffer);\n        graphic_buffer32 = new Int32Array(graphic_image_data.data.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n        update_scale_graphic();\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n        scale_x = s_x;\n        scale_y = s_y;\n\n        update_scale_text();\n        update_scale_graphic();\n    };\n    this.set_scale(scale_x, scale_y);\n\n    function update_scale_text()\n    {\n        elem_set_scale(text_screen, scale_x, scale_y, true);\n    }\n\n    function update_scale_graphic()\n    {\n        elem_set_scale(graphic_screen, scale_x, scale_y, false);\n    }\n\n    function elem_set_scale(elem, scale_x, scale_y, use_scale)\n    {\n        elem.style.width = \"\";\n        elem.style.height = \"\";\n\n        if(use_scale)\n        {\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = \"\";\n        }\n\n        var rectangle = elem.getBoundingClientRect();\n\n        if(use_scale)\n        {\n            var scale_str = \"\";\n\n            scale_str += scale_x === 1 ? \"\" : \" scaleX(\" + scale_x + \")\";\n            scale_str += scale_y === 1 ? \"\" : \" scaleY(\" + scale_y + \")\";\n\n            elem.style.transform = elem.style.webkitTransform = elem.style.MozTransform = scale_str;\n        }\n        else\n        {\n            // unblur non-fractional scales\n            if(scale_x % 1 === 0 && scale_y % 1 === 0)\n            {\n                graphic_screen.style.imageRendering = \"-moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"moz-crisp-edges\";\n                graphic_screen.style.imageRendering = \"webkit-optimize-contrast\";\n                graphic_screen.style.imageRendering = \"o-crisp-edges\";\n                graphic_screen.style.imageRendering = \"pixelated\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"nearest-neighbor\";\n            }\n            else\n            {\n                graphic_screen.style.imageRendering = \"\";\n                graphic_screen.style[\"-ms-interpolation-mode\"] = \"\";\n            }\n\n            // undo fractional css-to-device pixel ratios\n            var device_pixel_ratio = window.devicePixelRatio || 1;\n            if(device_pixel_ratio % 1 !== 0)\n            {\n                scale_x /= device_pixel_ratio;\n                scale_y /= device_pixel_ratio;\n            }\n        }\n\n        if(scale_x !== 1)\n        {\n            elem.style.width = rectangle.width * scale_x + \"px\";\n        }\n        if(scale_y !== 1)\n        {\n            elem.style.height = rectangle.height * scale_y + \"px\";\n        }\n    }\n\n    this.update_cursor_scanline = function(start, end)\n    {\n        if(start & 0x20)\n        {\n            cursor_element.style.display = \"none\";\n        }\n        else\n        {\n            cursor_element.style.display = \"inline\";\n\n            cursor_element.style.height = Math.min(15, end - start) + \"px\";\n            cursor_element.style.marginTop = Math.min(15, start) + \"px\";\n        }\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            changed_rows[row] = 1;\n            changed_rows[cursor_row] = 1;\n\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.text_update_row = function(row)\n    {\n        var offset = 3 * row * text_mode_width,\n            row_element,\n            color_element,\n            fragment;\n\n        var bg_color,\n            fg_color,\n            text;\n\n        row_element = text_screen.childNodes[row];\n        fragment = document.createElement(\"div\");\n\n        for(var i = 0; i < text_mode_width; )\n        {\n            color_element = document.createElement(\"span\");\n\n            bg_color = text_mode_data[offset + 1];\n            fg_color = text_mode_data[offset + 2];\n\n            color_element.style.backgroundColor = number_as_color(bg_color);\n            color_element.style.color = number_as_color(fg_color);\n\n            text = \"\";\n\n            // put characters of the same color in one element\n            while(i < text_mode_width &&\n                text_mode_data[offset + 1] === bg_color &&\n                text_mode_data[offset + 2] === fg_color)\n            {\n                var ascii = text_mode_data[offset];\n\n                text += charmap[ascii];\n\n                i++;\n                offset += 3;\n\n                if(row === cursor_row)\n                {\n                    if(i === cursor_col)\n                    {\n                        // next row will be cursor\n                        // create new element\n                        break;\n                    }\n                    else if(i === cursor_col + 1)\n                    {\n                        // found the cursor\n                        fragment.appendChild(cursor_element);\n                        break;\n                    }\n                }\n            }\n\n            color_element.textContent = text;\n            fragment.appendChild(color_element);\n        }\n\n        row_element.parentNode.replaceChild(fragment, row_element);\n    };\n\n    this.update_buffer = function(layers)\n    {\n        if(DEBUG_SCREEN_LAYERS)\n        {\n            // Draw the entire buffer. Useful for debugging\n            // panning / page flipping / screen splitting code for both\n            // v86 developers and os developers\n            graphic_context.putImageData(\n                graphic_image_data,\n                0, 0\n            );\n\n            // For each visible layer that would've been drawn, draw a\n            // rectangle to visualise the layer instead.\n            graphic_context.strokeStyle = \"#0F0\";\n            graphic_context.lineWidth = 4;\n            layers.forEach((layer) =>\n            {\n                graphic_context.strokeRect(\n                    layer.buffer_x,\n                    layer.buffer_y,\n                    layer.buffer_width,\n                    layer.buffer_height\n                );\n            });\n            graphic_context.lineWidth = 1;\n            return;\n        }\n\n        layers.forEach((layer) =>\n        {\n            graphic_context.putImageData(\n                graphic_image_data,\n                layer.screen_x - layer.buffer_x,\n                layer.screen_y - layer.buffer_y,\n                layer.buffer_x,\n                layer.buffer_y,\n                layer.buffer_width,\n                layer.buffer_height\n            );\n        });\n    };\n\n    this.init();\n}\n\n\n","\"use strict\";\n\n(function()\n{\n    /** @const */\n    var ON_LOCALHOST = !location.hostname.endsWith(\"copy.sh\");\n\n    /** @const */\n    var HOST = ON_LOCALHOST ? \"\" : \"//i.copy.sh/\";\n\n    /** @const */\n    var OTHER_HOST = ON_LOCALHOST ? \"\" : \"//j.copy.sh:8880/\";\n\n    /** @const */\n    var ON_HTTPS = location.protocol === \"https:\";\n\n    /**\n     * @return {Object.<string, string>}\n     */\n    function get_query_arguments()\n    {\n        var query = location.search.substr(1).split(\"&\");\n        var parameters = {};\n\n        for(var i = 0; i < query.length; i++)\n        {\n            var param = query[i].split(\"=\");\n            parameters[param[0]] = decodeURIComponent(param[1]);\n        }\n\n        return parameters;\n    }\n\n    function set_title(text)\n    {\n        document.title = text + \" - Virtual x86\" +  (DEBUG ? \" - debug\" : \"\");\n    }\n\n    function format_timestamp(time)\n    {\n        if(time < 60)\n        {\n            return time + \"s\";\n        }\n        else if(time < 3600)\n        {\n            return (time / 60 | 0) + \"m \" + v86util.pad0(time % 60, 2) + \"s\";\n        }\n        else\n        {\n            return (time / 3600 | 0) + \"h \" +\n                v86util.pad0((time / 60 | 0) % 60, 2) + \"m \" +\n                v86util.pad0(time % 60, 2) + \"s\";\n        }\n    }\n\n    function chr_repeat(chr, count)\n    {\n        var result = \"\";\n\n        while(count-- > 0)\n        {\n            result += chr;\n        }\n\n        return result;\n    }\n\n    var progress_ticks = 0;\n\n    function show_progress(e)\n    {\n        var el = $(\"loading\");\n        el.style.display = \"block\";\n\n        if(e.file_index === e.file_count - 1 && e.loaded >= e.total - 2048)\n        {\n            // last file is (almost) loaded\n            el.textContent = \"Done downloading. Starting now ...\";\n            return;\n        }\n\n        var line = \"Downloading images \";\n\n        if(typeof e.file_index === \"number\" && e.file_count)\n        {\n            line += \"[\" + (e.file_index + 1) + \"/\" + e.file_count + \"] \";\n        }\n\n        if(e.total && typeof e.loaded === \"number\")\n        {\n            var per100 = Math.floor(e.loaded / e.total * 100);\n            per100 = Math.min(100, Math.max(0, per100));\n\n            var per50 = Math.floor(per100 / 2);\n\n            line += per100 + \"% [\";\n            line += chr_repeat(\"#\", per50);\n            line += chr_repeat(\" \", 50 - per50) + \"]\";\n        }\n        else\n        {\n            line += chr_repeat(\".\", progress_ticks++ % 50);\n        }\n\n        el.textContent = line;\n    }\n\n    function $(id)\n    {\n        var el = document.getElementById(id);\n\n        if(!el)\n        {\n            dbg_log(\"Element with id `\" + id + \"` not found\");\n        }\n\n        return el;\n    }\n\n    function onload()\n    {\n        if(!(\"responseType\" in new XMLHttpRequest))\n        {\n            alert(\"Your browser is not supported \" +\n                  \"because it doesn't have XMLHttpRequest.responseType\");\n            return;\n        }\n\n        var settings = {};\n\n        $(\"start_emulation\").onclick = function()\n        {\n            $(\"boot_options\").style.display = \"none\";\n            set_profile(\"custom\");\n\n            var images = [];\n            var last_file;\n\n            var floppy_file = $(\"floppy_image\").files[0];\n            if(floppy_file)\n            {\n                last_file = floppy_file;\n                settings.fda = { buffer: floppy_file };\n            }\n\n            var cd_file = $(\"cd_image\").files[0];\n            if(cd_file)\n            {\n                last_file = cd_file;\n                settings.cdrom = { buffer: cd_file };\n            }\n\n            var hd_file = $(\"hd_image\").files[0];\n            if(hd_file)\n            {\n                last_file = hd_file;\n                settings.hda = { buffer: hd_file };\n            }\n\n            if($(\"multiboot_image\"))\n            {\n                var multiboot_file = $(\"multiboot_image\").files[0];\n                if(multiboot_file)\n                {\n                    last_file = multiboot_file;\n                    settings.multiboot = { buffer: multiboot_file };\n                }\n            }\n\n            if(last_file)\n            {\n                set_title(last_file.name);\n            }\n\n            start_emulation(settings);\n        };\n\n        if(DEBUG)\n        {\n            debug_onload(settings);\n        }\n\n        var oses = [\n            {\n                id: \"archlinux\",\n                state: {\n                    \"url\": HOST + \"images/v86state.bin\",\n                    \"size\": 142770436,\n                },\n                name: \"Arch Linux\",\n                memory_size: 128 * 1024 * 1024,\n                vga_memory_size: 8 * 1024 * 1024,\n\n                // required for restoring state, should not be used when booted on 9p\n                hda: {\n                    \"url\": HOST + \"images/arch3.img\",\n                    \"size\": 16 * 1024 * 1024 * 1024,\n                    \"async\": true,\n                },\n\n                filesystem: {\n                    \"basefs\": {\n                        \"url\": HOST + \"images/fs.json\",\n                        \"size\": 10232633,\n                    },\n                    \"baseurl\": HOST + \"arch/\",\n                },\n            },\n            {\n                id: \"msdos\",\n                hda: {\n                    \"url\": HOST + \"images/msdos.img\",\n                    \"size\": 8 * 1024 * 1024,\n                },\n                boot_order: 0x132,\n                name: \"MS-DOS\",\n            },\n            {\n                id: \"freedos\",\n                fda: {\n                    \"url\": HOST + \"images/freedos722.img\",\n                    \"size\": 737280,\n                },\n                name: \"FreeDOS\",\n            },\n            {\n                id: \"oberon\",\n                fda: {\n                    \"url\": HOST + \"images/oberon-boot.dsk\",\n                    \"size\": 1440 * 1024,\n                },\n                hda: {\n                    \"url\": HOST + \"images/oberon.dsk\",\n                    \"size\": 41943040,\n                },\n                name: \"Oberon\",\n            },\n            {\n                id: \"windows1\",\n                fda: {\n                    \"url\": HOST + \"images/windows101.img\",\n                    \"size\": 1474560,\n                },\n                name: \"Windows\",\n            },\n            {\n                id: \"linux26\",\n                cdrom: {\n                    \"url\": HOST + \"images/linux.iso\",\n                    \"size\": 5666816,\n                },\n                name: \"Linux\",\n            },\n            {\n                id: \"linux3\",\n                cdrom: {\n                    \"url\": HOST + \"images/linux3.iso\",\n                    \"size\": 8624128,\n                },\n                name: \"Linux\",\n                filesystem: {},\n            },\n            {\n                id: \"kolibrios\",\n                fda: {\n                    \"url\": (ON_LOCALHOST || ON_HTTPS) ?\n                            \"images/kolibri.img\" :\n                            \"//builds.kolibrios.org/eng/data/data/kolibri.img\",\n                    \"size\": 1474560,\n                },\n                name: \"KolibriOS\",\n            },\n            {\n                id: \"kolibrios-fallback\",\n                fda: {\n                    \"url\": HOST + \"images/kolibri.img\",\n                    \"size\": 1474560,\n                },\n                name: \"KolibriOS\",\n            },\n            {\n                id: \"openbsd\",\n                fda: {\n                    \"url\": HOST + \"images/openbsd.img\",\n                    \"size\": 1474560,\n                },\n                name: \"OpenBSD\",\n            },\n            {\n                id: \"solos\",\n                fda: {\n                    \"url\": HOST + \"images/os8.dsk\",\n                    \"size\": 1474560,\n                },\n                name: \"Sol OS\",\n            },\n            {\n                id: \"dexos\",\n                cdrom: {\n                    \"url\": HOST + \"images/DexOSv6.iso\",\n                    \"size\": 1837056,\n                },\n                name: \"DexOS\",\n            },\n            {\n                id: \"bootchess\",\n                fda: {\n                    \"url\": HOST + \"images/bootchess.img\",\n                },\n                name: \"Bootchess\",\n            },\n            {\n                id: \"windows98\",\n                memory_size: 64 * 1024 * 1024,\n                hda: {\n                    \"url\": HOST + \"images/windows98.img\",\n                    \"async\": true,\n                    \"size\": 300 * 1024 * 1024,\n                },\n                name: \"Windows 98\",\n                state: {\n                    \"url\": HOST + \"images/windows98_state.bin\",\n                    \"size\": 75705744,\n                },\n            },\n            {\n                id: \"windows95\",\n                memory_size: 32 * 1024 * 1024,\n                hda: {\n                    \"url\": HOST + \"images/W95.IMG\",\n                    \"size\": 242049024,\n                    \"async\": true,\n                },\n                name: \"Windows 95\",\n                state: {\n                    \"url\": HOST + \"images/windows95_state.bin\",\n                    \"size\": 42151316,\n                },\n            },\n            {\n                id: \"freebsd\",\n                memory_size: 128 * 1024 * 1024,\n                state: {\n                    \"url\": HOST + \"images/freebsd_state.bin\",\n                    \"size\": 142815292,\n                },\n                hda: {\n                    \"url\": ON_LOCALHOST ? \"../v86-images/os/freebsd3.img\" :\n                                          OTHER_HOST + \"images/freebsd3.img\",\n                    \"size\": 17179869184,\n                    \"async\": true,\n                },\n                name: \"FreeBSD\",\n            },\n            {\n                id: \"reactos\",\n                memory_size: 256 * 1024 * 1024,\n                cdrom: {\n                    \"url\": HOST + \"images/ReactOS-0.4.9-RC-Live.iso\",\n                    \"async\": true,\n                },\n                state: {\n                    \"url\": HOST + \"images/reactos_state.bin\",\n                    \"size\": 276971224,\n                },\n                name: \"ReactOS\",\n                description: 'Running <a href=\"https://reactos.org/\">ReactOS</a>',\n            },\n        ];\n\n        if(DEBUG)\n        {\n            // see tests/kvm-unit-tests/x86/\n            var tests = [\n                \"realmode\",\n                // All tests below require an APIC\n                \"cmpxchg8b\",\n                \"port80\",\n                \"setjmp\",\n                \"sieve\",\n                \"hypercall\", // crashes\n                \"init\", // stops execution\n                \"msr\", // TODO: Expects 64 bit msrs\n                \"smap\", // test stops, SMAP not enabled\n                \"tsc_adjust\", // TODO: IA32_TSC_ADJUST\n                \"tsc\", // TODO: rdtscp\n                \"rmap_chain\", // crashes\n                \"memory\", // missing mfence (uninteresting)\n                \"taskswitch\", // TODO: Jump\n                \"taskswitch2\", // TODO: Call TSS\n                \"eventinj\", // Missing #nt\n                \"ioapic\",\n                \"apic\",\n            ];\n\n            for(let test of tests)\n            {\n                oses.push({\n                    name: \"Test case: \" + test,\n                    id: \"test-\" + test,\n                    memory_size: 128 * 1024 * 1024,\n                    multiboot: { \"url\": \"tests/kvm-unit-tests/x86/\" + test + \".flat\", }\n                });\n            }\n        }\n\n        var query_args = get_query_arguments();\n        var profile = query_args[\"profile\"];\n\n        if(query_args[\"use_bochs_bios\"])\n        {\n            settings.use_bochs_bios = true;\n        }\n\n        for(var i = 0; i < oses.length; i++)\n        {\n            var infos = oses[i];\n\n            if(profile === infos.id)\n            {\n                start_profile(infos);\n                return;\n            }\n\n            var element = $(\"start_\" + infos.id);\n\n            if(element)\n            {\n                element.onclick = function(infos, element)\n                {\n                    set_profile(infos.id);\n                    element.blur();\n\n                    start_profile(infos);\n                }.bind(this, infos, element);\n            }\n        }\n\n        if(profile === \"custom\")\n        {\n            if(query_args[\"hda.url\"])\n            {\n                settings.hda = {\n                    \"size\": parseInt(query_args[\"hda.size\"], 10) || undefined,\n                    \"url\": query_args[\"hda.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(query_args[\"cdrom.url\"])\n            {\n                settings.cdrom = {\n                    \"size\": parseInt(query_args[\"cdrom.size\"], 10) || undefined,\n                    \"url\": query_args[\"cdrom.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(query_args[\"fda.url\"])\n            {\n                settings.fda = {\n                    \"size\": parseInt(query_args[\"fda.size\"], 10) || undefined,\n                    \"url\": query_args[\"fda.url\"],\n                    \"async\": true,\n                };\n            }\n\n            if(settings.fda || settings.cdrom || settings.hda)\n            {\n                $(\"boot_options\").style.display = \"none\";\n\n                start_emulation(settings, done);\n            }\n        }\n\n        function start_profile(infos)\n        {\n            $(\"boot_options\").style.display = \"none\";\n            set_title(infos.name);\n\n            settings.filesystem = infos.filesystem;\n\n            if(infos.state)\n            {\n                $(\"reset\").style.display = \"none\";\n                settings.initial_state = infos.state;\n            }\n\n            settings.fda = infos.fda;\n            settings.cdrom = infos.cdrom;\n            settings.hda = infos.hda;\n            settings.multiboot = infos.multiboot;\n\n            settings.memory_size = infos.memory_size;\n            settings.vga_memory_size = infos.vga_memory_size;\n\n            settings.id = infos.id;\n\n            if(infos.boot_order !== undefined)\n            {\n                settings.boot_order = infos.boot_order;\n            }\n\n            if(!DEBUG && infos.description)\n            {\n                $(\"description\").style.display = \"block\";\n                $(\"description\").innerHTML = \"<br>\" + infos.description;\n            }\n\n            start_emulation(settings, done);\n        }\n\n        function done(emulator)\n        {\n            if(query_args[\"c\"])\n            {\n                setTimeout(function()\n                {\n                    //emulator.serial0_send(query_args[\"c\"] + \"\\n\");\n                    emulator.keyboard_send_text(query_args[\"c\"] + \"\\n\");\n                }, 25);\n            }\n        }\n    }\n\n    function debug_onload(settings)\n    {\n        // called on window.onload, in debug mode\n\n        //settings.filesystem = {\n        //    baseurl: \"http://localhost/v86-images/arch/\",\n        //    basefs: \"http://localhost/v86-images/fs.json\",\n        //};\n\n        //$(\"restore_state\").onchange = function()\n        //{\n        //};\n\n        //$(\"start_test\").onclick = function()\n        //{\n        //};\n\n        var log_levels = $(\"log_levels\");\n\n        for(var i = 0; i < LOG_NAMES.length; i++)\n        {\n            var mask = LOG_NAMES[i][0];\n\n            if(mask === 1)\n                continue;\n\n            var name = LOG_NAMES[i][1].toLowerCase(),\n                input = document.createElement(\"input\"),\n                label = document.createElement(\"label\");\n\n            input.type = \"checkbox\";\n\n            label.htmlFor = input.id = \"log_\" + name;\n\n            if(LOG_LEVEL & mask)\n            {\n                input.checked = true;\n            }\n            input.mask = mask;\n\n            label.appendChild(input);\n            label.appendChild(document.createTextNode(v86util.pads(name, 4) + \" \"));\n            log_levels.appendChild(label);\n\n            if(i === Math.floor(LOG_NAMES.length / 2))\n            {\n                log_levels.appendChild(document.createTextNode(\"\\n\"));\n            }\n        }\n\n        log_levels.onchange = function(e)\n        {\n            var target = e.target,\n                mask = target.mask;\n\n            if(target.checked)\n            {\n                LOG_LEVEL |= mask;\n            }\n            else\n            {\n                LOG_LEVEL &= ~mask;\n            }\n\n            target.blur();\n        };\n\n        var debug_infos = $(\"debug_infos\");\n        debug_infos.textContent = \"ACPI: \" + (ENABLE_ACPI ? \"enabled\" : \"disabled\");\n    }\n\n    window.addEventListener(\"load\", onload, false);\n\n    // old webkit fires popstate on every load, fuck webkit\n    // https://code.google.com/p/chromium/issues/detail?id=63040\n    window.addEventListener(\"load\", function()\n    {\n        setTimeout(function()\n        {\n            window.addEventListener(\"popstate\", onpopstate);\n        }, 0);\n    });\n\n    // works in firefox and chromium\n    if(document.readyState === \"complete\")\n    {\n        onload();\n    }\n\n    /** @param {?=} done */\n    function start_emulation(settings, done)\n    {\n        /** @const */\n        var MB = 1024 * 1024;\n\n        var memory_size = settings.memory_size;\n\n        if(!memory_size)\n        {\n            memory_size = parseInt($(\"memory_size\").value, 10) * MB;\n\n            if(!memory_size)\n            {\n                alert(\"Invalid memory size - reset to 128MB\");\n                memory_size = 128 * MB;\n            }\n        }\n\n        var vga_memory_size = settings.vga_memory_size;\n\n        if(!vga_memory_size)\n        {\n            vga_memory_size = parseInt($(\"video_memory_size\").value, 10) * MB;\n\n            if(!vga_memory_size)\n            {\n                alert(\"Invalid video memory size - reset to 8MB\");\n                vga_memory_size = 8 * MB;\n            }\n        }\n\n        if(!settings.fda)\n        {\n            var floppy_file = $(\"floppy_image\").files[0];\n            if(floppy_file)\n            {\n                settings.fda = { buffer: floppy_file };\n            }\n        }\n\n        /** @const */\n        var BIOSPATH = \"bios/\";\n\n        if(settings.use_bochs_bios)\n        {\n            var biosfile = \"bochs-bios.bin\";\n            var vgabiosfile = \"bochs-vgabios.bin\";\n        }\n        else\n        {\n            var biosfile = DEBUG ? \"seabios-debug.bin\" : \"seabios.bin\";\n            var vgabiosfile = DEBUG ? \"vgabios-debug.bin\" : \"vgabios.bin\";\n            //var biosfile = DEBUG ? \"seabios-ultradebug.bin\" : \"seabios.bin\";\n            //var vgabiosfile = DEBUG ? \"vgabios-ultradebug.bin\" : \"vgabios.bin\";\n        }\n\n        //var biosfile = \"seabios-qemu.bin\";\n        //var vgabiosfile = \"vgabios-qemu.bin\";\n\n        var bios;\n        var vga_bios;\n\n        // a bios is only needed if the machine is booted\n        if(!settings.initial_state)\n        {\n            bios = {\n                \"url\": BIOSPATH + biosfile,\n            };\n            vga_bios = {\n                \"url\": BIOSPATH + vgabiosfile,\n            };\n        }\n\n        var emulator = new V86Starter({\n            \"memory_size\": memory_size,\n            \"vga_memory_size\": vga_memory_size,\n\n            \"screen_container\": $(\"screen_container\"),\n            \"serial_container\": $(\"serial\"),\n\n            \"boot_order\": settings.boot_order || parseInt($(\"boot_order\").value, 16) || 0,\n\n            \"network_relay_url\": \"wss://relay.widgetry.org/\",\n            //\"network_relay_url\": \"ws://localhost:8001/\",\n\n            \"bios\": bios,\n            \"vga_bios\": vga_bios,\n\n            \"fda\": settings.fda,\n            \"hda\": settings.hda,\n            \"cdrom\": settings.cdrom,\n\n            \"multiboot\": settings.multiboot,\n\n            \"initial_state\": settings.initial_state,\n            \"filesystem\": settings.filesystem || {},\n\n            \"autostart\": true,\n        });\n\n        if(DEBUG) window[\"emulator\"] = emulator;\n\n        emulator.add_listener(\"emulator-ready\", function()\n        {\n            if(DEBUG)\n            {\n                debug_start(emulator);\n            }\n\n            init_ui(settings, emulator);\n\n            done && done(emulator);\n        });\n\n        emulator.add_listener(\"download-progress\", function(e)\n        {\n            show_progress(e);\n        });\n\n        emulator.add_listener(\"download-error\", function(e)\n        {\n            var el = $(\"loading\");\n            el.style.display = \"block\";\n            el.textContent = \"Loading \" + e.file_name + \" failed. Check your connection \" +\n                             \"and reload the page to try again.\";\n        });\n    }\n\n    /**\n     * @param {Object} settings\n     * @param {V86Starter} emulator\n     */\n    function init_ui(settings, emulator)\n    {\n        $(\"boot_options\").style.display = \"none\";\n        $(\"loading\").style.display = \"none\";\n        $(\"runtime_options\").style.display = \"block\";\n        $(\"runtime_infos\").style.display = \"block\";\n        $(\"screen_container\").style.display = \"block\";\n\n        if(settings.filesystem)\n        {\n            init_filesystem_panel(emulator);\n        }\n\n        $(\"run\").onclick = function()\n        {\n            if(emulator.is_running())\n            {\n                $(\"run\").value = \"Run\";\n                emulator.stop();\n            }\n            else\n            {\n                $(\"run\").value = \"Pause\";\n                emulator.run();\n            }\n\n            $(\"run\").blur();\n        };\n\n        $(\"exit\").onclick = function()\n        {\n            emulator.stop();\n            location.href = location.pathname;\n        };\n\n        $(\"lock_mouse\").onclick = function()\n        {\n            if(!mouse_is_enabled)\n            {\n                $(\"toggle_mouse\").onclick();\n            }\n\n            emulator.lock_mouse();\n            $(\"lock_mouse\").blur();\n        };\n\n        var mouse_is_enabled = true;\n\n        $(\"toggle_mouse\").onclick = function()\n        {\n            mouse_is_enabled = !mouse_is_enabled;\n\n            emulator.mouse_set_status(mouse_is_enabled);\n            $(\"toggle_mouse\").value = (mouse_is_enabled ? \"Dis\" : \"En\") + \"able mouse\";\n            $(\"toggle_mouse\").blur();\n        };\n\n\n        var last_tick = 0;\n        var running_time = 0;\n        var last_instr_counter = 0;\n        var interval;\n        var os_uses_mouse = false;\n\n        function update_info()\n        {\n            var now = Date.now();\n\n            var instruction_counter = emulator.get_instruction_counter();\n            var last_ips = instruction_counter - last_instr_counter;\n\n            last_instr_counter = instruction_counter;\n\n            var delta_time = now - last_tick;\n            running_time += delta_time;\n            last_tick = now;\n\n            $(\"speed\").textContent = last_ips / delta_time | 0;\n            $(\"avg_speed\").textContent = instruction_counter / running_time | 0;\n            $(\"running_time\").textContent = format_timestamp(running_time / 1000 | 0);\n        }\n\n        emulator.add_listener(\"emulator-started\", function()\n        {\n            last_tick = Date.now();\n            interval = setInterval(update_info, 1000);\n        });\n\n        emulator.add_listener(\"emulator-stopped\", function()\n        {\n            update_info();\n            clearInterval(interval);\n        });\n\n        var stats_9p = {\n            read: 0,\n            write: 0,\n        };\n\n        emulator.add_listener(\"9p-read-start\", function()\n        {\n            $(\"info_filesystem\").style.display = \"block\";\n            $(\"info_filesystem_status\").textContent = \"Loading ...\";\n        });\n        emulator.add_listener(\"9p-read-end\", function(args)\n        {\n            stats_9p.read += args[1];\n\n            $(\"info_filesystem_status\").textContent = \"Idle\";\n            $(\"info_filesystem_last_file\").textContent = args[0];\n            $(\"info_filesystem_bytes_read\").textContent = stats_9p.read;\n        });\n        emulator.add_listener(\"9p-write-end\", function(args)\n        {\n            stats_9p.write += args[1];\n\n            $(\"info_filesystem_last_file\").textContent = args[0];\n            $(\"info_filesystem_bytes_written\").textContent = stats_9p.write;\n        });\n\n        var stats_storage = {\n            read: 0,\n            read_sectors: 0,\n            write: 0,\n            write_sectors: 0,\n        };\n\n        emulator.add_listener(\"ide-read-start\", function()\n        {\n            $(\"info_storage\").style.display = \"block\";\n            $(\"info_storage_status\").textContent = \"Loading ...\";\n        });\n        emulator.add_listener(\"ide-read-end\", function(args)\n        {\n            stats_storage.read += args[1];\n            stats_storage.read_sectors += args[2];\n\n            $(\"info_storage_status\").textContent = \"Idle\";\n            $(\"info_storage_bytes_read\").textContent = stats_storage.read;\n            $(\"info_storage_sectors_read\").textContent = stats_storage.read_sectors;\n        });\n        emulator.add_listener(\"ide-write-end\", function(args)\n        {\n            stats_storage.write += args[1];\n            stats_storage.write_sectors += args[2];\n\n            $(\"info_storage_bytes_written\").textContent = stats_storage.write;\n            $(\"info_storage_sectors_written\").textContent = stats_storage.write_sectors;\n        });\n\n        var stats_net = {\n            bytes_transmitted: 0,\n            bytes_received: 0,\n        };\n\n        emulator.add_listener(\"eth-receive-end\", function(args)\n        {\n            stats_net.bytes_received += args[0];\n\n            $(\"info_network\").style.display = \"block\";\n            $(\"info_network_bytes_received\").textContent = stats_net.bytes_received;\n        });\n        emulator.add_listener(\"eth-transmit-end\", function(args)\n        {\n            stats_net.bytes_transmitted += args[0];\n\n            $(\"info_network\").style.display = \"block\";\n            $(\"info_network_bytes_transmitted\").textContent = stats_net.bytes_transmitted;\n        });\n\n\n        emulator.add_listener(\"mouse-enable\", function(is_enabled)\n        {\n            os_uses_mouse = is_enabled;\n            $(\"info_mouse_enabled\").textContent = is_enabled ? \"Yes\" : \"No\";\n        });\n\n        emulator.add_listener(\"screen-set-mode\", function(is_graphical)\n        {\n            if(is_graphical)\n            {\n                $(\"info_vga_mode\").textContent = \"Graphical\";\n            }\n            else\n            {\n                $(\"info_vga_mode\").textContent = \"Text\";\n                $(\"info_res\").textContent = \"-\";\n                $(\"info_bpp\").textContent = \"-\";\n            }\n        });\n        emulator.add_listener(\"screen-set-size-graphical\", function(args)\n        {\n            $(\"info_res\").textContent = args[0] + \"x\" + args[1];\n            $(\"info_bpp\").textContent = args[4];\n        });\n\n\n        $(\"reset\").onclick = function()\n        {\n            emulator.restart();\n            $(\"reset\").blur();\n        };\n\n        add_image_download_button(settings.hda, \"hda\");\n        add_image_download_button(settings.hdb, \"hdb\");\n        add_image_download_button(settings.fda, \"fda\");\n        add_image_download_button(settings.fdb, \"fdb\");\n        add_image_download_button(settings.cdrom, \"cdrom\");\n\n        function add_image_download_button(obj, type)\n        {\n            var elem = $(\"get_\" + type + \"_image\");\n\n            if(!obj || obj.size > 100 * 1024 * 1024)\n            {\n                elem.style.display = \"none\";\n                return;\n            }\n\n            elem.onclick = function(e)\n            {\n                let buffer = emulator.disk_images[type];\n                let filename = settings.id + (type === \"cdrom\" ? \".iso\" : \".img\");\n\n                if(buffer.get_as_file)\n                {\n                    var file = buffer.get_as_file(filename);\n                    download(file, filename);\n                }\n                else\n                {\n                    buffer.get_buffer(function(b)\n                    {\n                        if(b)\n                        {\n                            dump_file(b, filename);\n                        }\n                        else\n                        {\n                            alert(\"The file could not be loaded. Maybe it's too big?\");\n                        }\n                    });\n                }\n\n                elem.blur();\n            };\n        }\n\n        $(\"memory_dump\").onclick = function()\n        {\n            dump_file(emulator.v86.cpu.mem8, \"v86memory.bin\");\n            $(\"memory_dump\").blur();\n        };\n\n        //$(\"memory_dump_dmp\").onclick = function()\n        //{\n        //    var memory = emulator.v86.cpu.mem8;\n        //    var memory_size = memory.length;\n        //    var page_size = 4096;\n        //    var header = new Uint8Array(4096);\n        //    var header32 = new Int32Array(header.buffer);\n\n        //    header32[0] = 0x45474150; // 'PAGE'\n        //    header32[1] = 0x504D5544; // 'DUMP'\n\n        //    header32[0x10 >> 2] = emulator.v86.cpu.cr[3]; // DirectoryTableBase\n        //    header32[0x24 >> 2] = 1; // NumberProcessors\n        //    header32[0xf88 >> 2] = 1; // DumpType: full dump\n        //    header32[0xfa0 >> 2] = header.length + memory_size; // RequiredDumpSpace\n\n        //    header32[0x064 + 0 >> 2] = 1; // NumberOfRuns\n        //    header32[0x064 + 4 >> 2] = memory_size / page_size; // NumberOfPages\n        //    header32[0x064 + 8 >> 2] = 0; // BasePage\n        //    header32[0x064 + 12 >> 2] = memory_size / page_size; // PageCount\n\n        //    dump_file([header, memory], \"v86memory.dmp\");\n\n        //    $(\"memory_dump_dmp\").blur();\n        //};\n\n        $(\"save_state\").onclick = function()\n        {\n            emulator.save_state(function(error, result)\n            {\n                if(error)\n                {\n                    console.log(error.stack);\n                    console.log(\"Couldn't save state: \", error);\n                }\n                else\n                {\n                    dump_file(result, \"v86state.bin\");\n                }\n            });\n\n            $(\"save_state\").blur();\n        };\n\n        $(\"load_state\").onclick = function()\n        {\n            $(\"load_state_input\").click();\n            $(\"load_state\").blur();\n        };\n\n        $(\"load_state_input\").onchange = function()\n        {\n            var file = this.files[0];\n\n            if(!file)\n            {\n                return;\n            }\n\n            var was_running = emulator.is_running();\n\n            if(was_running)\n            {\n                emulator.stop();\n            }\n\n            var filereader = new FileReader();\n            filereader.onload = function(e)\n            {\n                try\n                {\n                    emulator.restore_state(e.target.result);\n                }\n                catch(err)\n                {\n                    alert(\"Something bad happened while restoring the state:\\n\" + err + \"\\n\\n\" +\n                          \"Note that the current configuration must be the same as the original\");\n                    throw err;\n                }\n\n                if(was_running)\n                {\n                    emulator.run();\n                }\n            };\n            filereader.readAsArrayBuffer(file);\n\n            this.value = \"\";\n        };\n\n        $(\"ctrlaltdel\").onclick = function()\n        {\n            emulator.keyboard_send_scancodes([\n                0x1D, // ctrl\n                0x38, // alt\n                0x53, // delete\n\n                // break codes\n                0x1D | 0x80,\n                0x38 | 0x80,\n                0x53 | 0x80,\n            ]);\n\n            $(\"ctrlaltdel\").blur();\n        };\n\n        $(\"alttab\").onclick = function()\n        {\n            emulator.keyboard_send_scancodes([\n                0x38, // alt\n                0x0F, // tab\n            ]);\n\n            setTimeout(function()\n            {\n                emulator.keyboard_send_scancodes([\n                    0x38 | 0x80,\n                    0x0F | 0x80,\n                ]);\n            }, 100);\n\n            $(\"alttab\").blur();\n        };\n\n        $(\"scale\").onchange = function()\n        {\n            var n = parseFloat(this.value);\n\n            if(n || n > 0)\n            {\n                emulator.screen_set_scale(n, n);\n            }\n        };\n\n        $(\"fullscreen\").onclick = function()\n        {\n            emulator.screen_go_fullscreen();\n        };\n\n        $(\"screen_container\").onclick = function()\n        {\n            if(mouse_is_enabled && os_uses_mouse)\n            {\n                emulator.lock_mouse();\n                $(\"lock_mouse\").blur();\n            }\n            else\n            {\n                // allow text selection\n                if(window.getSelection().isCollapsed)\n                {\n                    let phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\n\n                    // stop mobile browser from scrolling into view when the keyboard is shown\n                    phone_keyboard.style.top = document.body.scrollTop + 100 + \"px\";\n                    phone_keyboard.style.left = document.body.scrollLeft + 100 + \"px\";\n\n                    phone_keyboard.focus();\n                }\n            }\n        };\n\n        const phone_keyboard = document.getElementsByClassName(\"phone_keyboard\")[0];\n\n        phone_keyboard.setAttribute(\"autocorrect\", \"off\");\n        phone_keyboard.setAttribute(\"autocapitalize\", \"off\");\n        phone_keyboard.setAttribute(\"spellcheck\", \"false\");\n        phone_keyboard.tabIndex = 0;\n\n        $(\"screen_container\").addEventListener(\"mousedown\", (e) =>\n        {\n            phone_keyboard.focus();\n        }, false);\n\n        $(\"take_screenshot\").onclick = function()\n        {\n            emulator.screen_make_screenshot();\n\n            $(\"take_screenshot\").blur();\n        };\n\n        $(\"serial\").style.display = \"block\";\n\n        window.addEventListener(\"keydown\", ctrl_w_rescue, false);\n        window.addEventListener(\"keyup\", ctrl_w_rescue, false);\n        window.addEventListener(\"blur\", ctrl_w_rescue, false);\n\n        function ctrl_w_rescue(e)\n        {\n            if(e.ctrlKey)\n            {\n                window.onbeforeunload = function()\n                {\n                    window.onbeforeunload = null;\n                    return \"CTRL-W cannot be sent to the emulator.\";\n                };\n            }\n            else\n            {\n                window.onbeforeunload = null;\n            }\n        }\n    }\n\n    function init_filesystem_panel(emulator)\n    {\n        $(\"filesystem_panel\").style.display = \"block\";\n\n        $(\"filesystem_send_file\").onchange = function()\n        {\n            Array.prototype.forEach.call(this.files, function(file)\n            {\n                var loader = new v86util.SyncFileBuffer(file);\n                loader.onload = function()\n                {\n                    loader.get_buffer(function(buffer)\n                    {\n                        emulator.create_file(\"/\" + file.name, new Uint8Array(buffer));\n                    });\n                };\n                loader.load();\n            }, this);\n\n            this.value = \"\";\n            this.blur();\n        };\n\n        $(\"filesystem_get_file\").onkeypress = function(e)\n        {\n            if(e.which !== 13)\n            {\n                return;\n            }\n\n            this.disabled = true;\n\n            emulator.read_file(this.value, function(err, uint8array)\n            {\n                this.disabled = false;\n\n                if(uint8array)\n                {\n                    var filename = this.value.replace(/\\/$/, \"\").split(\"/\");\n                    filename = filename[filename.length - 1] || \"root\";\n\n                    dump_file(uint8array, filename);\n                    this.value = \"\";\n                }\n                else\n                {\n                    alert(\"Can't read file\");\n                }\n            }.bind(this));\n        };\n    }\n\n    function debug_start(emulator)\n    {\n        if(!emulator.v86)\n        {\n            return;\n        }\n\n        // called as soon as soon as emulation is started, in debug mode\n        var debug = emulator.v86.cpu.debug;\n\n        var debug_infos = $(\"debug_infos\");\n        debug_infos.textContent += \" | logging ops: \" +\n            (debug.step_mode || debug.trace_all ? \"yes\" : \"no\");\n\n        $(\"step\").onclick = debug.step.bind(debug);\n        $(\"run_until\").onclick = debug.run_until.bind(debug);\n        $(\"dump_gdt\").onclick = debug.dump_gdt_ldt.bind(debug);\n        $(\"dump_idt\").onclick = debug.dump_idt.bind(debug);\n        $(\"dump_regs\").onclick = debug.dump_regs.bind(debug);\n        $(\"dump_pt\").onclick = debug.dump_page_directory.bind(debug);\n        $(\"dump_instructions\").onclick = debug.dump_instructions.bind(debug);\n\n        $(\"dump_log\").onclick = function()\n        {\n            dump_file(log_data, \"v86.log\");\n        };\n\n        $(\"dump_instructions_file\").onclick = function()\n        {\n            var ins = debug.get_instructions();\n\n            if(ins)\n            {\n                dump_file(ins, \"trace.txt\");\n            }\n        };\n\n        var cpu = emulator.v86.cpu;\n\n        $(\"debug_panel\").style.display = \"block\";\n        setInterval(function()\n        {\n            $(\"debug_panel\").textContent =\n                cpu.debug.get_regs_short().join(\"\\n\") + \"\\n\" + cpu.debug.get_state();\n        }, 1000);\n\n        // helps debugging\n        window.emulator = emulator;\n        window.cpu = cpu;\n        window.dump_file = dump_file;\n    }\n\n    function onpopstate(e)\n    {\n        location.reload();\n    }\n\n    function set_profile(prof)\n    {\n        if(window.history.pushState)\n        {\n            window.history.pushState({ profile: prof }, \"\", \"?profile=\" + prof);\n        }\n\n    }\n\n})();\n","\"use strict\";\n\n/**\n * Constructor for emulator instances.\n *\n * Usage: `var emulator = new V86Starter(options);`\n *\n * Options can have the following properties (all optional, default in parenthesis):\n *\n * - `memory_size number` (16 * 1024 * 1024) - The memory size in bytes, should\n *   be a power of 2.\n * - `vga_memory_size number` (8 * 1024 * 1024) - VGA memory size in bytes.\n *\n * - `autostart boolean` (false) - If emulation should be started when emulator\n *   is ready.\n *\n * - `disable_keyboard boolean` (false) - If the keyboard should be disabled.\n * - `disable_mouse boolean` (false) - If the mouse should be disabled.\n *\n * - `network_relay_url string` (No network card) - The url of a server running\n *   websockproxy. See [networking.md](networking.md). Setting this will\n *   enable an emulated network card.\n *\n * - `bios Object` (No bios) - Either a url pointing to a bios or an\n *   ArrayBuffer, see below.\n * - `vga_bios Object` (No VGA bios) - VGA bios, see below.\n * - `hda Object` (No hard drive) - First hard disk, see below.\n * - `fda Object` (No floppy disk) - First floppy disk, see below.\n * - `cdrom Object` (No CD) - See below.\n * - `initial_state Object` (Normal boot) - An initial state to load, see\n *   [`restore_state`](#restore_statearraybuffer-state) and below.\n *\n * - `filesystem Object` (No 9p filesystem) - A 9p filesystem, see\n *   [filesystem.md](filesystem.md).\n *\n * - `serial_container HTMLTextAreaElement` (No serial terminal) - A textarea\n *   that will receive and send data to the emulated serial terminal.\n *   Alternatively the serial terminal can also be accessed programatically,\n *   see [serial.html](../examples/serial.html).\n *\n * - `screen_container HTMLElement` (No screen) - An HTMLElement. This should\n *   have a certain structure, see [basic.html](../examples/basic.html).\n *\n * ***\n *\n * There are two ways to load images (`bios`, `vga_bios`, `cdrom`, `hda`, ...):\n *\n * - Pass an object that has a url. Optionally, `async: true` and `size:\n *   size_in_bytes` can be added to the object, so that sectors of the image\n *   are loaded on demand instead of being loaded before boot (slower, but\n *   strongly recommended for big files). In that case, the `Range: bytes=...`\n *   header must be supported on the server.\n *\n *   ```javascript\n *   // download file before boot\n *   bios: {\n *       url: \"bios/seabios.bin\"\n *   }\n *   // download file sectors as requested, size is required\n *   hda: {\n *       url: \"disk/linux.iso\",\n *       async: true,\n *       size: 16 * 1024 * 1024\n *   }\n *   ```\n *\n * - Pass an `ArrayBuffer` or `File` object as `buffer` property.\n *\n *   ```javascript\n *   // use <input type=file>\n *   bios: {\n *       buffer: document.all.hd_image.files[0]\n *   }\n *   // start with empty hard drive\n *   hda: {\n *       buffer: new ArrayBuffer(16 * 1024 * 1024)\n *   }\n *   ```\n *\n * ***\n *\n * @param {Object} options Options to initialize the emulator with.\n * @constructor\n */\nfunction V86Starter(options)\n{\n    //var worker = new Worker(\"src/browser/worker.js\");\n    //var adapter_bus = this.bus = WorkerBus.init(worker);\n\n    this.cpu_is_running = false;\n\n    var bus = Bus.create();\n    var adapter_bus = this.bus = bus[0];\n    this.emulator_bus = bus[1];\n    var emulator = this.v86 = new v86(this.emulator_bus);\n\n    this.bus.register(\"emulator-stopped\", function()\n    {\n        this.cpu_is_running = false;\n    }, this);\n\n    this.bus.register(\"emulator-started\", function()\n    {\n        this.cpu_is_running = true;\n    }, this);\n\n    var settings = {};\n\n    this.disk_images = {\n        \"fda\": undefined,\n        \"fdb\": undefined,\n        \"hda\": undefined,\n        \"hdb\": undefined,\n        \"cdrom\": undefined,\n    };\n\n    settings.load_devices = true;\n    settings.memory_size = options[\"memory_size\"] || 64 * 1024 * 1024;\n    settings.vga_memory_size = options[\"vga_memory_size\"] || 8 * 1024 * 1024;\n    settings.boot_order = options[\"boot_order\"] || 0x213;\n    settings.fastboot = options[\"fastboot\"] || false;\n    settings.fda = undefined;\n    settings.fdb = undefined;\n\n    if(options[\"network_relay_url\"])\n    {\n        this.network_adapter = new NetworkAdapter(options[\"network_relay_url\"], adapter_bus);\n        settings.enable_ne2k = true;\n    }\n\n    if(!options[\"disable_keyboard\"])\n    {\n        this.keyboard_adapter = new KeyboardAdapter(adapter_bus);\n    }\n    if(!options[\"disable_mouse\"])\n    {\n        this.mouse_adapter = new MouseAdapter(adapter_bus, options[\"screen_container\"]);\n    }\n\n    if(options[\"screen_container\"])\n    {\n        this.screen_adapter = new ScreenAdapter(options[\"screen_container\"], adapter_bus);\n    }\n    else if(options[\"screen_dummy\"])\n    {\n        this.screen_adapter = new DummyScreenAdapter(adapter_bus);\n    }\n\n    if(options[\"serial_container\"])\n    {\n        this.serial_adapter = new SerialAdapter(options[\"serial_container\"], adapter_bus);\n    }\n\n    if(!options[\"disable_speaker\"])\n    {\n        this.speaker_adapter = new SpeakerAdapter(adapter_bus);\n    }\n\n    // ugly, but required for closure compiler compilation\n    function put_on_settings(name, buffer)\n    {\n        switch(name)\n        {\n            case \"hda\":\n                settings.hda = this.disk_images[\"hda\"] = buffer;\n                break;\n            case \"hdb\":\n                settings.hdb = this.disk_images[\"hdb\"] = buffer;\n                break;\n            case \"cdrom\":\n                settings.cdrom = this.disk_images[\"cdrom\"] = buffer;\n                break;\n            case \"fda\":\n                settings.fda = this.disk_images[\"fda\"] = buffer;\n                break;\n            case \"fdb\":\n                settings.fdb = this.disk_images[\"fdb\"] = buffer;\n                break;\n\n            case \"multiboot\":\n                settings.multiboot = this.disk_images[\"multiboot\"] = buffer;\n                break;\n\n            case \"bios\":\n                settings.bios = buffer.buffer;\n                break;\n            case \"vga_bios\":\n                settings.vga_bios = buffer.buffer;\n                break;\n            case \"initial_state\":\n                settings.initial_state = buffer.buffer;\n                break;\n            case \"fs9p_json\":\n                settings.fs9p_json = buffer.buffer;\n                break;\n            default:\n                dbg_assert(false, name);\n        }\n    }\n\n    var files_to_load = [];\n\n    function add_file(name, file)\n    {\n        if(!file)\n        {\n            return;\n        }\n\n        if(file[\"get\"] && file[\"set\"] && file[\"load\"])\n        {\n            files_to_load.push({\n                name: name,\n                loadable: file,\n            });\n            return;\n        }\n\n        // Anything coming from the outside world needs to be quoted for\n        // Closure Compiler compilation\n        file = {\n            buffer: file[\"buffer\"],\n            async: file[\"async\"],\n            url: file[\"url\"],\n            size: file[\"size\"],\n        };\n\n        if(name === \"bios\" || name === \"vga_bios\" ||\n            name === \"initial_state\" || name === \"multiboot\")\n        {\n            // Ignore async for these because they must be availabe before boot.\n            // This should make result.buffer available after the object is loaded\n            file.async = false;\n        }\n\n        if(file.buffer instanceof ArrayBuffer)\n        {\n            var buffer = new SyncBuffer(file.buffer);\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(typeof File !== \"undefined\" && file.buffer instanceof File)\n        {\n            // SyncFileBuffer:\n            // - loads the whole disk image into memory, impossible for large files (more than 1GB)\n            // - can later serve get/set operations fast and synchronously\n            // - takes some time for first load, neglectable for small files (up to 100Mb)\n            //\n            // AsyncFileBuffer:\n            // - loads slices of the file asynchronously as requested\n            // - slower get/set\n\n            // Heuristics: If file is larger than or equal to 256M, use AsyncFileBuffer\n            if(file.async === undefined)\n            {\n                file.async = file.buffer.size >= 256 * 1024 * 1024;\n            }\n\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncFileBuffer(file.buffer);\n            }\n            else\n            {\n                var buffer = new v86util.SyncFileBuffer(file.buffer);\n            }\n\n            files_to_load.push({\n                name: name,\n                loadable: buffer,\n            });\n        }\n        else if(file.url)\n        {\n            if(file.async)\n            {\n                var buffer = new v86util.AsyncXHRBuffer(file.url, file.size);\n                files_to_load.push({\n                    name: name,\n                    loadable: buffer,\n                });\n            }\n            else\n            {\n                files_to_load.push({\n                    name: name,\n                    url: file.url,\n                    size: file.size,\n                });\n            }\n        }\n        else\n        {\n            dbg_log(\"Ignored file: url=\" + file.url + \" buffer=\" + file.buffer);\n        }\n    }\n\n    var image_names = [\n        \"bios\", \"vga_bios\",\n        \"cdrom\", \"hda\", \"hdb\", \"fda\", \"fdb\",\n        \"initial_state\", \"multiboot\",\n    ];\n\n    for(var i = 0; i < image_names.length; i++)\n    {\n        add_file(image_names[i], options[image_names[i]]);\n    }\n\n    if(options[\"filesystem\"])\n    {\n        var fs_url = options[\"filesystem\"][\"basefs\"];\n        var base_url = options[\"filesystem\"][\"baseurl\"];\n\n        this.fs9p = new FS(base_url);\n        settings.fs9p = this.fs9p;\n\n        if(fs_url)\n        {\n            console.assert(base_url, \"Filesystem: baseurl must be specified\");\n\n            var size;\n\n            if(typeof fs_url === \"object\")\n            {\n                size = fs_url[\"size\"];\n                fs_url = fs_url[\"url\"];\n            }\n            dbg_assert(typeof fs_url === \"string\");\n\n            files_to_load.push({\n                name: \"fs9p_json\",\n                url: fs_url,\n                size: size,\n                as_text: true,\n            });\n        }\n    }\n\n    var starter = this;\n    var total = files_to_load.length;\n\n    var cont = function(index)\n    {\n        if(index === total)\n        {\n            setTimeout(done.bind(this), 0);\n            return;\n        }\n\n        var f = files_to_load[index];\n\n        if(f.loadable)\n        {\n            f.loadable.onload = function(e)\n            {\n                put_on_settings.call(this, f.name, f.loadable);\n                cont(index + 1);\n            }.bind(this);\n            f.loadable.load();\n        }\n        else\n        {\n            v86util.load_file(f.url, {\n                done: function(result)\n                {\n                    put_on_settings.call(this, f.name, new SyncBuffer(result));\n                    cont(index + 1);\n                }.bind(this),\n                progress: function progress(e)\n                {\n                    if(e.target.status === 200)\n                    {\n                        starter.emulator_bus.send(\"download-progress\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n\n                            lengthComputable: e.lengthComputable,\n                            total: e.total || f.size,\n                            loaded: e.loaded,\n                        });\n                    }\n                    else\n                    {\n                        starter.emulator_bus.send(\"download-error\", {\n                            file_index: index,\n                            file_count: total,\n                            file_name: f.url,\n                            request: e.target,\n                        });\n                    }\n                },\n                as_text: f.as_text,\n            });\n        }\n    }.bind(this);\n    cont(0);\n\n    function done()\n    {\n        if(settings.initial_state)\n        {\n            // avoid large allocation now, memory will be restored later anyway\n            settings.memory_size = 0;\n        }\n\n        this.bus.send(\"cpu-init\", settings);\n\n        setTimeout(function()\n        {\n            if(settings.initial_state)\n            {\n                emulator.restore_state(settings.initial_state);\n            }\n\n            setTimeout(function()\n            {\n                if(settings.fs9p && settings.fs9p_json)\n                {\n                    settings.fs9p.OnJSONLoaded(settings.fs9p_json);\n                }\n\n                if(options[\"autostart\"])\n                {\n                    this.bus.send(\"cpu-run\");\n                }\n            }.bind(this), 0);\n        }.bind(this), 0);\n    }\n}\n\n/**\n * Start emulation. Do nothing if emulator is running already. Can be\n * asynchronous.\n * @export\n */\nV86Starter.prototype.run = function()\n{\n    this.bus.send(\"cpu-run\");\n};\n\n/**\n * Stop emulation. Do nothing if emulator is not running. Can be asynchronous.\n * @export\n */\nV86Starter.prototype.stop = function()\n{\n    this.bus.send(\"cpu-stop\");\n};\n\n/**\n * @ignore\n * @export\n */\nV86Starter.prototype.destroy = function()\n{\n    this.keyboard_adapter.destroy();\n};\n\n/**\n * Restart (force a reboot).\n * @export\n */\nV86Starter.prototype.restart = function()\n{\n    this.bus.send(\"cpu-restart\");\n};\n\n/**\n * Add an event listener (the emulator is an event emitter). A list of events\n * can be found at [events.md](events.md).\n *\n * The callback function gets a single argument which depends on the event.\n *\n * @param {string} event Name of the event.\n * @param {function(*)} listener The callback function.\n * @export\n */\nV86Starter.prototype.add_listener = function(event, listener)\n{\n    this.bus.register(event, listener, this);\n};\n\n/**\n * Remove an event listener.\n *\n * @param {string} event\n * @param {function(*)} listener\n * @export\n */\nV86Starter.prototype.remove_listener = function(event, listener)\n{\n    this.bus.unregister(event, listener);\n};\n\n/**\n * Restore the emulator state from the given state, which must be an\n * ArrayBuffer returned by\n * [`save_state`](#save_statefunctionobject-arraybuffer-callback).\n *\n * Note that the state can only be restored correctly if this constructor has\n * been created with the same options as the original instance (e.g., same disk\n * images, memory size, etc.).\n *\n * Different versions of the emulator might use a different format for the\n * state buffer.\n *\n * @param {ArrayBuffer} state\n * @export\n */\nV86Starter.prototype.restore_state = function(state)\n{\n    this.v86.restore_state(state);\n};\n\n/**\n * Asynchronously save the current state of the emulator. The first argument to\n * the callback is an Error object if something went wrong and is null\n * otherwise.\n *\n * @param {function(Object, ArrayBuffer)} callback\n * @export\n */\nV86Starter.prototype.save_state = function(callback)\n{\n    // Might become asynchronous at some point\n\n    setTimeout(function()\n    {\n        try\n        {\n            callback(null, this.v86.save_state());\n        }\n        catch(e)\n        {\n            callback(e, null);\n        }\n    }.bind(this), 0);\n};\n\n/**\n * Return an object with several statistics. Return value looks similar to\n * (but can be subject to change in future versions or different\n * configurations, so use defensively):\n *\n * ```javascript\n * {\n *     \"cpu\": {\n *         \"instruction_counter\": 2821610069\n *     },\n *     \"hda\": {\n *         \"sectors_read\": 95240,\n *         \"sectors_written\": 952,\n *         \"bytes_read\": 48762880,\n *         \"bytes_written\": 487424,\n *         \"loading\": false\n *     },\n *     \"cdrom\": {\n *         \"sectors_read\": 0,\n *         \"sectors_written\": 0,\n *         \"bytes_read\": 0,\n *         \"bytes_written\": 0,\n *         \"loading\": false\n *     },\n *     \"mouse\": {\n *         \"enabled\": true\n *     },\n *     \"vga\": {\n *         \"is_graphical\": true,\n *         \"res_x\": 800,\n *         \"res_y\": 600,\n *         \"bpp\": 32\n *     }\n * }\n * ```\n *\n * @deprecated\n * @return {Object}\n * @export\n */\nV86Starter.prototype.get_statistics = function()\n{\n    console.warn(\"V86Starter.prototype.get_statistics is deprecated. Use events instead.\");\n\n    var stats = {\n        cpu: {\n            instruction_counter: this.get_instruction_counter(),\n        },\n    };\n\n    if(!this.v86)\n    {\n        return stats;\n    }\n\n    var devices = this.v86.cpu.devices;\n\n    if(devices.hda)\n    {\n        stats.hda = devices.hda.stats;\n    }\n\n    if(devices.cdrom)\n    {\n        stats.cdrom = devices.cdrom.stats;\n    }\n\n    if(devices.ps2)\n    {\n        stats[\"mouse\"] = {\n            \"enabled\": devices.ps2.use_mouse,\n        };\n    }\n\n    if(devices.vga)\n    {\n        stats[\"vga\"] = {\n            \"is_graphical\": devices.vga.stats.is_graphical,\n        };\n    }\n\n    return stats;\n};\n\n/**\n * @return {number}\n * @ignore\n * @export\n */\nV86Starter.prototype.get_instruction_counter = function()\n{\n    if(this.v86)\n    {\n        return this.v86.cpu.timestamp_counter;\n    }\n    else\n    {\n        // TODO: Should be handled using events\n        return 0;\n    }\n};\n\n/**\n * @return {boolean}\n * @export\n */\nV86Starter.prototype.is_running = function()\n{\n    return this.cpu_is_running;\n};\n\n/**\n * Send a sequence of scan codes to the emulated PS2 controller. A list of\n * codes can be found at http://stanislavs.org/helppc/make_codes.html.\n * Do nothing if there is no keyboard controller.\n *\n * @param {Array.<number>} codes\n * @export\n */\nV86Starter.prototype.keyboard_send_scancodes = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.bus.send(\"keyboard-code\", codes[i]);\n    }\n};\n\n/**\n * Send translated keys\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_keys = function(codes)\n{\n    for(var i = 0; i < codes.length; i++)\n    {\n        this.keyboard_adapter.simulate_press(codes[i]);\n    }\n};\n\n/**\n * Send text\n * @ignore\n * @export\n */\nV86Starter.prototype.keyboard_send_text = function(string)\n{\n    for(var i = 0; i < string.length; i++)\n    {\n        this.keyboard_adapter.simulate_char(string[i]);\n    }\n};\n\n/**\n * Download a screenshot.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_make_screenshot = function()\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.make_screenshot();\n    }\n};\n\n/**\n * Set the scaling level of the emulated screen.\n *\n * @param {number} sx\n * @param {number} sy\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_set_scale = function(sx, sy)\n{\n    if(this.screen_adapter)\n    {\n        this.screen_adapter.set_scale(sx, sy);\n    }\n};\n\n/**\n * Go fullscreen.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.screen_go_fullscreen = function()\n{\n    if(!this.screen_adapter)\n    {\n        return;\n    }\n\n    var elem = document.getElementById(\"screen_container\");\n\n    if(!elem)\n    {\n        return;\n    }\n\n    // bracket notation because otherwise they get renamed by closure compiler\n    var fn = elem[\"requestFullScreen\"] ||\n            elem[\"webkitRequestFullscreen\"] ||\n            elem[\"mozRequestFullScreen\"] ||\n            elem[\"msRequestFullScreen\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n\n        // This is necessary, because otherwise chromium keyboard doesn't work anymore.\n        // Might (but doesn't seem to) break something else\n        var focus_element = document.getElementsByClassName(\"phone_keyboard\")[0];\n        focus_element && focus_element.focus();\n    }\n\n    //this.lock_mouse(elem);\n    this.lock_mouse();\n};\n\n/**\n * Lock the mouse cursor: It becomes invisble and is not moved out of the\n * browser window.\n *\n * @ignore\n * @export\n */\nV86Starter.prototype.lock_mouse = function()\n{\n    var elem = document.body;\n\n    var fn = elem[\"requestPointerLock\"] ||\n                elem[\"mozRequestPointerLock\"] ||\n                elem[\"webkitRequestPointerLock\"];\n\n    if(fn)\n    {\n        fn.call(elem);\n    }\n};\n\n/**\n * Enable or disable sending mouse events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n */\nV86Starter.prototype.mouse_set_status = function(enabled)\n{\n    if(this.mouse_adapter)\n    {\n        this.mouse_adapter.emu_enabled = enabled;\n    }\n};\n\n/**\n * Enable or disable sending keyboard events to the emulated PS2 controller.\n *\n * @param {boolean} enabled\n * @export\n */\nV86Starter.prototype.keyboard_set_status = function(enabled)\n{\n    if(this.keyboard_adapter)\n    {\n        this.keyboard_adapter.emu_enabled = enabled;\n    }\n};\n\n\n/**\n * Send a string to the first emulated serial terminal.\n *\n * @param {string} data\n * @export\n */\nV86Starter.prototype.serial0_send = function(data)\n{\n    for(var i = 0; i < data.length; i++)\n    {\n        this.bus.send(\"serial0-input\", data.charCodeAt(i));\n    }\n};\n\n/**\n * Write to a file in the 9p filesystem. Nothing happens if no filesystem has\n * been initialized. First argument to the callback is an error object if\n * something went wrong and null otherwise.\n *\n * @param {string} file\n * @param {Uint8Array} data\n * @param {function(Object)=} callback\n * @export\n */\nV86Starter.prototype.create_file = function(file, data, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var parts = file.split(\"/\");\n    var filename = parts[parts.length - 1];\n\n    var path_infos = fs.SearchPath(file);\n    var parent_id = path_infos.parentid;\n    var not_found = filename === \"\" || parent_id === -1;\n\n    if(!not_found)\n    {\n        fs.CreateBinaryFile(filename, parent_id, data);\n    }\n\n    if(callback)\n    {\n        setTimeout(function()\n        {\n            if(not_found)\n            {\n                callback(new FileNotFoundError());\n            }\n            else\n            {\n                callback(null);\n            }\n        }, 0);\n    }\n};\n\n/**\n * Read a file in the 9p filesystem. Nothing happens if no filesystem has been\n * initialized.\n *\n * @param {string} file\n * @param {function(Object, Uint8Array)} callback\n * @export\n */\nV86Starter.prototype.read_file = function(file, callback)\n{\n    var fs = this.fs9p;\n\n    if(!fs)\n    {\n        return;\n    }\n\n    var path_infos = fs.SearchPath(file);\n    var id = path_infos.id;\n\n    if(id === -1)\n    {\n        callback(new FileNotFoundError(), null);\n    }\n    else\n    {\n        fs.OpenInode(id, undefined);\n        fs.AddEvent(\n            id,\n            function()\n            {\n                var data = fs.inodedata[id];\n\n                if(data)\n                {\n                    callback(null, data.subarray(0, fs.inodes[id].size));\n                }\n                else\n                {\n                    callback(new FileNotFoundError(), null);\n                }\n            }\n        );\n    }\n};\n\n/**\n * @ignore\n * @constructor\n *\n * @param {string=} message\n */\nfunction FileNotFoundError(message)\n{\n    this.message = message || \"File not found\";\n}\nFileNotFoundError.prototype = Error.prototype;\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"V86Starter\"] = V86Starter;\n    window[\"V86\"] = V86Starter;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"V86Starter\"] = V86Starter;\n    module.exports[\"V86\"] = V86Starter;\n}\nelse if(typeof importScripts === \"function\")\n{\n    // web worker\n    self[\"V86Starter\"] = V86Starter;\n    self[\"V86\"] = V86Starter;\n}\n","\"use strict\";\n\n/**\n * The ISA IO bus\n * Devices register their ports here\n *\n * @constructor\n * @param {CPU} cpu\n */\nfunction IO(cpu)\n{\n    /** @const */\n    this.ports = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 0x10000; i++)\n    {\n        this.ports[i] = this.create_empty_entry();\n    }\n\n    var memory_size = cpu.memory_size;\n\n    for(var i = 0; (i << MMAP_BLOCK_BITS) < memory_size; i++)\n    {\n        // avoid sparse arrays\n        cpu.memory_map_read8[i] = cpu.memory_map_write8[i] = undefined;\n        cpu.memory_map_read32[i] = cpu.memory_map_write32[i] = undefined;\n    }\n\n    this.mmap_register(memory_size, 0x100000000 - memory_size,\n        function(addr) {\n            // read outside of the memory size\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return 0xFF;\n        },\n        function(addr, value) {\n            // write outside of the memory size\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value, 2), LOG_IO);\n        },\n        function(addr) {\n            dbg_log(\"Read from unmapped memory space, addr=\" + h(addr >>> 0, 8), LOG_IO);\n            return -1;\n        },\n        function(addr, value) {\n            dbg_log(\"Write to unmapped memory space, addr=\" + h(addr >>> 0, 8) + \" value=\" + h(value >>> 0, 8), LOG_IO);\n        }\n    );\n}\n\nIO.prototype.create_empty_entry = function()\n{\n    return {\n        read8: this.empty_port_read8,\n        read16: this.empty_port_read16,\n        read32: this.empty_port_read32,\n\n        write8: this.empty_port_write,\n        write16: this.empty_port_write,\n        write32: this.empty_port_write,\n\n        device: undefined,\n    };\n};\n\nIO.prototype.empty_port_read8 = function()\n{\n    return 0xFF;\n};\n\nIO.prototype.empty_port_read16 = function()\n{\n    return 0xFFFF;\n};\n\nIO.prototype.empty_port_read32 = function()\n{\n    return -1;\n};\n\nIO.prototype.empty_port_write = function(x)\n{\n};\n\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function():number=} r8\n * @param {function():number=} r16\n * @param {function():number=} r32\n */\nIO.prototype.register_read = function(port_addr, device, r8, r16, r32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!r8 || typeof r8 === \"function\");\n    dbg_assert(!r16 || typeof r16 === \"function\");\n    dbg_assert(!r32 || typeof r32 === \"function\");\n    dbg_assert(r8 || r16 || r32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped read\" + n + \" \" + h(port_addr, 4) + \" (\" + device.name + \")\");\n            return -1 >>> (32 - n) | 0;\n        };\n        if(!r8) r8 = fail.bind(this, 8);\n        if(!r16) r16 = fail.bind(this, 16);\n        if(!r32) r32 = fail.bind(this, 32);\n    }\n\n    if(r8) this.ports[port_addr].read8 = r8;\n    if(r16) this.ports[port_addr].read16 = r16;\n    if(r32) this.ports[port_addr].read32 = r32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * @param {number} port_addr\n * @param {Object} device\n * @param {function(number)=} w8\n * @param {function(number)=} w16\n * @param {function(number)=} w32\n */\nIO.prototype.register_write = function(port_addr, device, w8, w16, w32)\n{\n    dbg_assert(typeof port_addr === \"number\");\n    dbg_assert(typeof device === \"object\");\n    dbg_assert(!w8 || typeof w8 === \"function\");\n    dbg_assert(!w16 || typeof w16 === \"function\");\n    dbg_assert(!w32 || typeof w32 === \"function\");\n    dbg_assert(w8 || w16 || w32);\n\n    if(DEBUG)\n    {\n        var fail = function(n) {\n            dbg_assert(false, \"Overlapped write\" + n + \" \" + h(port_addr) + \" (\" + device.name + \")\");\n        };\n        if(!w8) w8 = fail.bind(this, 8);\n        if(!w16) w16 = fail.bind(this, 16);\n        if(!w32) w32 = fail.bind(this, 32);\n    }\n\n    if(w8) this.ports[port_addr].write8 = w8;\n    if(w16) this.ports[port_addr].write16 = w16;\n    if(w32) this.ports[port_addr].write32 = w32;\n    this.ports[port_addr].device = device;\n};\n\n/**\n * > Any two consecutive 8-bit ports can be treated as a 16-bit port;\n * > and four consecutive 8-bit ports can be treated as a 32-bit port\n * > http://css.csail.mit.edu/6.858/2012/readings/i386/s08_01.htm\n *\n * This info is not correct for all ports, but handled by the following functions\n *\n * Register the write of 2 or 4 consecutive 8-bit ports, 1 or 2 16-bit\n * ports and 0 or 1 32-bit ports\n *\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function():number} r8_1\n * @param {function():number} r8_2\n * @param {function():number=} r8_3\n * @param {function():number=} r8_4\n */\nIO.prototype.register_read_consecutive = function(port_addr, device, r8_1, r8_2, r8_3, r8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function r16_1()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8;\n    }\n    function r16_2()\n    {\n        return r8_3.call(this) |\n                r8_4.call(this) << 8;\n    }\n    function r32()\n    {\n        return r8_1.call(this) |\n                r8_2.call(this) << 8 |\n                r8_3.call(this) << 16 |\n                r8_4.call(this) << 24;\n    }\n\n    if(r8_3 && r8_4)\n    {\n        this.register_read(port_addr, device, r8_1, r16_1, r32);\n        this.register_read(port_addr + 1, device, r8_2);\n        this.register_read(port_addr + 2, device, r8_3, r16_2);\n        this.register_read(port_addr + 3, device, r8_4);\n    }\n    else\n    {\n        this.register_read(port_addr, device, r8_1, r16_1);\n        this.register_read(port_addr + 1, device, r8_2);\n    }\n};\n\n/**\n * @param {number} port_addr\n * @param {!Object} device\n * @param {function(number)} w8_1\n * @param {function(number)} w8_2\n * @param {function(number)=} w8_3\n * @param {function(number)=} w8_4\n */\nIO.prototype.register_write_consecutive = function(port_addr, device, w8_1, w8_2, w8_3, w8_4)\n{\n    dbg_assert(arguments.length === 4 || arguments.length === 6);\n\n    function w16_1(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n    }\n    function w16_2(data)\n    {\n        w8_3.call(this, data & 0xFF);\n        w8_4.call(this, data >> 8 & 0xFF);\n    }\n    function w32(data)\n    {\n        w8_1.call(this, data & 0xFF);\n        w8_2.call(this, data >> 8 & 0xFF);\n        w8_3.call(this, data >> 16 & 0xFF);\n        w8_4.call(this, data >>> 24);\n    }\n\n    if(w8_3 && w8_4)\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1, w32);\n        this.register_write(port_addr + 1, device, w8_2);\n        this.register_write(port_addr + 2, device, w8_3, w16_2);\n        this.register_write(port_addr + 3, device, w8_4);\n    }\n    else\n    {\n        this.register_write(port_addr,     device, w8_1, w16_1);\n        this.register_write(port_addr + 1, device, w8_2);\n    }\n};\n\nIO.prototype.in_mmap_range = function(start, count)\n{\n    start >>>= 0;\n    count >>>= 0;\n\n    var end = start + count;\n\n    if(end >= this.cpu.memory_size)\n    {\n        return true;\n    }\n\n    //dbg_log(\"in_mmap_range start=\" + start + \" count=\" + count);\n    start &= ~(MMAP_BLOCK_SIZE - 1);\n\n    while(start < end)\n    {\n        if(this.cpu.in_mapped_range(start))\n        {\n            return true;\n        }\n\n        start += MMAP_BLOCK_SIZE;\n    }\n\n    return false;\n};\n\nIO.prototype.mmap_read32_shim = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_read8[aligned_addr];\n\n    return fn(addr) | fn(addr + 1) << 8 |\n            fn(addr + 2) << 16 | fn(addr + 3) << 24;\n};\n\nIO.prototype.mmap_write32_shim = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n    var fn = this.cpu.memory_map_write8[aligned_addr];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1, value >> 8 & 0xFF);\n    fn(addr + 2, value >> 16 & 0xFF);\n    fn(addr + 3, value >>> 24);\n};\n\n/**\n * @param {number} addr\n * @param {number} size\n * @param {*} read_func8\n * @param {*} write_func8\n * @param {*=} read_func32\n * @param {*=} write_func32\n */\nIO.prototype.mmap_register = function(addr, size, read_func8, write_func8, read_func32, write_func32)\n{\n    dbg_log(\"mmap_register addr=\" + h(addr >>> 0, 8) + \" size=\" + h(size, 8), LOG_IO);\n\n    dbg_assert((addr & MMAP_BLOCK_SIZE - 1) === 0);\n    dbg_assert(size && (size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    if(!read_func32)\n        read_func32 = this.mmap_read32_shim.bind(this);\n\n    if(!write_func32)\n        write_func32 = this.mmap_write32_shim.bind(this);\n\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    for(; size > 0; aligned_addr++)\n    {\n        this.cpu.memory_map_read8[aligned_addr] = read_func8;\n        this.cpu.memory_map_write8[aligned_addr] = write_func8;\n        this.cpu.memory_map_read32[aligned_addr] = read_func32;\n        this.cpu.memory_map_write32[aligned_addr] = write_func32;\n\n        size -= MMAP_BLOCK_SIZE;\n    }\n};\n\n\nIO.prototype.port_write8 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write8 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write8 port #\" + h(port_addr, 4) + \" <- \" + h(data, 2) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write8.call(entry.device, data);\n};\n\nIO.prototype.port_write16 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write16 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write16 port #\" + h(port_addr, 4) + \" <- \" + h(data, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write16.call(entry.device, data);\n};\n\nIO.prototype.port_write32 = function(port_addr, data)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.write32 === this.empty_port_write || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"write32 port #\" + h(port_addr, 4) + \" <- \" + h(data >>> 0, 8) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    return entry.write32.call(entry.device, data);\n};\n\nIO.prototype.port_read8 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read8 === this.empty_port_read8 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read8 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read8.call(entry.device);\n    dbg_assert(value < 0x100, \"8 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read16 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read16 === this.empty_port_read16 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read16 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read16.call(entry.device);\n    dbg_assert(value < 0x10000 && value >= 0, \"16 bit port returned large value: \" + h(port_addr));\n    return value;\n};\n\nIO.prototype.port_read32 = function(port_addr)\n{\n    var entry = this.ports[port_addr];\n\n    if(entry.read32 === this.empty_port_read32 || LOG_ALL_IO)\n    {\n        dbg_log(\n            \"read32 port  #\" + h(port_addr, 4) + this.get_port_description(port_addr),\n            LOG_IO\n        );\n    }\n    var value = entry.read32.call(entry.device);\n    dbg_assert((value | 0) === value);\n    return value;\n};\n\n// via seabios ioport.h\nvar debug_port_list = {\n    0x0004: \"PORT_DMA_ADDR_2\",\n    0x0005: \"PORT_DMA_CNT_2\",\n    0x000a: \"PORT_DMA1_MASK_REG\",\n    0x000b: \"PORT_DMA1_MODE_REG\",\n    0x000c: \"PORT_DMA1_CLEAR_FF_REG\",\n    0x000d: \"PORT_DMA1_MASTER_CLEAR\",\n    0x0020: \"PORT_PIC1_CMD\",\n    0x0021: \"PORT_PIC1_DATA\",\n    0x0040: \"PORT_PIT_COUNTER0\",\n    0x0041: \"PORT_PIT_COUNTER1\",\n    0x0042: \"PORT_PIT_COUNTER2\",\n    0x0043: \"PORT_PIT_MODE\",\n    0x0060: \"PORT_PS2_DATA\",\n    0x0061: \"PORT_PS2_CTRLB\",\n    0x0064: \"PORT_PS2_STATUS\",\n    0x0070: \"PORT_CMOS_INDEX\",\n    0x0071: \"PORT_CMOS_DATA\",\n    0x0080: \"PORT_DIAG\",\n    0x0081: \"PORT_DMA_PAGE_2\",\n    0x0092: \"PORT_A20\",\n    0x00a0: \"PORT_PIC2_CMD\",\n    0x00a1: \"PORT_PIC2_DATA\",\n    0x00b2: \"PORT_SMI_CMD\",\n    0x00b3: \"PORT_SMI_STATUS\",\n    0x00d4: \"PORT_DMA2_MASK_REG\",\n    0x00d6: \"PORT_DMA2_MODE_REG\",\n    0x00da: \"PORT_DMA2_MASTER_CLEAR\",\n    0x00f0: \"PORT_MATH_CLEAR\",\n    0x0170: \"PORT_ATA2_CMD_BASE\",\n    0x01f0: \"PORT_ATA1_CMD_BASE\",\n    0x0278: \"PORT_LPT2\",\n    0x02e8: \"PORT_SERIAL4\",\n    0x02f8: \"PORT_SERIAL2\",\n    0x0374: \"PORT_ATA2_CTRL_BASE\",\n    0x0378: \"PORT_LPT1\",\n    0x03e8: \"PORT_SERIAL3\",\n    //0x03f4: \"PORT_ATA1_CTRL_BASE\",\n    0x03f0: \"PORT_FD_BASE\",\n    0x03f2: \"PORT_FD_DOR\",\n    0x03f4: \"PORT_FD_STATUS\",\n    0x03f5: \"PORT_FD_DATA\",\n    0x03f6: \"PORT_HD_DATA\",\n    0x03f7: \"PORT_FD_DIR\",\n    0x03f8: \"PORT_SERIAL1\",\n    0x0cf8: \"PORT_PCI_CMD\",\n    0x0cf9: \"PORT_PCI_REBOOT\",\n    0x0cfc: \"PORT_PCI_DATA\",\n    0x0402: \"PORT_BIOS_DEBUG\",\n    0x0510: \"PORT_QEMU_CFG_CTL\",\n    0x0511: \"PORT_QEMU_CFG_DATA\",\n    0xb000: \"PORT_ACPI_PM_BASE\",\n    0xb100: \"PORT_SMB_BASE\",\n    0x8900: \"PORT_BIOS_APM\"\n};\n\nIO.prototype.get_port_description = function(addr)\n{\n    if(debug_port_list[addr])\n    {\n        return \"  (\" + debug_port_list[addr] + \")\";\n    }\n    else\n    {\n        return \"\";\n    }\n};\n\n\n","\"use strict\";\n\nvar\n/** @const */ LOG_ALL = -1,\n/** @const */ LOG_NONE = 0,\n\n/** @const */ LOG_OTHER =  0x000001,\n/** @const */ LOG_CPU =    0x000002,\n/** @const */ LOG_FPU =    0x000004,\n/** @const */ LOG_MEM =    0x000008,\n/** @const */ LOG_DMA =    0x000010,\n/** @const */ LOG_IO =     0x000020,\n/** @const */ LOG_PS2 =    0x000040,\n/** @const */ LOG_PIC =    0x000080,\n/** @const */ LOG_VGA =    0x000100,\n/** @const */ LOG_PIT =    0x000200,\n/** @const */ LOG_MOUSE =  0x000400,\n/** @const */ LOG_PCI =    0x000800,\n/** @const */ LOG_BIOS =   0x001000,\n/** @const */ LOG_FLOPPY = 0x002000,\n/** @const */ LOG_SERIAL = 0x004000,\n/** @const */ LOG_DISK =   0x008000,\n/** @const */ LOG_RTC =    0x010000,\n/** @const */ LOG_HPET =   0x020000,\n/** @const */ LOG_ACPI =   0x040000,\n/** @const */ LOG_APIC =   0x080000,\n/** @const */ LOG_NET =    0x100000,\n/** @const */ LOG_VIRTIO = 0x200000,\n/** @const */ LOG_9P =     0x400000,\n/** @const */ LOG_SB16 =   0x800000;\n\n\n/**\n * @const\n * @type {Array<Array<string|number>>}\n */\nvar LOG_NAMES = [\n    [1, \"\"],\n    [LOG_CPU, \"CPU\"],\n    [LOG_DISK, \"DISK\"],\n    [LOG_FPU, \"FPU\"],\n    [LOG_MEM, \"MEM\"],\n    [LOG_DMA, \"DMA\"],\n    [LOG_IO, \"IO\"],\n    [LOG_PS2, \"PS2\"],\n    [LOG_PIC, \"PIC\"],\n    [LOG_VGA, \"VGA\"],\n    [LOG_PIT, \"PIT\"],\n    [LOG_MOUSE, \"MOUS\"],\n    [LOG_PCI, \"PCI\"],\n    [LOG_BIOS, \"BIOS\"],\n    [LOG_FLOPPY, \"FLOP\"],\n    [LOG_SERIAL, \"SERI\"],\n    [LOG_RTC, \"RTC\"],\n    [LOG_HPET, \"HPET\"],\n    [LOG_ACPI, \"ACPI\"],\n    [LOG_APIC, \"APIC\"],\n    [LOG_NET, \"NET\"],\n    [LOG_VIRTIO, \"VIO\"],\n    [LOG_9P, \"9P\"],\n    [LOG_SB16, \"SB16\"]\n];\n\nvar\n/** @const */ TLB_SYSTEM_READ = 1,\n/** @const */ TLB_SYSTEM_WRITE = 2,\n/** @const */ TLB_USER_READ = 4,\n/** @const */ TLB_USER_WRITE = 8;\n\n\nvar\n\n// flags register bitflags\n/** @const */ flag_carry = 1,\n/** @const */ flag_parity = 4,\n/** @const */ flag_adjust = 16,\n/** @const */ flag_zero = 64,\n/** @const */ flag_sign = 128,\n/** @const */ flag_trap = 256,\n/** @const */ flag_interrupt = 512,\n/** @const */ flag_direction = 1024,\n/** @const */ flag_overflow = 2048,\n/** @const */ flag_iopl = 1 << 12 | 1 << 13,\n/** @const */ flag_nt = 1 << 14,\n/** @const */ flag_rf = 1 << 16,\n/** @const */ flag_vm = 1 << 17,\n/** @const */ flag_ac = 1 << 18,\n/** @const */ flag_vif = 1 << 19,\n/** @const */ flag_vip = 1 << 20,\n/** @const */ flag_id = 1 << 21,\n\n/**\n * default values of reserved flags bits\n * @const\n */\nflags_default = 1 << 1,\n\n/**\n * bitmask to select non-reserved flags bits\n * @const\n */\nflags_mask =\n    flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_trap | flag_interrupt |\n    flag_direction | flag_overflow | flag_iopl | flag_nt | flag_rf | flag_vm | flag_ac |\n    flag_vif | flag_vip | flag_id,\n\n\n/**\n * all arithmetic flags\n * @const\n */\nflags_all = flag_carry | flag_parity | flag_adjust | flag_zero | flag_sign | flag_overflow,\n\n\n/**\n * opsizes used by get flag functions\n *\n * @const\n */\nOPSIZE_8 = 7,\n/** @const */\nOPSIZE_16 = 15,\n/** @const */\nOPSIZE_32 = 31,\n\n/** @const */\nPSE_ENABLED = 128,\n\n/** @const */ reg_eax = 0,\n/** @const */ reg_ecx = 1,\n/** @const */ reg_edx = 2,\n/** @const */ reg_ebx = 3,\n/** @const */ reg_esp = 4,\n/** @const */ reg_ebp = 5,\n/** @const */ reg_esi = 6,\n/** @const */ reg_edi = 7,\n\n/** @const */ reg_ax = 0,\n/** @const */ reg_cx = 2,\n/** @const */ reg_dx = 4,\n/** @const */ reg_bx = 6,\n/** @const */ reg_sp = 8,\n/** @const */ reg_bp = 10,\n/** @const */ reg_si = 12,\n/** @const */ reg_di = 14,\n\n/** @const */ reg_al = 0,\n/** @const */ reg_cl = 4,\n/** @const */ reg_dl = 8,\n/** @const */ reg_bl = 12,\n/** @const */ reg_ah = 1,\n/** @const */ reg_ch = 5,\n/** @const */ reg_dh = 9,\n/** @const */ reg_bh = 13,\n\n\n/** @const */ reg_es = 0,\n/** @const */ reg_cs = 1,\n/** @const */ reg_ss = 2,\n/** @const */ reg_ds = 3,\n/** @const */ reg_fs = 4,\n/** @const */ reg_gs = 5,\n\n\n/** @const */ reg_tr = 6, // task register\n/** @const */ reg_ldtr = 7; // local descriptor table register\n\nvar\n    /**\n     * The minimum number of bytes that can be memory-mapped\n     * by one device.\n     *\n     * @const\n     */\n    MMAP_BLOCK_BITS = 17,\n    /** @const */\n    MMAP_BLOCK_SIZE = 1 << MMAP_BLOCK_BITS;\n\n\n/** @const */\nvar MEM_PAGE_WRITTEN = 1;\n\n\n/** @const */\nvar MAGIC_CPU_EXCEPTION = 0xDEADBEE;\n\n\nvar\n    /** @const */\n    REPEAT_STRING_PREFIX_NONE = 0,\n    /** @const */\n    REPEAT_STRING_PREFIX_NZ = 1,\n    /** @const */\n    REPEAT_STRING_PREFIX_Z = 2;\n\nvar\n    /** @const */\n    CR0_PE = 1,\n    /** @const */\n    CR0_MP = 1 << 1,\n    /** @const */\n    CR0_EM = 1 << 2,\n    /** @const */\n    CR0_TS = 1 << 3,\n    /** @const */\n    CR0_ET = 1 << 4,\n    /** @const */\n    CR0_WP = 1 << 16,\n    /** @const */\n    CR0_NW = 1 << 29,\n    /** @const */\n    CR0_CD = 1 << 30,\n    /** @const */\n    CR0_PG = 1 << 31;\n\nvar\n    /** @const */\n    CR4_VME = 1,\n    /** @const */\n    CR4_PVI = 1 << 1,\n    /** @const */\n    CR4_TSD = 1 << 2,\n    /** @const */\n    CR4_PSE = 1 << 4,\n    /** @const */\n    CR4_DE = 1 << 3,\n    /** @const */\n    CR4_PAE = 1 << 5,\n    /** @const */\n    CR4_PGE = 1 << 7,\n    /** @const */\n    CR4_OSFXSR = 1 << 9,\n    /** @const */\n    CR4_OSXMMEXCPT = 1 << 10;\n\n\n// Segment prefixes must not collide with reg_*s variables\n// _ZERO is a special zero offset segment\nvar\n    /** @const */\n    SEG_PREFIX_NONE = -1,\n\n    /** @const */\n    SEG_PREFIX_ZERO = 7;\n\n\nvar\n    /** @const */\n    IA32_SYSENTER_CS = 0x174,\n\n    // Note: These are wrong in Intel's manuals. Fuck Intel\n    /** @const */\n    IA32_SYSENTER_ESP = 0x175,\n\n    /** @const */\n    IA32_SYSENTER_EIP = 0x176;\n\n/** @const */\nvar IA32_TIME_STAMP_COUNTER = 0x10;\n\n/** @const */\nvar IA32_PLATFORM_ID = 0x17;\n\n/** @const */\nvar MSR_EBC_FREQUENCY_ID = 0x2C;\n\n/** @const */\nvar IA32_APIC_BASE_MSR = 0x1B;\n\n/** @const */\nvar IA32_BIOS_SIGN_ID = 0x8B;\n\n/** @const */\nvar IA32_MISC_ENABLE = 0x1A0;\n\n/** @const */\nvar IA32_RTIT_CTL = 0x570;\n\n/** @const */\nvar MSR_SMI_COUNT = 0x34;\n\n/** @const */\nvar IA32_MCG_CAP = 0x179;\n\n/** @const */\nvar IA32_KERNEL_GS_BASE = 0xC0000101 | 0;\n\n/** @const */\nvar MSR_PKG_C2_RESIDENCY = 0x60D;\n\n\n/** @const */\nvar IA32_APIC_BASE_BSP = 1 << 8;\n/** @const */\nvar IA32_APIC_BASE_EXTD = 1 << 10;\n/** @const */\nvar IA32_APIC_BASE_EN = 1 << 11;\n\n\n/** @const */ var TSR_BACKLINK = 0x00;\n/** @const */ var TSR_CR3 = 0x1C;\n/** @const */ var TSR_EIP = 0x20;\n/** @const */ var TSR_EFLAGS = 0x24;\n\n/** @const */ var TSR_EAX = 0x28;\n/** @const */ var TSR_ECX = 0x2c;\n/** @const */ var TSR_EDX = 0x30;\n/** @const */ var TSR_EBX = 0x34;\n/** @const */ var TSR_ESP = 0x38;\n/** @const */ var TSR_EBP = 0x3c;\n/** @const */ var TSR_ESI = 0x40;\n/** @const */ var TSR_EDI = 0x44;\n\n/** @const */ var TSR_ES = 0x48;\n/** @const */ var TSR_CS = 0x4c;\n/** @const */ var TSR_SS = 0x50;\n/** @const */ var TSR_DS = 0x54;\n/** @const */ var TSR_FS = 0x58;\n/** @const */ var TSR_GS = 0x5c;\n/** @const */ var TSR_LDT = 0x60;\n\n\n/** @const */ var FW_CFG_SIGNATURE = 0x00;\n/** @const */ var FW_CFG_RAM_SIZE = 0x03;\n/** @const */ var FW_CFG_NB_CPUS = 0x05;\n\n\n/** @const */\nvar PREFIX_MASK_REP = 0b11000;\n/** @const */\nvar PREFIX_REPZ = 0b01000;\n/** @const */\nvar PREFIX_REPNZ = 0b10000;\n\n/** @const */\nvar PREFIX_MASK_SEGMENT = 0b111;\n\n/** @const */\nvar PREFIX_MASK_OPSIZE = 0b100000;\n/** @const */\nvar PREFIX_MASK_ADDRSIZE = 0b1000000;\n\n/** @const */\nvar PREFIX_F2 = PREFIX_REPNZ; // alias\n/** @const */\nvar PREFIX_F3 = PREFIX_REPZ; // alias\n/** @const */\nvar PREFIX_66 = PREFIX_MASK_OPSIZE; // alias\n\n/** @const */\nvar MXCSR_MASK = (0xFFFF & ~(1 << 6));\n\n\n/** @const */\nvar MIXER_CHANNEL_LEFT = 0;\n/** @const */\nvar MIXER_CHANNEL_RIGHT = 1;\n/** @const */\nvar MIXER_CHANNEL_BOTH = 2;\n/** @const */\nvar MIXER_SRC_MASTER = 0;\n/** @const */\nvar MIXER_SRC_PCSPEAKER = 1;\n/** @const */\nvar MIXER_SRC_DAC = 2;\n","\"use strict\";\n\n/** @constructor */\nfunction v86(bus)\n{\n    /** @type {boolean} */\n    this.running = false;\n\n    /** @type {boolean} */\n    this.stopped = false;\n\n    /** @type {CPU} */\n    this.cpu = new CPU(bus);\n\n    this.bus = bus;\n    bus.register(\"cpu-init\", this.init, this);\n    bus.register(\"cpu-run\", this.run, this);\n    bus.register(\"cpu-stop\", this.stop, this);\n    bus.register(\"cpu-restart\", this.restart, this);\n\n    this.register_tick();\n}\n\nv86.prototype.run = function()\n{\n    if(!this.running)\n    {\n        this.bus.send(\"emulator-started\");\n        this.fast_next_tick();\n    }\n};\n\nv86.prototype.do_tick = function()\n{\n    if(this.stopped)\n    {\n        this.stopped = this.running = false;\n        this.bus.send(\"emulator-stopped\");\n        return;\n    }\n\n    this.running = true;\n    var dt = this.cpu.main_run();\n\n    if(dt <= 0)\n    {\n        this.fast_next_tick();\n    }\n    else\n    {\n        this.next_tick(dt);\n    }\n};\n\nv86.prototype.stop = function()\n{\n    if(this.running)\n    {\n        this.stopped = true;\n    }\n};\n\nv86.prototype.restart = function()\n{\n    this.cpu.reset();\n    this.cpu.load_bios();\n};\n\nv86.prototype.init = function(settings)\n{\n    this.cpu.init(settings, this.bus);\n    this.bus.send(\"emulator-ready\");\n};\n\nif(typeof setImmediate !== \"undefined\")\n{\n    /** @this {v86} */\n    var fast_next_tick = function()\n    {\n        setImmediate(() => { this.do_tick(); });\n    };\n\n    /** @this {v86} */\n    var register_tick = function() {};\n}\nelse if(typeof window !== \"undefined\" && typeof postMessage !== \"undefined\")\n{\n    // setImmediate shim for the browser.\n    // TODO: Make this deactivatable, for other applications\n    //       using postMessage\n\n    /** @const */\n    let MAGIC_POST_MESSAGE = 0xAA55;\n\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        window.postMessage(MAGIC_POST_MESSAGE, \"*\");\n    };\n\n    /** @this {v86} */\n    register_tick = function()\n    {\n        window.addEventListener(\"message\", (e) =>\n        {\n            if(e.source === window && e.data === MAGIC_POST_MESSAGE)\n            {\n                this.do_tick();\n            }\n        }, false);\n    };\n}\nelse\n{\n    /** @this {v86} */\n    fast_next_tick = function()\n    {\n        setTimeout(() => { this.do_tick(); }, 0);\n    };\n\n    /** @this {v86} */\n    register_tick = function() {};\n}\n\nv86.prototype.fast_next_tick = fast_next_tick;\nv86.prototype.register_tick = register_tick;\n\nif(typeof document !== \"undefined\" && typeof document.hidden === \"boolean\")\n{\n    /** @this {v86} */\n    var next_tick = function(t)\n    {\n        if(t < 4 || document.hidden)\n        {\n            // Avoid sleeping for 1 second (happens if page is not\n            // visible), it can break boot processes. Also don't try to\n            // sleep for less than 4ms, since the value is clamped up\n            this.fast_next_tick();\n        }\n        else\n        {\n            setTimeout(() => { this.do_tick(); }, t);\n        }\n    };\n}\nelse\n{\n    // In environments that aren't browsers, we might as well use setTimeout\n    /** @this {v86} */\n    next_tick = function(t)\n    {\n        setTimeout(() => { this.do_tick(); }, t);\n    };\n}\n\nv86.prototype.next_tick = next_tick;\n\nv86.prototype.save_state = function()\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.save_state();\n};\n\nv86.prototype.restore_state = function(state)\n{\n    // TODO: Should be implemented here, not on cpu\n    return this.cpu.restore_state(state);\n};\n\n\nif(typeof performance === \"object\" && performance.now)\n{\n    v86.microtick = function()\n    {\n        return performance.now();\n    };\n}\n//else if(typeof process === \"object\" && process.hrtime)\n//{\n//    v86.microtick = function()\n//    {\n//        var t = process.hrtime();\n//        return t[0] * 1000 + t[1] / 1e6;\n//    };\n//}\nelse\n{\n    v86.microtick = Date.now;\n}\n","\"use strict\";\n\n/** @const */\nvar CPU_LOG_VERBOSE = false;\n\n\n// Resources:\n// https://pdos.csail.mit.edu/6.828/2006/readings/i386/toc.htm\n// https://www-ssl.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html\n// http://ref.x86asm.net/geek32.html\n\n\n/** @constructor */\nfunction CPU(bus)\n{\n    /** @type {number} */\n    this.memory_size = 0;\n\n    // Note: Currently unused (degrades performance and not required by any OS\n    //       that we support)\n    this.a20_enabled = true;\n\n    this.mem_page_infos = undefined;\n\n    this.mem8 = new Uint8Array(0);\n    this.mem16 = new Uint16Array(this.mem8.buffer);\n    this.mem32s = new Int32Array(this.mem8.buffer);\n\n    this.segment_is_null = new Uint8Array(8);\n    this.segment_limits = new Uint32Array(8);\n    //this.segment_infos = new Uint32Array(8);\n    this.segment_offsets = new Int32Array(8);\n\n    /**\n     * Translation Lookaside Buffer\n     * @const\n     */\n    this.tlb_data = new Int32Array(1 << 20);\n\n    /**\n     * Information about which pages are cached in the tlb.\n     * By bit:\n     *   0 system, read\n     *   1 system, write\n     *   2 user, read\n     *   3 user, write\n     * @const\n     */\n    this.tlb_info = new Uint8Array(1 << 20);\n\n    /**\n     * Same as tlb_info, except it only contains global pages\n     * @const\n     */\n    this.tlb_info_global = new Uint8Array(1 << 20);\n\n    /**\n     * Wheter or not in protected mode\n     * @type {boolean}\n     */\n    this.protected_mode = false;\n\n    /**\n     * interrupt descriptor table\n     * @type {number}\n     */\n    this.idtr_size = 0;\n    /** @type {number} */\n    this.idtr_offset = 0;\n\n    /**\n     * global descriptor table register\n     * @type {number}\n     */\n    this.gdtr_size = 0;\n    /** @type {number} */\n    this.gdtr_offset = 0;\n\n    this.tss_size_32 = false;\n\n    /*\n     * whether or not a page fault occured\n     */\n    this.page_fault = false;\n\n    this.cr = new Int32Array(8);\n\n    /** @type {number} */\n    this.cr[0] = 0;\n    /** @type {number} */\n    this.cr[2] = 0;\n    /** @type {number} */\n    this.cr[3] = 0;\n    /** @type {number} */\n    this.cr[4] = 0;\n\n    // current privilege level\n    /** @type {number} */\n    this.cpl = 0;\n\n    // if false, pages are 4 KiB, else 4 Mib\n    /** @type {number} */\n    this.page_size_extensions = 0;\n\n    // current operand/address size\n    /** @type {boolean} */\n    this.is_32 = false;\n\n    /** @type {boolean} */\n    this.stack_size_32 = false;\n\n    /**\n     * Was the last instruction a hlt?\n     * @type {boolean}\n     */\n    this.in_hlt = false;\n\n    /** @type {number} */\n    this.last_virt_eip = 0;\n\n    /** @type {number} */\n    this.eip_phys = 0;\n\n    /** @type {number} */\n    this.last_virt_esp = 0;\n\n    /** @type {number} */\n    this.esp_phys = 0;\n\n\n    /** @type {number} */\n    this.sysenter_cs = 0;\n\n    /** @type {number} */\n    this.sysenter_esp = 0;\n\n    /** @type {number} */\n    this.sysenter_eip = 0;\n\n    /** @type {number} */\n    this.prefixes = 0;\n\n    /** @type {number} */\n    this.flags = 0;\n\n    /**\n     * bitmap of flags which are not updated in the flags variable\n     * changed by arithmetic instructions, so only relevant to arithmetic flags\n     * @type {number}\n     */\n    this.flags_changed = 0;\n\n    /**\n     * the last 2 operators and the result and size of the last arithmetic operation\n     * @type {number}\n     */\n    this.last_op1 = 0;\n    /** @type {number} */\n    this.last_op2 = 0;\n    /** @type {number} */\n    this.last_op_size = 0;\n\n    /** @type {number} */\n    this.last_add_result = 0;\n\n    /** @type {number} */\n    this.last_result = 0;\n\n    this.mul32_result = new Int32Array(2);\n    this.div32_result = new Float64Array(2);\n\n    this.tsc_offset = 0;\n\n    /** @type {number} */\n    this.modrm_byte = 0;\n\n    /** @type {number} */\n    this.phys_addr = 0;\n\n    /** @type {number} */\n    this.phys_addr_high = 0;\n\n    /** @type {!Object} */\n    this.devices = {};\n\n    this.table = [];\n\n    // paging enabled\n    /** @type {boolean} */\n    this.paging = false;\n\n    /** @type {number} */\n    this.instruction_pointer = 0;\n\n    /** @type {number} */\n    this.previous_ip = 0;\n\n    this.apic_enabled = true;\n\n    /**\n     * @type {number}\n     */\n    this.timestamp_counter = 0;\n\n    // registers\n    this.reg32s = new Int32Array(8);\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    // mm0-mm7 split up into 32 bit pairs\n    this.reg_mmxs = new Int32Array(16);\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n\n    this.reg_xmm32s = new Int32Array(8 * 4);\n    this.mxcsr = 0x1F80;\n\n    // segment registers, tr and ldtr\n    this.sreg = new Uint16Array(8);\n\n    // debug registers\n    this.dreg = new Int32Array(8);\n\n\n    // managed in io.js\n    /** @const */ this.memory_map_read8 = [];\n    /** @const */ this.memory_map_write8 = [];\n    /** @const */ this.memory_map_read32 = [];\n    /** @const */ this.memory_map_write32 = [];\n\n    /**\n     * @const\n     * @type {{main: ArrayBuffer, vga: ArrayBuffer}}\n     */\n    this.bios = {\n        main: null,\n        vga: null,\n    };\n\n    /** @type {number} */\n    this.fw_value = 0;\n\n    this.io = undefined;\n    this.fpu = undefined;\n\n    this.bus = bus;\n\n    dbg_assert(this.table16 && this.table32);\n    dbg_assert(this.table0F_16 && this.table0F_32);\n\n    this.update_operand_size();\n\n    this.tsc_offset = v86.microtick();\n\n    this.debug_init();\n\n    this.init2();\n\n    //Object.seal(this);\n}\n\nCPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.memory_size;\n    state[1] = this.segment_is_null;\n    state[2] = this.segment_offsets;\n    state[3] = this.segment_limits;\n    state[4] = this.protected_mode;\n    state[5] = this.idtr_offset;\n    state[6] = this.idtr_size;\n    state[7] = this.gdtr_offset;\n    state[8] = this.gdtr_size;\n    state[9] = this.page_fault;\n    state[10] = this.cr;\n    state[11] = this.cpl;\n    state[12] = this.page_size_extensions;\n    state[13] = this.is_32;\n\n    state[16] = this.stack_size_32;\n    state[17] = this.in_hlt;\n    state[18] = this.last_virt_eip;\n    state[19] = this.eip_phys;\n    state[20] = this.last_virt_esp;\n    state[21] = this.esp_phys;\n    state[22] = this.sysenter_cs;\n    state[23] = this.sysenter_eip;\n    state[24] = this.sysenter_esp;\n    state[25] = this.prefixes;\n    state[26] = this.flags;\n    state[27] = this.flags_changed;\n    state[28] = this.last_op1;\n    state[29] = this.last_op2;\n    state[30] = this.last_op_size;\n    state[31] = this.last_add_result;\n    state[32] = this.modrm_byte;\n\n    state[36] = this.paging;\n    state[37] = this.instruction_pointer;\n    state[38] = this.previous_ip;\n    state[39] = this.reg32s;\n    state[40] = this.sreg;\n    state[41] = this.dreg;\n    state[42] = this.mem8;\n    state[43] = this.fpu;\n\n    state[45] = this.devices.virtio;\n    state[46] = this.devices.apic;\n    state[47] = this.devices.rtc;\n    state[48] = this.devices.pci;\n    state[49] = this.devices.dma;\n    state[50] = this.devices.acpi;\n    state[51] = this.devices.hpet;\n    state[52] = this.devices.vga;\n    state[53] = this.devices.ps2;\n    state[54] = this.devices.uart;\n    state[55] = this.devices.fdc;\n    state[56] = this.devices.cdrom;\n    state[57] = this.devices.hda;\n    state[58] = this.devices.pit;\n    state[59] = this.devices.net;\n    state[60] = this.devices.pic;\n    state[61] = this.devices.sb16;\n\n    state[62] = this.a20_enabled;\n    state[63] = this.fw_value;\n\n    state[64] = this.devices.ioapic;\n\n    state[65] = this.tss_size_32;\n\n    state[66] = this.reg_mmxs;\n\n    return state;\n};\n\nCPU.prototype.set_state = function(state)\n{\n    this.memory_size = state[0];\n    this.segment_is_null = state[1];\n    this.segment_offsets = state[2];\n    this.segment_limits = state[3];\n    this.protected_mode = state[4];\n    this.idtr_offset = state[5];\n    this.idtr_size = state[6];\n    this.gdtr_offset = state[7];\n    this.gdtr_size = state[8];\n    this.page_fault = state[9];\n    this.cr = state[10];\n    this.cpl = state[11];\n    this.page_size_extensions = state[12];\n    this.is_32 = state[13];\n\n    this.stack_size_32 = state[16];\n\n    this.in_hlt = state[17];\n    this.last_virt_eip = state[18];\n    this.eip_phys = state[19];\n    this.last_virt_esp = state[20];\n    this.esp_phys = state[21];\n    this.sysenter_cs = state[22];\n    this.sysenter_eip = state[23];\n    this.sysenter_esp = state[24];\n    this.prefixes = state[25];\n\n    this.flags = state[26];\n    this.flags_changed = state[27];\n    this.last_op1 = state[28];\n    this.last_op2 = state[29];\n    this.last_op_size = state[30];\n    this.last_add_result = state[31];\n    this.modrm_byte = state[32];\n\n    this.paging = state[36];\n    this.instruction_pointer = state[37];\n    this.previous_ip = state[38];\n    this.reg32s = state[39];\n    this.sreg = state[40];\n    this.dreg = state[41];\n    this.mem8 = state[42];\n    this.fpu = state[43];\n\n    this.devices.virtio = state[45];\n    this.devices.apic = state[46];\n    this.devices.rtc = state[47];\n    this.devices.pci = state[48];\n    this.devices.dma = state[49];\n    this.devices.acpi = state[50];\n    this.devices.hpet = state[51];\n    this.devices.vga = state[52];\n    this.devices.ps2 = state[53];\n    this.devices.uart = state[54];\n    this.devices.fdc = state[55];\n    this.devices.cdrom = state[56];\n    this.devices.hda = state[57];\n    this.devices.pit = state[58];\n    this.devices.net = state[59];\n    this.devices.pic = state[60];\n    this.devices.sb16 = state[61];\n\n    this.a20_enabled = state[62];\n    this.fw_value = state[63];\n\n    this.devices.ioapic = state[64];\n\n    this.tss_size_32 = state[65];\n\n    this.reg_mmxs = state[66];\n\n    this.mem16 = new Uint16Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 1);\n    this.mem32s = new Int32Array(this.mem8.buffer, this.mem8.byteOffset, this.mem8.length >> 2);\n\n\n    this.full_clear_tlb();\n    // tsc_offset?\n\n    this.reg32 = new Uint32Array(this.reg32s.buffer);\n    this.reg16s = new Int16Array(this.reg32s.buffer);\n    this.reg16 = new Uint16Array(this.reg32s.buffer);\n    this.reg8s = new Int8Array(this.reg32s.buffer);\n    this.reg8 = new Uint8Array(this.reg32s.buffer);\n\n    this.reg_mmx = new Uint32Array(this.reg_mmxs.buffer);\n    this.reg_mmx8s = new Int8Array(this.reg_mmxs.buffer);\n    this.reg_mmx8 = new Uint8Array(this.reg_mmxs.buffer);\n    this.update_operand_size();\n};\n\n\n/**\n * @return {number} time in ms until this method should becalled again\n */\nCPU.prototype.main_run = function()\n{\n    if(this.in_hlt)\n    {\n        //if(false)\n        //{\n        //    var _t = this.hlt_loop();\n        //    var t = 0;\n        //}\n        //else\n        //{\n            var t = this.hlt_loop();\n        //}\n\n        if(this.in_hlt)\n        {\n            return t;\n        }\n    }\n\n    this.do_run();\n\n    return 0;\n};\n\nCPU.prototype.exception_cleanup = function(e)\n{\n    if(e === MAGIC_CPU_EXCEPTION)\n    {\n        // A legit CPU exception (for instance, a page fault happened)\n        // call_interrupt_vector has already been called at this point,\n        // so we just need to reset some state\n\n        this.page_fault = false;\n\n        // restore state from prefixes\n        this.clear_prefixes();\n    }\n    else\n    {\n        console.log(e);\n        console.log(e.stack);\n        //var e = new Error(e.message);\n        //Error.captureStackTrace && Error.captureStackTrace(e);\n        throw e;\n    }\n};\n\nCPU.prototype.reboot_internal = function()\n{\n    this.reset();\n    this.load_bios();\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.reset = function()\n{\n    this.a20_enabled = true;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.segment_is_null[i] = 0;\n        this.segment_limits[i] = 0;\n        //this.segment_infos = new Uint32Array(8);\n        this.segment_offsets[i] = 0;\n    }\n\n    this.full_clear_tlb();\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg32s[i] = 0;\n        this.sreg[i] = 0;\n        this.cr[i] = 0;\n        this.dreg[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_mmxs.length; i++)\n    {\n        this.reg_mmxs[i] = 0;\n    }\n\n    for(let i = 0; i < this.reg_xmm32s.length; i++)\n    {\n        this.reg_xmm32s[i] = 0;\n    }\n    this.mxcsr = 0x1F80;\n\n    this.protected_mode = false;\n\n    // http://www.sandpile.org/x86/initial.htm\n    this.idtr_size = 0;\n    this.idtr_offset = 0;\n\n    this.gdtr_size = 0;\n    this.gdtr_offset = 0;\n\n    this.page_fault = false;\n    this.cr[0] = 1 << 30 | 1 << 29 | 1 << 4;\n    this.cr[2] = 0;\n    this.cr[3] = 0;\n    this.cr[4] = 0;\n    this.dreg[6] = 0xFFFF0FF0|0;\n    this.dreg[7] = 0x400;\n    this.cpl = 0;\n    this.paging = false;\n    this.page_size_extensions = 0;\n    this.is_32 = false;\n    this.stack_size_32 = false;\n    this.prefixes = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.update_operand_size();\n\n    this.timestamp_counter = 0;\n    this.previous_ip = 0;\n    this.in_hlt = false;\n\n    this.sysenter_cs = 0;\n    this.sysenter_esp = 0;\n    this.sysenter_eip = 0;\n\n    this.flags = flags_default;\n    this.flags_changed = 0;\n\n    this.last_result = 0;\n    this.last_add_result = 0;\n    this.last_op1 = 0;\n    this.last_op2 = 0;\n    this.last_op_size = 0;\n\n    this.tsc_offset = v86.microtick();\n\n    this.instruction_pointer = 0xFFFF0;\n    this.switch_cs_real_mode(0xF000);\n\n    this.switch_seg(reg_ss, 0x30);\n    this.reg16[reg_sp] = 0x100;\n\n    if(this.devices.virtio)\n    {\n        this.devices.virtio.reset();\n    }\n\n    this.fw_value = 0;\n};\n\n/** @export */\nCPU.prototype.create_memory = function(size)\n{\n    if(size < 1024 * 1024)\n    {\n        size = 1024 * 1024;\n    }\n    else if((size | 0) < 0)\n    {\n        size = Math.pow(2, 31) - MMAP_BLOCK_SIZE;\n    }\n\n    size = ((size - 1) | (MMAP_BLOCK_SIZE - 1)) + 1 | 0;\n    dbg_assert((size | 0) > 0);\n    dbg_assert((size & MMAP_BLOCK_SIZE - 1) === 0);\n\n    this.memory_size = size;\n\n    var buffer = new ArrayBuffer(size);\n\n    this.mem8 = new Uint8Array(buffer);\n    this.mem16 = new Uint16Array(buffer);\n    this.mem32s = new Int32Array(buffer);\n};\n\nCPU.prototype.init = function(settings, device_bus)\n{\n    this.create_memory(typeof settings.memory_size === \"number\" ?\n        settings.memory_size : 1024 * 1024 * 64);\n\n    this.reset();\n\n    var io = new IO(this);\n    this.io = io;\n\n    this.bios.main = settings.bios;\n    this.bios.vga = settings.vga_bios;\n\n    this.load_bios();\n\n    var a20_byte = 0;\n\n    io.register_read(0xB3, this, function()\n    {\n        // seabios smm_relocate_and_restore\n        dbg_log(\"port 0xB3 read\");\n        return 0;\n    });\n\n    io.register_read(0x92, this, function()\n    {\n        return a20_byte;\n    });\n\n    io.register_write(0x92, this, function(out_byte)\n    {\n        a20_byte = out_byte;\n    });\n\n    io.register_read(0x511, this, function()\n    {\n        // bios config port (used by seabios and kvm-unit-test)\n        let result = this.fw_value & 0xFF;\n        this.fw_value >>>= 8;\n        return result;\n    });\n    io.register_write(0x510, this, undefined, function(value)\n    {\n        dbg_log(\"bios config port, index=\" + h(value));\n\n        if(value === FW_CFG_SIGNATURE)\n        {\n            // We could pretend to be QEMU here to control certain options in\n            // seabios, but for now this isn't needed\n            this.fw_value = 0xfab0fab0|0;\n        }\n        else if(value === FW_CFG_RAM_SIZE)\n        {\n            this.fw_value = this.memory_size;\n        }\n        else if(value === FW_CFG_NB_CPUS)\n        {\n            this.fw_value = 1;\n        }\n        else\n        {\n            dbg_assert(false, \"Unimplemented fw index: \" + h(value));\n            this.fw_value = 0;\n        }\n    });\n\n    if(DEBUG)\n    {\n        // Use by linux for port-IO delay\n        // Avoid generating tons of debug messages\n        io.register_write(0x80, this, function(out_byte)\n        {\n        });\n    }\n\n    this.devices = {};\n\n    // TODO: Make this more configurable\n    if(settings.load_devices)\n    {\n        this.devices.pic = new PIC(this);\n        this.devices.pci = new PCI(this);\n\n        if(ENABLE_ACPI)\n        {\n            this.devices.ioapic = new IOAPIC(this);\n            this.devices.apic = new APIC(this);\n            this.devices.acpi = new ACPI(this);\n        }\n\n        this.devices.rtc = new RTC(this);\n        this.fill_cmos(this.devices.rtc, settings);\n\n        this.devices.dma = new DMA(this);\n\n        if(ENABLE_HPET)\n        {\n            this.devices.hpet = new HPET(this);\n        }\n\n        this.devices.vga = new VGAScreen(this, device_bus,\n                settings.vga_memory_size || 8 * 1024 * 1024);\n\n        this.fpu = new FPU(this);\n\n        this.devices.ps2 = new PS2(this, device_bus);\n\n        this.devices.uart = new UART(this, 0x3F8, device_bus);\n\n        this.devices.fdc = new FloppyController(this, settings.fda, settings.fdb);\n\n        var ide_device_count = 0;\n\n        if(settings.hda)\n        {\n            this.devices.hda = new IDEDevice(this, settings.hda, false, ide_device_count++, device_bus);\n        }\n\n        if(settings.cdrom)\n        {\n            this.devices.cdrom = new IDEDevice(this, settings.cdrom, true, ide_device_count++, device_bus);\n        }\n\n        if(settings.hdb)\n        {\n            this.devices.hdb = new IDEDevice(this, settings.hdb, false, ide_device_count++, device_bus);\n        }\n\n        this.devices.pit = new PIT(this, device_bus);\n\n        if(settings.enable_ne2k)\n        {\n            this.devices.net = new Ne2k(this, device_bus);\n        }\n\n        if(settings.fs9p)\n        {\n            this.devices.virtio = new VirtIO(this, device_bus, settings.fs9p);\n        }\n\n        if(true)\n        {\n            this.devices.sb16 = new SB16(this, device_bus);\n        }\n    }\n\n    if(settings.multiboot)\n    {\n        dbg_assert(settings.multiboot.buffer);\n        this.load_multiboot(settings.multiboot.buffer);\n    }\n\n    if(DEBUG)\n    {\n        this.debug.init();\n    }\n};\n\nCPU.prototype.load_multiboot = function(buffer)\n{\n    // https://www.gnu.org/software/grub/manual/multiboot/multiboot.html\n\n    dbg_log(\"Trying multiboot from buffer of size \" + buffer.byteLength, LOG_CPU);\n\n    const MAGIC = 0x1BADB002;\n    const ELF_MAGIC = 0x464C457F;\n    const MULTIBOOT_HEADER_ADDRESS = 0x10000;\n    const MULTIBOOT_SEARCH_BYTES = 8192;\n\n    if(buffer.byteLength < MULTIBOOT_SEARCH_BYTES)\n    {\n        var buf32 = new Int32Array(MULTIBOOT_SEARCH_BYTES / 4);\n        new Uint8Array(buf32.buffer).set(new Uint8Array(buffer));\n    }\n    else\n    {\n        var buf32 = new Int32Array(buffer, 0, MULTIBOOT_SEARCH_BYTES / 4);\n    }\n\n    for(var offset = 0; offset < MULTIBOOT_SEARCH_BYTES; offset += 4)\n    {\n        if(buf32[offset >> 2] === MAGIC)\n        {\n            var flags = buf32[offset + 4 >> 2];\n            var checksum = buf32[offset + 8 >> 2];\n            var total = MAGIC + flags + checksum | 0;\n\n            if(total)\n            {\n                dbg_log(\"Multiboot checksum check failed\", LOG_CPU);\n                continue;\n            }\n        }\n        else\n        {\n            continue;\n        }\n\n        dbg_log(\"Multiboot magic found, flags: \" + h(flags >>> 0, 8), LOG_CPU);\n        dbg_assert((flags & ~MULTIBOOT_HEADER_ADDRESS) === 0, \"TODO\");\n\n        this.reg32s[reg_eax] = 0x2BADB002;\n\n        let multiboot_info_addr = 0x7C00;\n        this.reg32s[reg_ebx] = multiboot_info_addr;\n        this.write32(multiboot_info_addr, 0);\n\n        this.cr[0] = 1;\n        this.protected_mode = true;\n        this.flags = flags_default;\n        this.update_cs_size(true);\n        this.stack_size_32 = true;\n\n        for(var i = 0; i < 6; i++)\n        {\n            this.segment_is_null[i] = 0;\n            this.segment_offsets[i] = 0;\n            this.segment_limits[i] = 0xFFFFFFFF;\n\n            // Value doesn't matter, OS isn't allowed to reload without setting\n            // up a proper GDT\n            this.sreg[i] = 0xB002;\n        }\n\n        if(flags & MULTIBOOT_HEADER_ADDRESS)\n        {\n            dbg_log(\"Multiboot specifies its own address table\", LOG_CPU);\n\n            var header_addr = buf32[offset + 12 >> 2];\n            var load_addr = buf32[offset + 16 >> 2];\n            var load_end_addr = buf32[offset + 20 >> 2];\n            var bss_end_addr = buf32[offset + 24 >> 2];\n            var entry_addr = buf32[offset + 28 >> 2];\n\n            dbg_log(\"header=\" + h(header_addr, 8) +\n                    \" load=\" + h(load_addr, 8) +\n                    \" load_end=\" + h(load_end_addr, 8) +\n                    \" bss_end=\" + h(bss_end_addr, 8) +\n                    \" entry=\" + h(entry_addr, 8));\n\n            dbg_assert(load_addr <= header_addr);\n\n            var file_start = offset - (header_addr - load_addr);\n\n            if(load_end_addr === 0)\n            {\n                var length = undefined;\n            }\n            else\n            {\n                dbg_assert(load_end_addr >= load_addr);\n                var length = load_end_addr - load_addr;\n            }\n\n            let blob = new Uint8Array(buffer, file_start, length);\n            this.write_blob(blob, load_addr);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + entry_addr | 0;\n        }\n        else if(buf32[0] === ELF_MAGIC)\n        {\n            dbg_log(\"Multiboot image is in elf format\", LOG_CPU);\n\n            let elf = read_elf(buffer);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + elf.header.entry | 0;\n\n            for(let program of elf.program_headers)\n            {\n                if(program.type === 0)\n                {\n                    // null\n                }\n                else if(program.type === 1)\n                {\n                    // load\n\n                    // Since multiboot specifies that paging is disabled,\n                    // virtual and physical address must be equal\n                    dbg_assert(program.paddr === program.vaddr);\n                    dbg_assert(program.filesz <= program.memsz);\n\n                    let blob = new Uint8Array(buffer, program.offset, program.filesz);\n                    this.write_blob(blob, program.paddr);\n                }\n                else if(program.type === 4 ||\n                        program.type === 0x6474e550 ||\n                        program.type === 0x6474e551)\n                {\n                    // ignore for now\n                }\n                else\n                {\n                    dbg_assert(false, \"unimplemented elf section type\");\n                }\n            }\n        }\n        else\n        {\n            dbg_assert(false, \"Not a bootable multiboot format\");\n        }\n\n        // only for kvm-unit-test\n        this.io.register_write_consecutive(0xF4, this,\n            function(value)\n            {\n                console.log(\"Test exited with code \" + h(value, 2));\n                throw \"HALT\";\n            },\n            function() {},\n            function() {},\n            function() {});\n\n        // only for kvm-unit-test\n        for(let i = 0xE; i <= 0xF; i++)\n        {\n            this.io.register_write(0x2000 + i, this,\n                function(value)\n                {\n                    dbg_log(\"kvm-unit-test: Set irq \" + h(i) + \" to \" + h(value, 2));\n                    if(value)\n                    {\n                        this.device_raise_irq(i);\n                    }\n                    else\n                    {\n                        this.device_lower_irq(i);\n                    }\n                });\n        }\n\n        dbg_log(\"Starting multiboot kernel at:\", LOG_CPU);\n        this.debug.dump_state();\n        this.debug.dump_regs();\n\n        break;\n    }\n};\n\nCPU.prototype.fill_cmos = function(rtc, settings)\n{\n    var boot_order = settings.boot_order || 0x213;\n\n    // Used by seabios to determine the boot order\n    //   Nibble\n    //   1: FloppyPrio\n    //   2: HDPrio\n    //   3: CDPrio\n    //   4: BEVPrio\n    // bootflag 1, high nibble, lowest priority\n    // Low nibble: Disable floppy signature check (1)\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG1 , 1 | boot_order >> 4 & 0xF0);\n\n    // bootflag 2, both nibbles, high and middle priority\n    rtc.cmos_write(CMOS_BIOS_BOOTFLAG2, boot_order & 0xFF);\n\n    // 640k or less if less memory is used\n    rtc.cmos_write(CMOS_MEM_BASE_LOW, 640 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_BASE_HIGH, 640 >> 8);\n\n    var memory_above_1m = 0; // in k\n    if(this.memory_size >= 1024 * 1024)\n    {\n        memory_above_1m = (this.memory_size - 1024 * 1024) >> 10;\n        memory_above_1m = Math.min(memory_above_1m, 0xFFFF);\n    }\n\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_OLD_EXT_HIGH, memory_above_1m >> 8 & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_LOW, memory_above_1m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM_HIGH, memory_above_1m >> 8 & 0xFF);\n\n    var memory_above_16m = 0; // in 64k blocks\n    if(this.memory_size >= 16 * 1024 * 1024)\n    {\n        memory_above_16m = (this.memory_size - 16 * 1024 * 1024) >> 16;\n        memory_above_16m = Math.min(memory_above_16m, 0xFFFF);\n    }\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_LOW, memory_above_16m & 0xFF);\n    rtc.cmos_write(CMOS_MEM_EXTMEM2_HIGH, memory_above_16m >> 8 & 0xFF);\n\n    // memory above 4G (not supported by this emulator)\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_LOW, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_MID, 0);\n    rtc.cmos_write(CMOS_MEM_HIGHMEM_HIGH, 0);\n\n    rtc.cmos_write(CMOS_EQUIPMENT_INFO, 0x2F);\n\n    rtc.cmos_write(CMOS_BIOS_SMP_COUNT, 0);\n\n    // Used by bochs BIOS to skip the boot menu delay.\n    if (settings.fastboot) rtc.cmos_write(0x3f, 0x01);\n};\n\nCPU.prototype.load_bios = function()\n{\n    var bios = this.bios.main;\n    var vga_bios = this.bios.vga;\n\n    if(!bios)\n    {\n        dbg_log(\"Warning: No BIOS\");\n        return;\n    }\n\n    // load bios\n    var data = new Uint8Array(bios),\n        start = 0x100000 - bios.byteLength;\n\n    this.write_blob(data, start);\n\n    if(vga_bios)\n    {\n        // load vga bios\n        var vga_bios8 = new Uint8Array(vga_bios);\n\n        // older versions of seabios\n        this.write_blob(vga_bios8, 0xC0000);\n\n        // newer versions of seabios (needs to match pci rom address, see vga.js)\n        this.io.mmap_register(0xFEB00000, 0x100000,\n            function(addr)\n            {\n                addr = (addr - 0xFEB00000) | 0;\n                if(addr < vga_bios8.length)\n                {\n                    return vga_bios8[addr];\n                }\n                else\n                {\n                    return 0;\n                }\n            },\n            function(addr, value)\n            {\n                dbg_assert(false, \"Unexpected write to VGA rom\");\n            });\n    }\n    else\n    {\n        dbg_log(\"Warning: No VGA BIOS\");\n    }\n\n    // seabios expects the bios to be mapped to 0xFFF00000 also\n    this.io.mmap_register(0xFFF00000, 0x100000,\n        function(addr)\n        {\n            addr &= 0xFFFFF;\n            return this.mem8[addr];\n        }.bind(this),\n        function(addr, value)\n        {\n            addr &= 0xFFFFF;\n            this.mem8[addr] = value;\n        }.bind(this));\n};\n\nCPU.prototype.do_run = function()\n{\n    /** @type {number} */\n    var start = v86.microtick();\n\n    /** @type {number} */\n    var now = start;\n\n    // outer loop:\n    // runs cycles + timers\n    for(; now - start < TIME_PER_FRAME;)\n    {\n        this.run_hardware_timers(now);\n        this.handle_irqs();\n\n        this.do_many_cycles();\n\n        if(this.in_hlt)\n        {\n            return;\n        }\n\n        now = v86.microtick();\n    }\n};\n\nCPU.prototype.do_many_cycles = function()\n{\n    try {\n        this.do_many_cycles_unsafe();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.do_many_cycles_unsafe = function()\n{\n    // inner loop:\n    // runs only cycles\n    for(var k = LOOP_COUNTER; k--;)\n    {\n        this.cycle_internal();\n    }\n};\n\n// Some functions must not be inlined, because then more code is in the\n// deoptimized try-catch block.\n// This trick is a bit ugly, but it works without further complication.\nif(typeof window !== \"undefined\")\n{\n    window[\"__no_inline_for_closure_compiler__\"] = [\n        CPU.prototype.exception_cleanup,\n        CPU.prototype.do_many_cycles_unsafe,\n        CPU.prototype.do_many_cycles,\n    ];\n}\n\n/** @const */\nvar PROFILING = false;\n\nif(PROFILING)\n{\n    var instruction_total = new Float64Array(256);\n    var instruction_count = new Float64Array(256);\n\n    window[\"print_profiling\"] = function print_profiling()\n    {\n        var prof_instructions = [];\n        for(var i = 0; i < 256; i++) prof_instructions[i] = {\n            n: h(i, 2),\n            total: instruction_total[i],\n            count: instruction_count[i],\n            per: (instruction_total[i] / instruction_count[i]) || 0,\n        };\n\n        console.log(\"count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.count - p0.count));\n\n        console.log(\"time:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.total - p0.total));\n\n        console.log(\"time/count:\");\n        console.table(prof_instructions.sort((p0, p1) => p1.per - p0.per));\n    };\n}\n\n/**\n * execute a single instruction cycle on the cpu\n * this includes reading all prefixes and the whole instruction\n */\nCPU.prototype.cycle_internal = function()\n{\n    this.previous_ip = this.instruction_pointer;\n\n    this.timestamp_counter++;\n\n    if(PROFILING)\n    {\n        var start = performance.now();\n    }\n\n    var opcode = this.read_imm8();\n    //this.translate_address_read(this.instruction_pointer + 15|0)\n\n    if(DEBUG)\n    {\n        this.debug.logop(this.instruction_pointer - 1 >>> 0, opcode);\n    }\n\n    // call the instruction\n    this.table[opcode](this);\n\n    if(PROFILING)\n    {\n        var end = performance.now();\n        instruction_total[opcode] += end - start;\n        instruction_count[opcode]++;\n    }\n\n    if(this.flags & flag_trap)\n    {\n        // TODO\n        dbg_log(\"Trap flag: Ignored\", LOG_CPU);\n    }\n};\n\n/** @export */\nCPU.prototype.cycle = function()\n{\n    try\n    {\n        this.cycle_internal();\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.segment_prefix_op = function(sreg)\n{\n    dbg_assert(sreg <= 5);\n    this.prefixes |= sreg + 1;\n    this.run_prefix_instruction();\n    this.prefixes = 0;\n};\n\nCPU.prototype.run_prefix_instruction = function()\n{\n    if(this.is_osize_32())\n    {\n        this.table32[this.read_imm8()](this);\n    }\n    else\n    {\n        this.table16[this.read_imm8()](this);\n    }\n};\n\nCPU.prototype.hlt_loop = function()\n{\n    dbg_assert(this.flags & flag_interrupt);\n    //dbg_log(\"In HLT loop\", LOG_CPU);\n\n    this.run_hardware_timers(v86.microtick());\n    this.handle_irqs();\n\n    return 0;\n};\n\nCPU.prototype.run_hardware_timers = function(now)\n{\n    if(ENABLE_HPET)\n    {\n        var pit_time = this.devices.pit.timer(now, this.devices.hpet.legacy_mode);\n        var rtc_time = this.devices.rtc.timer(now, this.devices.hpet.legacy_mode);\n        this.devices.hpet.timer(now);\n    }\n    else\n    {\n        var pit_time = this.devices.pit.timer(now, false);\n        var rtc_time = this.devices.rtc.timer(now, false);\n    }\n\n    if(ENABLE_ACPI)\n    {\n        this.devices.acpi.timer(now);\n        this.devices.apic.timer(now);\n    }\n};\n\nCPU.prototype.clear_prefixes = function()\n{\n    this.prefixes = 0;\n};\n\nCPU.prototype.set_cr0 = function(cr0)\n{\n    //dbg_log(\"cr0 = \" + h(this.cr[0] >>> 0), LOG_CPU);\n\n    if((cr0 & (CR0_PE | CR0_PG)) === CR0_PG)\n    {\n        // cannot load PG without PE\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.cr[0] = cr0;\n\n    if(!this.fpu)\n    {\n        // if there's no FPU, keep emulation set\n        this.cr[0] |= CR0_EM;\n    }\n    this.cr[0] |= CR0_ET;\n\n    var new_paging = (this.cr[0] & CR0_PG) === CR0_PG;\n\n    dbg_assert(typeof this.paging === \"boolean\");\n    if(new_paging !== this.paging)\n    {\n        this.paging = new_paging;\n        this.full_clear_tlb();\n    }\n\n    this.protected_mode = (this.cr[0] & CR0_PE) === CR0_PE;\n};\n\nCPU.prototype.set_cr4 = function(cr4)\n{\n    if(cr4 & (1 << 11 | 1 << 12 | 1 << 15 | 1 << 16 | 1 << 19 | 0xFFC00000))\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.cr[4] ^ cr4) & CR4_PGE)\n    {\n        if(cr4 & CR4_PGE)\n        {\n            // The PGE bit has been enabled. The global TLB is\n            // still empty, so we only have to copy it over\n            this.clear_tlb();\n        }\n        else\n        {\n            // Clear the global TLB\n            this.full_clear_tlb();\n        }\n    }\n\n    this.cr[4] = cr4;\n    this.page_size_extensions = (cr4 & CR4_PSE) ? PSE_ENABLED : 0;\n\n    if(cr4 & CR4_PAE)\n    {\n        throw this.debug.unimpl(\"PAE\");\n    }\n\n    if(cr4 & 0xFFFFF900)\n    {\n        dbg_assert(false, \"Unimplemented CR4 bits: \" + h(cr4));\n        this.trigger_ud();\n    }\n\n    dbg_log(\"cr4=\" + h(cr4 >>> 0), LOG_CPU);\n};\n\nCPU.prototype.cpl_changed = function()\n{\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.read_imm8 = function()\n{\n    if((this.instruction_pointer & ~0xFFF) ^ this.last_virt_eip)\n    {\n        this.eip_phys = this.translate_address_read(this.instruction_pointer) ^ this.instruction_pointer;\n        this.last_virt_eip = this.instruction_pointer & ~0xFFF;\n    }\n\n    var data8 = this.read8(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 1 | 0;\n\n    return data8;\n};\n\nCPU.prototype.read_imm8s = function()\n{\n    return this.read_imm8() << 24 >> 24;\n};\n\nCPU.prototype.read_imm16 = function()\n{\n    // Two checks in one comparison:\n    //    1. Did the high 20 bits of eip change\n    // or 2. Are the low 12 bits of eip 0xFFF (and this read crosses a page boundary)\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFE)\n    {\n        return this.read_imm8() | this.read_imm8() << 8;\n    }\n\n    var data16 = this.read16(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 2 | 0;\n\n    return data16;\n};\n\nCPU.prototype.read_imm32s = function()\n{\n    // Analogue to the above comment\n    if(((this.instruction_pointer ^ this.last_virt_eip) >>> 0) > 0xFFC)\n    {\n        return this.read_imm16() | this.read_imm16() << 16;\n    }\n\n    var data32 = this.read32s(this.eip_phys ^ this.instruction_pointer);\n    this.instruction_pointer = this.instruction_pointer + 4 | 0;\n\n    return data32;\n};\n\n/*\n * Create an internal data unit to represent 64 bits of data\n */\nCPU.prototype.create_atom64s = function(low, high)\n{\n    let data = new Int32Array(2);\n    data[0] = low;\n    data[1] = high;\n    return data;\n};\n\nCPU.prototype.create_atom128s = function(d0, d1, d2, d3)\n{\n    let data = new Int32Array(4);\n    data[0] = d0;\n    data[1] = d1;\n    data[2] = d2;\n    data[3] = d3;\n    return data;\n}\n\nCPU.prototype.read_modrm_byte = function()\n{\n    this.modrm_byte = this.read_imm8();\n};\n\nCPU.prototype.read_op0F = CPU.prototype.read_imm8;\nCPU.prototype.read_sib = CPU.prototype.read_imm8;\nCPU.prototype.read_op8 = CPU.prototype.read_imm8;\nCPU.prototype.read_op8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_op16 = CPU.prototype.read_imm16;\nCPU.prototype.read_op32s = CPU.prototype.read_imm32s;\nCPU.prototype.read_disp8 = CPU.prototype.read_imm8;\nCPU.prototype.read_disp8s = CPU.prototype.read_imm8s;\nCPU.prototype.read_disp16 = CPU.prototype.read_imm16;\nCPU.prototype.read_disp32s = CPU.prototype.read_imm32s;\n\nCPU.prototype.init2 = function () {};\nCPU.prototype.branch_taken = function () {};\nCPU.prototype.branch_not_taken = function () {};\nCPU.prototype.diverged = function () {};\n\nCPU.prototype.modrm_resolve = function(modrm_byte)\n{\n    dbg_assert(modrm_byte < 0xC0);\n\n    return (this.is_asize_32() ? this.modrm_table32 : this.modrm_table16)[modrm_byte](this);\n};\n\nCPU.prototype.sib_resolve = function(mod)\n{\n    return this.sib_table[this.read_sib()](this, mod);\n};\n\nCPU.prototype.clear_instruction_cache = function() {};\n\n// read word from a page boundary, given 2 physical addresses\nCPU.prototype.virt_boundary_read16 = function(low, high)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    return this.read8(low) | this.read8(high) << 8;\n};\n\n// read doubleword from a page boundary, given 2 addresses\nCPU.prototype.virt_boundary_read32s = function(low, high)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    var mid;\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            mid = this.read_aligned16(high - 2 >> 1);\n        }\n        else\n        {\n            // 0xFFD\n            mid = this.read_aligned16(low + 1 >> 1);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        mid = this.virt_boundary_read16(low + 1 | 0, high - 1 | 0);\n    }\n\n    return this.read8(low) | mid << 8 | this.read8(high) << 24;\n};\n\nCPU.prototype.virt_boundary_write16 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) === 0xFFF);\n    dbg_assert((high & 0xFFF) === 0);\n\n    this.write8(low, value);\n    this.write8(high, value >> 8);\n};\n\nCPU.prototype.virt_boundary_write32 = function(low, high, value)\n{\n    dbg_assert((low & 0xFFF) >= 0xFFD);\n    dbg_assert((high - 3 & 0xFFF) === (low & 0xFFF));\n\n    this.write8(low, value);\n    this.write8(high, value >> 24);\n\n    if(low & 1)\n    {\n        if(low & 2)\n        {\n            // 0xFFF\n            this.write8(high - 2, value >> 8);\n            this.write8(high - 1, value >> 16);\n        }\n        else\n        {\n            // 0xFFD\n            this.write8(low + 1 | 0, value >> 8);\n            this.write8(low + 2 | 0, value >> 16);\n        }\n    }\n    else\n    {\n        // 0xFFE\n        this.write8(low + 1 | 0, value >> 8);\n        this.write8(high - 1, value >> 16);\n    }\n};\n\n// safe_read, safe_write\n// read or write byte, word or dword to the given *virtual* address,\n// and be safe on page boundaries\n\nCPU.prototype.safe_read8 = function(addr)\n{\n    dbg_assert(addr < 0x80000000);\n    return this.read8(this.translate_address_read(addr));\n};\n\nCPU.prototype.safe_read16 = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) === 0xFFF)\n    {\n        return this.safe_read8(addr) | this.safe_read8(addr + 1 | 0) << 8;\n    }\n    else\n    {\n        return this.read16(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read32s = function(addr)\n{\n    if(this.paging && (addr & 0xFFF) >= 0xFFD)\n    {\n        return this.safe_read16(addr) | this.safe_read16(addr + 2 | 0) << 16;\n    }\n    else\n    {\n        return this.read32s(this.translate_address_read(addr));\n    }\n};\n\nCPU.prototype.safe_read64s = function(addr)\n{\n    let data = this.create_atom64s(0, 0);\n    if(this.paging && (addr & 0xFFF) >= 0xFF9)\n    {\n        data[0] = this.safe_read32s(addr);\n        data[1] = this.safe_read32s(addr + 4 | 0);\n    }\n    else\n    {\n        data[0] = this.read32s(this.translate_address_read(addr));\n        data[1] = this.read32s(this.translate_address_read(addr + 4 | 0));\n    }\n    return data;\n};\n\nCPU.prototype.safe_read128s_aligned = function(addr)\n{\n    dbg_assert((addr & 0xF) === 0);\n    let phys = this.translate_address_read(addr);\n    return this.create_atom128s(\n        this.read32s(phys),\n        this.read32s(phys + 4 | 0),\n        this.read32s(phys + 8 | 0),\n        this.read32s(phys + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_read128s_unaligned = function(addr)\n{\n    return this.create_atom128s(\n        this.safe_read32s(addr),\n        this.safe_read32s(addr + 4 | 0),\n        this.safe_read32s(addr + 8 | 0),\n        this.safe_read32s(addr + 12 | 0)\n    );\n};\n\nCPU.prototype.safe_write8 = function(addr, value)\n{\n    dbg_assert(addr < 0x80000000);\n    this.write8(this.translate_address_write(addr), value);\n};\n\nCPU.prototype.safe_write16 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) === 0xFFF)\n    {\n        this.virt_boundary_write16(phys_low, this.translate_address_write(addr + 1 | 0), value);\n    }\n    else\n    {\n        this.write16(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write32 = function(addr, value)\n{\n    var phys_low = this.translate_address_write(addr);\n\n    if((addr & 0xFFF) >= 0xFFD)\n    {\n        // XXX\n        this.virt_boundary_write32(phys_low, this.translate_address_write(addr + 3 & ~3) | (addr + 3) & 3, value);\n    }\n    else\n    {\n        this.write32(phys_low, value);\n    }\n};\n\nCPU.prototype.safe_write64 = function(addr, low, high)\n{\n    this.writable_or_pagefault(addr, 8);\n    this.safe_write32(addr, low);\n    this.safe_write32(addr + 4 | 0, high);\n};\n\nCPU.prototype.safe_write128 = function(addr, d0, d1, d2, d3)\n{\n    this.writable_or_pagefault(addr, 16);\n    this.safe_write32(addr, d0);\n    this.safe_write32(addr + 4 | 0, d1);\n    this.safe_write32(addr + 8 | 0, d2);\n    this.safe_write32(addr + 12 | 0, d3);\n};\n\n\n// read 2 or 4 byte from ip, depending on address size attribute\nCPU.prototype.read_moffs = function()\n{\n    if(this.is_asize_32())\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op32s() | 0;\n    }\n    else\n    {\n        return this.get_seg_prefix(reg_ds) + this.read_op16() | 0;\n    }\n};\n\nCPU.prototype.getiopl = function()\n{\n    return this.flags >> 12 & 3;\n};\n\nCPU.prototype.vm86_mode = function()\n{\n    return !!(this.flags & flag_vm);\n};\n\nCPU.prototype.get_eflags = function()\n{\n    return (this.flags & ~flags_all) | !!this.getcf() | !!this.getpf() << 2 | !!this.getaf() << 4 |\n                                  !!this.getzf() << 6 | !!this.getsf() << 7 | !!this.getof() << 11;\n};\n\n/**\n * Update the flags register depending on iopl and cpl\n */\nCPU.prototype.update_eflags = function(new_flags)\n{\n    var dont_update = flag_rf | flag_vm | flag_vip | flag_vif,\n        clear = ~flag_vip & ~flag_vif & flags_mask;\n\n    if(this.flags & flag_vm)\n    {\n        // other case needs to be handled in popf or iret\n        dbg_assert(this.getiopl() === 3);\n\n        dont_update |= flag_iopl;\n\n        // don't clear vip or vif\n        clear |= flag_vip | flag_vif;\n    }\n    else\n    {\n        if(!this.protected_mode) dbg_assert(this.cpl === 0);\n\n        if(this.cpl)\n        {\n            // cpl > 0\n            // cannot update iopl\n            dont_update |= flag_iopl;\n\n            if(this.cpl > this.getiopl())\n            {\n                // cpl > iopl\n                // cannot update interrupt flag\n                dont_update |= flag_interrupt;\n            }\n        }\n    }\n\n    this.flags = (new_flags ^ ((this.flags ^ new_flags) & dont_update)) & clear | flags_default;\n\n    this.flags_changed = 0;\n};\n\nCPU.prototype.get_stack_reg = function()\n{\n    if(this.stack_size_32)\n    {\n        return this.reg32s[reg_esp];\n    }\n    else\n    {\n        return this.reg16[reg_sp];\n    }\n};\n\nCPU.prototype.set_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] = value;\n    }\n    else\n    {\n        this.reg16[reg_sp] = value;\n    }\n};\n\nCPU.prototype.adjust_stack_reg = function(value)\n{\n    if(this.stack_size_32)\n    {\n        this.reg32s[reg_esp] += value;\n    }\n    else\n    {\n        this.reg16[reg_sp] += value;\n    }\n};\n\nCPU.prototype.get_stack_pointer = function(mod)\n{\n    if(this.stack_size_32)\n    {\n        return this.get_seg(reg_ss) + this.reg32s[reg_esp] + mod | 0;\n    }\n    else\n    {\n        return this.get_seg(reg_ss) + (this.reg16[reg_sp] + mod & 0xFFFF) | 0;\n    }\n};\n\n/*\n * returns the \"real\" instruction pointer,\n * without segment offset\n */\nCPU.prototype.get_real_eip = function()\n{\n    return this.instruction_pointer - this.get_seg(reg_cs) | 0;\n};\n\nCPU.prototype.call_interrupt_vector = function(interrupt_nr, is_software_int, error_code)\n{\n    //dbg_log(\"int \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int \" + h(interrupt_nr) + \" start\" +\n        \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware)\");\n    CPU_LOG_VERBOSE && this.debug.dump_regs();\n\n    this.debug.debug_interrupt(interrupt_nr);\n\n    dbg_assert(error_code === false || typeof error_code === \"number\");\n\n    // we have to leave hlt_loop at some point, this is a\n    // good place to do it\n    //this.in_hlt && dbg_log(\"Leave HLT loop\", LOG_CPU);\n    this.in_hlt = false;\n\n    if(this.protected_mode)\n    {\n        if(this.vm86_mode() && (this.cr[4] & CR4_VME))\n        {\n            throw this.debug.unimpl(\"VME\");\n        }\n\n        if(this.vm86_mode() && is_software_int && this.getiopl() < 3)\n        {\n            dbg_log(\"call_interrupt_vector #GP. vm86 && software int && iopl < 3\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if((interrupt_nr << 3 | 7) > this.idtr_size)\n        {\n            dbg_log(interrupt_nr, LOG_CPU);\n            dbg_trace(LOG_CPU);\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var addr = this.idtr_offset + (interrupt_nr << 3) | 0;\n        dbg_assert((addr & 0xFFF) < 0xFF8);\n\n        if(this.paging)\n        {\n            addr = this.translate_address_system_read(addr);\n        }\n\n        var base = this.read16(addr) | this.read16(addr + 6 | 0) << 16;\n        var selector = this.read16(addr + 2 | 0);\n        var access = this.read8(addr + 5 | 0);\n        var dpl = access >> 5 & 3;\n        var type = access & 31;\n\n        if((access & 0x80) === 0)\n        {\n            // present bit not set\n            throw this.debug.unimpl(\"#NP handler\");\n        }\n\n        if(is_software_int && dpl < this.cpl)\n        {\n            dbg_log(\"#gp software interrupt (\" + h(interrupt_nr, 2) + \") and dpl < cpl\", LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(interrupt_nr << 3 | 2);\n        }\n\n        if(type === 5)\n        {\n            // task gate\n            dbg_log(\"interrupt to task gate: int=\" + h(interrupt_nr, 2) + \" sel=\" + h(selector, 4) + \" dpl=\" + dpl, LOG_CPU);\n            dbg_trace(LOG_CPU);\n\n            this.do_task_switch(selector, error_code);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n            return;\n        }\n\n        if((type & ~1 & ~8) !== 6)\n        {\n            // invalid type\n            dbg_trace(LOG_CPU);\n            dbg_log(\"invalid type: \" + h(type));\n            dbg_log(h(addr) + \" \" + h(base >>> 0) + \" \" + h(selector));\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        var is_trap = (type & 1) === 1;\n        var is_16 = (type & 8) === 0;\n\n        var info = this.lookup_segment_selector(selector);\n\n        dbg_assert((base >>> 0) <= info.effective_limit);\n        dbg_assert(info.is_valid);\n\n        if(info.is_null)\n        {\n            dbg_log(\"is null\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_executable || info.dpl > this.cpl)\n        {\n            dbg_log(\"not exec\");\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n        if(!info.is_present)\n        {\n            // kvm-unit-test\n            dbg_log(\"not present\");\n            this.trigger_np(interrupt_nr << 3 | 2);\n        }\n\n        var old_flags = this.get_eflags();\n\n        //dbg_log(\"interrupt \" + h(interrupt_nr, 2) + \" (\" + (is_software_int ? \"soft\" : \"hard\") + \"ware) from cpl=\" + this.cpl + \" vm=\" + (this.flags & flag_vm) + \" cs:eip=\" + h(this.sreg[reg_cs], 4) + \":\" + h(this.get_real_eip(), 8) + \" to cpl=\"\n\n        if(!info.dc_bit && info.dpl < this.cpl)\n        {\n            // inter privilege level interrupt\n            // interrupt from vm86 mode\n\n            //dbg_log(\"Inter privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) + \" trap=\" + is_trap + \" 16bit=\" + is_16, LOG_CPU);\n            //this.debug.dump_regs();\n            var tss_stack_addr = this.get_tss_stack_addr(info.dpl);\n\n            if(this.tss_size_32)\n            {\n                var new_esp = this.read32s(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 4 | 0);\n            }\n            else\n            {\n                var new_esp = this.read16(tss_stack_addr);\n                var new_ss = this.read16(tss_stack_addr + 2 | 0);\n            }\n            var ss_info = this.lookup_segment_selector(new_ss);\n\n            // Disabled: Incorrect handling of direction bit\n            // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n            //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n            //    debugger;\n            //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n            dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n            if(ss_info.is_null)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.rpl !== info.dpl) // xxx: 0 in v86 mode\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(ss_info.dpl !== info.dpl || !ss_info.rw_bit)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n            if(!ss_info.is_present)\n            {\n                throw this.debug.unimpl(\"#TS handler\");\n            }\n\n            var old_esp = this.reg32s[reg_esp];\n            var old_ss = this.sreg[reg_ss];\n\n            if(old_flags & flag_vm)\n            {\n                //dbg_log(\"return from vm86 mode\");\n                //this.debug.dump_regs();\n                dbg_assert(info.dpl === 0, \"switch to non-0 dpl from vm86 mode\");\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (5 + (error_code !== false) + 4 * ((old_flags & flag_vm) === flag_vm));\n            var new_stack_pointer = ss_info.base + (ss_info.size ? new_esp - stack_space : (new_esp - stack_space & 0xFFFF));\n\n            // XXX: with new cpl or with cpl 0?\n            this.translate_address_system_write(new_stack_pointer);\n            this.translate_address_system_write(ss_info.base + new_esp - 1);\n\n            // no exceptions below\n\n            this.cpl = info.dpl;\n            this.cpl_changed();\n\n            this.update_cs_size(info.size);\n\n            this.flags &= ~flag_vm & ~flag_rf;\n\n            this.switch_seg(reg_ss, new_ss);\n            this.set_stack_reg(new_esp);\n\n            if(old_flags & flag_vm)\n            {\n                if(is_16)\n                {\n                    dbg_assert(false);\n                }\n                else\n                {\n                    this.push32(this.sreg[reg_gs]);\n                    this.push32(this.sreg[reg_fs]);\n                    this.push32(this.sreg[reg_ds]);\n                    this.push32(this.sreg[reg_es]);\n                }\n            }\n\n            if(is_16)\n            {\n                this.push16(old_ss);\n                this.push16(old_esp);\n            }\n            else\n            {\n                this.push32(old_ss);\n                this.push32(old_esp);\n            }\n        }\n        else if(info.dc_bit || info.dpl === this.cpl)\n        {\n            // intra privilege level interrupt\n\n            //dbg_log(\"Intra privilege interrupt gate=\" + h(selector, 4) + \":\" + h(base >>> 0, 8) +\n            //        \" trap=\" + is_trap + \" 16bit=\" + is_16 +\n            //        \" cpl=\" + this.cpl + \" dpl=\" + info.dpl + \" conforming=\" + +info.dc_bit, LOG_CPU);\n            //this.debug.dump_regs();\n\n            if(this.flags & flag_vm)\n            {\n                dbg_assert(false, \"check error code\");\n                this.trigger_gp(selector & ~3);\n            }\n\n            var stack_space = (is_16 ? 2 : 4) * (3 + (error_code !== false));\n\n            // XXX: with current cpl or with cpl 0?\n            this.writable_or_pagefault(this.get_stack_pointer(-stack_space), stack_space);\n\n            // no exceptions below\n        }\n        else\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        if(is_16)\n        {\n            this.push16(old_flags);\n            this.push16(this.sreg[reg_cs]);\n            this.push16(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push16(error_code);\n            }\n\n            base &= 0xFFFF;\n        }\n        else\n        {\n            this.push32(old_flags);\n            this.push32(this.sreg[reg_cs]);\n            this.push32(this.get_real_eip());\n\n            if(error_code !== false)\n            {\n                this.push32(error_code);\n            }\n        }\n\n        if(old_flags & flag_vm)\n        {\n            this.switch_seg(reg_gs, 0);\n            this.switch_seg(reg_fs, 0);\n            this.switch_seg(reg_ds, 0);\n            this.switch_seg(reg_es, 0);\n        }\n\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n        dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n        this.update_cs_size(info.size);\n\n        this.segment_limits[reg_cs] = info.effective_limit;\n        this.segment_offsets[reg_cs] = info.base;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + base | 0;\n\n        this.flags &= ~flag_nt & ~flag_vm & ~flag_rf & ~flag_trap;\n\n        if(!is_trap)\n        {\n            // clear int flag for interrupt gates\n            this.flags &= ~flag_interrupt;\n        }\n        else\n        {\n            if(!this.page_fault) // XXX\n            {\n                this.handle_irqs();\n            }\n        }\n    }\n    else\n    {\n        // call 4 byte cs:ip interrupt vector from ivt at cpu.memory 0\n\n        var index = interrupt_nr << 2;\n        var new_ip = this.read16(index);\n        var new_cs = this.read16(index + 2 | 0);\n\n        // push flags, cs:ip\n        this.push16(this.get_eflags());\n        this.push16(this.sreg[reg_cs]);\n        this.push16(this.get_real_eip());\n\n        this.flags &= ~flag_interrupt;\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = this.get_seg(reg_cs) + new_ip | 0;\n    }\n\n    //dbg_log(\"int to:\", LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"int end\");\n};\n\nCPU.prototype.iret16 = function()\n{\n    this.iret(true);\n};\n\nCPU.prototype.iret32 = function()\n{\n    this.iret(false);\n};\n\nCPU.prototype.iret = function(is_16)\n{\n    //dbg_log(\"iret is_16=\" + is_16, LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" start\");\n    //this.debug.dump_regs();\n\n    if(this.vm86_mode() && this.getiopl() < 3)\n    {\n        // vm86 mode, iopl != 3\n        dbg_log(\"#gp iret vm86 mode, iopl != 3\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(is_16)\n    {\n        var new_eip = this.safe_read16(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(2));\n        var new_flags = this.safe_read16(this.get_stack_pointer(4));\n    }\n    else\n    {\n        var new_eip = this.safe_read32s(this.get_stack_pointer(0));\n        var new_cs = this.safe_read16(this.get_stack_pointer(4));\n        var new_flags = this.safe_read32s(this.get_stack_pointer(8));\n    }\n\n    if(!this.protected_mode || (this.vm86_mode() && this.getiopl() === 3))\n    {\n        if(new_eip & 0xFFFF0000)\n        {\n            throw this.debug.unimpl(\"#GP handler\");\n        }\n\n        this.switch_cs_real_mode(new_cs);\n        this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n            this.adjust_stack_reg(3 * 2);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n            this.adjust_stack_reg(3 * 4);\n        }\n\n        //dbg_log(\"iret32 to:\", LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n\n        this.handle_irqs();\n        return;\n    }\n\n    dbg_assert(!this.vm86_mode());\n\n    if(this.flags & flag_nt)\n    {\n        if(DEBUG) throw this.debug.unimpl(\"nt\");\n        this.trigger_gp(0);\n    }\n\n    if(new_flags & flag_vm)\n    {\n        if(this.cpl === 0)\n        {\n            // return to virtual 8086 mode\n\n            // vm86 cannot be set in 16 bit flag\n            dbg_assert(!is_16);\n\n            dbg_assert((new_eip & ~0xFFFF) === 0);\n\n            //dbg_log(\"in vm86 mode now \" +\n            //        \" cs:eip=\" + h(new_cs, 4) + \":\" + h(this.instruction_pointer >>> 0, 8) +\n            //        \" iopl=\" + this.getiopl() + \" flags=\" + h(new_flags, 8), LOG_CPU);\n\n\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n\n            var new_es = this.safe_read16(this.get_stack_pointer(20));\n            var new_ds = this.safe_read16(this.get_stack_pointer(24));\n            var new_fs = this.safe_read16(this.get_stack_pointer(28));\n            var new_gs = this.safe_read16(this.get_stack_pointer(32));\n\n            // no exceptions below\n\n            this.update_eflags(new_flags);\n            this.flags |= flag_vm;\n\n            this.switch_cs_real_mode(new_cs);\n            this.instruction_pointer = (new_eip & 0xFFFF) + this.get_seg(reg_cs) | 0;\n\n            this.switch_seg(reg_es, new_es);\n            this.switch_seg(reg_ds, new_ds);\n            this.switch_seg(reg_fs, new_fs);\n            this.switch_seg(reg_gs, new_gs);\n\n            this.adjust_stack_reg(9 * 4); // 9 dwords: eip, cs, flags, esp, ss, es, ds, fs, gs\n\n            this.reg32s[reg_esp] = temp_esp;\n            this.switch_seg(reg_ss, temp_ss);\n\n            this.cpl = 3;\n            this.cpl_changed();\n\n            this.update_cs_size(false);\n\n            //dbg_log(\"iret32 to:\", LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state(\"iret end\");\n            //this.debug.dump_regs();\n\n            return;\n        }\n        else\n        {\n            dbg_log(\"vm86 flag ignored because cpl != 0\", LOG_CPU);\n            new_flags &= ~flag_vm;\n        }\n    }\n\n    // protected mode return\n\n    var info = this.lookup_segment_selector(new_cs);\n\n    dbg_assert(info.is_valid);\n    dbg_assert((new_eip >>> 0) <= info.effective_limit);\n\n    if(info.is_null)\n    {\n        throw this.debug.unimpl(\"is null\");\n    }\n    if(!info.is_present)\n    {\n        throw this.debug.unimpl(\"not present\");\n    }\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"not exec\");\n    }\n    if(info.rpl < this.cpl)\n    {\n        throw this.debug.unimpl(\"rpl < cpl\");\n    }\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        throw this.debug.unimpl(\"conforming and dpl > rpl\");\n    }\n\n    if(!info.dc_bit && info.rpl !== info.dpl)\n    {\n        dbg_log(\"#gp iret: non-conforming cs and rpl != dpl, dpl=\" + info.dpl + \" rpl=\" + info.rpl, LOG_CPU);\n        this.trigger_gp(new_cs & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        // outer privilege return\n        if(is_16)\n        {\n            var temp_esp = this.safe_read16(this.get_stack_pointer(6));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(8));\n        }\n        else\n        {\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(12));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(16));\n        }\n\n        var ss_info = this.lookup_segment_selector(temp_ss);\n        var new_cpl = info.rpl;\n\n        if(ss_info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!ss_info.is_valid ||\n           ss_info.is_system ||\n           ss_info.rpl !== new_cpl ||\n           !ss_info.is_writable ||\n           ss_info.dpl !== new_cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(temp_ss & ~3);\n        }\n\n        if(!ss_info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(temp_ss, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(temp_ss & ~3);\n        }\n\n        // no exceptions below\n\n        if(is_16)\n        {\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.update_eflags(new_flags);\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        //dbg_log(\"outer privilege return: from=\" + this.cpl + \" to=\" + info.rpl + \" ss:esp=\" + h(temp_ss, 4) + \":\" + h(temp_esp >>> 0, 8), LOG_CPU);\n\n        this.switch_seg(reg_ss, temp_ss);\n\n        this.set_stack_reg(temp_esp);\n\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n\n\n        // XXX: Set segment to 0 if it's not usable in the new cpl\n        // XXX: Use cached segment information\n        //var ds_info = this.lookup_segment_selector(this.sreg[reg_ds]);\n        //if(this.cpl > ds_info.dpl && (!ds_info.is_executable || !ds_info.dc_bit)) this.switch_seg(reg_ds, 0);\n        // ...\n    }\n    else if(info.rpl === this.cpl)\n    {\n        // same privilege return\n        // no exceptions below\n        if(is_16)\n        {\n            this.adjust_stack_reg(3 * 2);\n            this.update_eflags(new_flags | this.flags & ~0xFFFF);\n        }\n        else\n        {\n            this.adjust_stack_reg(3 * 4);\n            this.update_eflags(new_flags);\n        }\n\n        // update vip and vif, which are not changed by update_eflags\n        if(this.cpl === 0)\n        {\n            this.flags = this.flags & ~flag_vif & ~flag_vip | (new_flags & (flag_vif | flag_vip));\n        }\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n\n    this.sreg[reg_cs] = new_cs;\n    dbg_assert((new_cs & 3) === this.cpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n\n    this.instruction_pointer = new_eip + this.get_seg(reg_cs) | 0;\n\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"iret\" + (is_16 ? \"16\" : \"32\") + \" end\");\n\n    this.handle_irqs();\n};\n\nCPU.prototype.switch_cs_real_mode = function(selector)\n{\n    dbg_assert(!this.protected_mode || this.vm86_mode());\n\n    this.sreg[reg_cs] = selector;\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_offsets[reg_cs] = selector << 4;\n};\n\nCPU.prototype.far_return = function(eip, selector, stack_adjust)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far return eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4) + \" stack_adjust=\" + h(stack_adjust), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret start\");\n\n    if(!this.protected_mode)\n    {\n        dbg_assert(!this.is_32);\n        //dbg_assert(!this.stack_size_32);\n    }\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        this.adjust_stack_reg(2 * (this.is_osize_32() ? 4 : 2) + stack_adjust);\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(false, \"is system in far return\");\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_executable)\n    {\n        dbg_log(\"non-executable cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.rpl < this.cpl)\n    {\n        dbg_log(\"cs rpl < cpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        dbg_trace(LOG_CPU);\n        this.trigger_np(selector & ~3);\n    }\n\n    if(info.rpl > this.cpl)\n    {\n        dbg_log(\"far return privilege change cs: \" + h(selector) + \" from=\" + this.cpl + \" to=\" + info.rpl + \" is_16=\" + this.is_osize_32(), LOG_CPU);\n\n        if(this.is_osize_32())\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 8))))\n            var temp_esp = this.safe_read32s(this.get_stack_pointer(stack_adjust + 8));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 12));\n        }\n        else\n        {\n            //dbg_log(\"esp read from \" + h(this.translate_address_system_read(this.get_stack_pointer(stack_adjust + 4))));\n            var temp_esp = this.safe_read16(this.get_stack_pointer(stack_adjust + 4));\n            //dbg_log(\"esp=\" + h(temp_esp));\n            var temp_ss = this.safe_read16(this.get_stack_pointer(stack_adjust + 6));\n        }\n\n        this.cpl = info.rpl;\n        this.cpl_changed();\n\n        // XXX: Can raise, conditions should be checked before side effects\n        this.switch_seg(reg_ss, temp_ss);\n        this.set_stack_reg(temp_esp + stack_adjust);\n\n        //if(this.is_osize_32())\n        //{\n        //    this.adjust_stack_reg(2 * 4);\n        //}\n        //else\n        //{\n        //    this.adjust_stack_reg(2 * 2);\n        //}\n\n        //throw this.debug.unimpl(\"privilege change\");\n\n        //this.adjust_stack_reg(stack_adjust);\n    }\n    else\n    {\n        if(this.is_osize_32())\n        {\n            this.adjust_stack_reg(2 * 4 + stack_adjust);\n        }\n        else\n        {\n            this.adjust_stack_reg(2 * 2 + stack_adjust);\n        }\n    }\n\n    //dbg_assert(this.cpl === info.dpl);\n\n    this.update_cs_size(info.size);\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    //this.segment_infos[reg_cs] = 0; // TODO\n\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = selector;\n\n    dbg_assert((selector & 3) === this.cpl);\n\n    this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n\n    //dbg_log(\"far return to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far ret end\");\n};\n\nCPU.prototype.far_jump = function(eip, selector, is_call)\n{\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" eip=\" + h(eip >>> 0, 8) + \" cs=\" + h(selector, 4), LOG_CPU);\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call]);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n        this.switch_cs_real_mode(selector);\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        dbg_log(\"#gp null cs\", LOG_CPU);\n        this.trigger_gp(0);\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"#gp invalid cs: \" + h(selector), LOG_CPU);\n        this.trigger_gp(selector & ~3);\n    }\n\n    if(info.is_system)\n    {\n        dbg_assert(is_call, \"TODO: Jump\");\n\n        dbg_log(\"system type cs: \" + h(selector), LOG_CPU);\n\n        if(info.type === 0xC || info.type === 4)\n        {\n            // call gate\n            var is_16 = info.type === 4;\n\n            if(info.dpl < this.cpl || info.dpl < info.rpl)\n            {\n                dbg_log(\"#gp cs gate dpl < cpl or dpl < rpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n\n            if(!info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in gate cs sel=\" + h(selector, 4), LOG_CPU);\n                this.trigger_np(selector & ~3);\n            }\n\n            var cs_selector = info.raw0 >>> 16;\n            var cs_info = this.lookup_segment_selector(cs_selector);\n\n            if(cs_info.is_null)\n            {\n                dbg_log(\"#gp null cs\", LOG_CPU);\n                this.trigger_gp(0);\n            }\n\n            if(!cs_info.is_valid)\n            {\n                dbg_log(\"#gp invalid cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_executable)\n            {\n                dbg_log(\"#gp non-executable cs: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(cs_info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp dpl > cpl: \" + h(cs_selector), LOG_CPU);\n                this.trigger_gp(cs_selector & ~3);\n            }\n\n            if(!cs_info.is_present)\n            {\n                dbg_log(\"#NP for loading not-present in cs sel=\" + h(cs_selector, 4), LOG_CPU);\n                this.trigger_np(cs_selector & ~3);\n            }\n\n            if(!cs_info.dc_bit && cs_info.dpl < this.cpl)\n            {\n                dbg_log(\"more privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl);\n                var tss_stack_addr = this.get_tss_stack_addr(cs_info.dpl);\n\n                if(this.tss_size_32)\n                {\n                    var new_esp = this.read32s(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 4 | 0);\n                }\n                else\n                {\n                    var new_esp = this.read16(tss_stack_addr);\n                    var new_ss = this.read16(tss_stack_addr + 2 | 0);\n                }\n                var ss_info = this.lookup_segment_selector(new_ss);\n\n                // Disabled: Incorrect handling of direction bit\n                // See http://css.csail.mit.edu/6.858/2014/readings/i386/s06_03.htm\n                //if(!((new_esp >>> 0) <= ss_info.effective_limit))\n                //    debugger;\n                //dbg_assert((new_esp >>> 0) <= ss_info.effective_limit);\n                dbg_assert(ss_info.is_valid && !ss_info.is_system && ss_info.is_writable);\n\n                if(ss_info.is_null)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.rpl !== cs_info.dpl) // xxx: 0 in v86 mode\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(ss_info.dpl !== cs_info.dpl || !ss_info.rw_bit)\n                {\n                    throw this.debug.unimpl(\"#TS handler\");\n                }\n                if(!ss_info.is_present)\n                {\n                    throw this.debug.unimpl(\"#SS handler\");\n                }\n\n                var parameter_count = info.raw1 & 0x1F;\n                var stack_space = is_16 ? 4 : 8;\n                if(is_call)\n                {\n                    stack_space += is_16 ? 4 + 2 * parameter_count : 8 + 4 * parameter_count;\n                }\n                if(ss_info.size)\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + new_esp - stack_space | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n                else\n                {\n                    //try {\n                    this.writable_or_pagefault(ss_info.base + (new_esp - stack_space & 0xFFFF) | 0, stack_space); // , cs_info.dpl\n                    //} catch(e) { debugger; }\n                }\n\n                var old_esp = this.reg32s[reg_esp];\n                var old_ss = this.sreg[reg_ss];\n                var old_stack_pointer = this.get_stack_pointer(0);\n\n                //dbg_log(\"old_esp=\" + h(old_esp));\n\n                this.cpl = cs_info.dpl;\n                this.cpl_changed();\n\n                this.update_cs_size(cs_info.size);\n\n                this.switch_seg(reg_ss, new_ss);\n                this.set_stack_reg(new_esp);\n\n                //dbg_log(\"parameter_count=\" + parameter_count);\n                //dbg_assert(parameter_count === 0, \"TODO\");\n\n                if(is_16)\n                {\n                    this.push16(old_ss);\n                    this.push16(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n                else\n                {\n                    this.push32(old_ss);\n                    this.push32(old_esp);\n                    //dbg_log(\"old esp written to \" + h(this.translate_address_system_read(this.get_stack_pointer(0))));\n                }\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read16(old_stack_pointer + 2 * i);\n                            this.push16(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        for(var i = parameter_count - 1; i >= 0; i--)\n                        {\n                            var parameter = this.safe_read32s(old_stack_pointer + 4 * i);\n                            this.push32(parameter);\n                        }\n\n                        //this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n            else\n            {\n                dbg_log(\"same privilege call gate is_16=\" + is_16 + \" from=\" + this.cpl + \" to=\" + cs_info.dpl + \" conforming=\" + cs_info.dc_bit);\n                // ok\n\n                if(is_call)\n                {\n                    if(is_16)\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                        this.push16(this.sreg[reg_cs]);\n                        this.push16(this.get_real_eip());\n                    }\n                    else\n                    {\n                        this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                        this.push32(this.sreg[reg_cs]);\n                        this.push32(this.get_real_eip());\n                    }\n                }\n            }\n\n            // Note: eip from call is ignored\n            var new_eip = info.raw0 & 0xFFFF;\n            if(!is_16)\n            {\n                new_eip |= info.raw1 & 0xFFFF0000;\n            }\n\n            dbg_log(\"call gate eip=\" + h(new_eip >>> 0) + \" cs=\" + h(cs_selector) + \" conforming=\" + cs_info.dc_bit);\n            dbg_assert((new_eip >>> 0) <= cs_info.effective_limit, \"todo: #gp\");\n\n            this.update_cs_size(cs_info.size);\n\n            this.segment_is_null[reg_cs] = 0;\n            this.segment_limits[reg_cs] = cs_info.effective_limit;\n            //this.segment_infos[reg_cs] = 0; // TODO\n            this.segment_offsets[reg_cs] = cs_info.base;\n            this.sreg[reg_cs] = cs_selector & ~3 | this.cpl;\n            dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n            this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n        }\n        else\n        {\n            var types = { 9: \"Available 386 TSS\", 0xb: \"Busy 386 TSS\", 4: \"286 Call Gate\", 0xc: \"386 Call Gate\" };\n            throw this.debug.unimpl(\"load system segment descriptor, type = \" + (info.access & 15) + \" (\" + types[info.access & 15] + \")\");\n        }\n    }\n    else\n    {\n        if(!info.is_executable)\n        {\n            dbg_log(\"#gp non-executable cs: \" + h(selector), LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(info.dc_bit)\n        {\n            // conforming code segment\n            if(info.dpl > this.cpl)\n            {\n                dbg_log(\"#gp cs dpl > cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n        else\n        {\n            // non-conforming code segment\n\n            if(info.rpl > this.cpl || info.dpl !== this.cpl)\n            {\n                dbg_log(\"#gp cs rpl > cpl or dpl != cpl: \" + h(selector), LOG_CPU);\n                this.trigger_gp(selector & ~3);\n            }\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n\n        if(is_call)\n        {\n            if(this.is_osize_32())\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-8), 8);\n                this.push32(this.sreg[reg_cs]);\n                this.push32(this.get_real_eip());\n            }\n            else\n            {\n                this.writable_or_pagefault(this.get_stack_pointer(-4), 4);\n                this.push16(this.sreg[reg_cs]);\n                this.push16(this.get_real_eip());\n            }\n        }\n\n        dbg_assert((eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n\n        this.update_cs_size(info.size);\n\n        this.segment_is_null[reg_cs] = 0;\n        this.segment_limits[reg_cs] = info.effective_limit;\n        //this.segment_infos[reg_cs] = 0; // TODO\n\n        this.segment_offsets[reg_cs] = info.base;\n        this.sreg[reg_cs] = selector & ~3 | this.cpl;\n\n        this.instruction_pointer = this.get_seg(reg_cs) + eip | 0;\n    }\n\n    //dbg_log(\"far \" + [\"jump\", \"call\"][+is_call] + \" to:\", LOG_CPU)\n    CPU_LOG_VERBOSE && this.debug.dump_state(\"far \" + [\"jump\", \"call\"][+is_call] + \" end\");\n};\n\nCPU.prototype.get_tss_stack_addr = function(dpl)\n{\n    if(this.tss_size_32)\n    {\n        var tss_stack_addr = (dpl << 3) + 4 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 6);\n    }\n    else\n    {\n        var tss_stack_addr = (dpl << 2) + 2 | 0;\n\n        if((tss_stack_addr + 5 | 0) > this.segment_limits[reg_tr])\n        {\n            throw this.debug.unimpl(\"#TS handler\");\n        }\n\n        tss_stack_addr = tss_stack_addr + this.segment_offsets[reg_tr] | 0;\n        dbg_assert((tss_stack_addr & 0xFFF) <= 0x1000 - 4);\n    }\n\n    if(this.paging)\n    {\n        tss_stack_addr = this.translate_address_system_read(tss_stack_addr);\n    }\n\n    return tss_stack_addr;\n};\n\nCPU.prototype.do_task_switch = function(selector, error_code)\n{\n    dbg_assert(this.tss_size_32, \"TODO\");\n\n    dbg_log(\"do_task_switch sel=\" + h(selector), LOG_CPU);\n    var descriptor = this.lookup_segment_selector(selector);\n\n    dbg_assert((descriptor.type | 2) === 3 || (descriptor.type | 2) === 0xb);\n    var tss_is_16 = descriptor.type <= 3;\n    var tss_is_busy = (descriptor.type & 2) === 2;\n\n    if(!descriptor.is_valid || descriptor.is_null || !descriptor.from_gdt)\n    {\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if((descriptor.access & 31) === 0xB)\n    {\n        // is busy\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!descriptor.is_present)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    if(descriptor.effective_limit < 103)\n    {\n        throw this.debug.unimpl(\"#NP handler\");\n    }\n\n    var tsr_size = this.segment_limits[reg_tr];\n    var tsr_offset = this.segment_offsets[reg_tr];\n\n    var old_eflags = this.get_eflags();\n\n    if(tss_is_busy)\n    {\n        old_eflags &= ~flag_nt;\n    }\n\n    this.writable_or_pagefault(tsr_offset, 0x66);\n\n    //this.safe_write32(tsr_offset + TSR_CR3, this.cr[3]);\n\n    // TODO: Write 16 bit values if old tss is 16 bit\n    this.safe_write32(tsr_offset + TSR_EIP, this.get_real_eip());\n    this.safe_write32(tsr_offset + TSR_EFLAGS, old_eflags);\n\n    this.safe_write32(tsr_offset + TSR_EAX, this.reg32s[reg_eax]);\n    this.safe_write32(tsr_offset + TSR_ECX, this.reg32s[reg_ecx]);\n    this.safe_write32(tsr_offset + TSR_EDX, this.reg32s[reg_edx]);\n    this.safe_write32(tsr_offset + TSR_EBX, this.reg32s[reg_ebx]);\n\n    this.safe_write32(tsr_offset + TSR_ESP, this.reg32s[reg_esp]);\n    this.safe_write32(tsr_offset + TSR_EBP, this.reg32s[reg_ebp]);\n    this.safe_write32(tsr_offset + TSR_ESI, this.reg32s[reg_esi]);\n    this.safe_write32(tsr_offset + TSR_EDI, this.reg32s[reg_edi]);\n\n    this.safe_write32(tsr_offset + TSR_ES, this.sreg[reg_es]);\n    this.safe_write32(tsr_offset + TSR_CS, this.sreg[reg_cs]);\n    this.safe_write32(tsr_offset + TSR_SS, this.sreg[reg_ss]);\n    this.safe_write32(tsr_offset + TSR_DS, this.sreg[reg_ds]);\n    this.safe_write32(tsr_offset + TSR_FS, this.sreg[reg_fs]);\n    this.safe_write32(tsr_offset + TSR_GS, this.sreg[reg_gs]);\n\n    //this.safe_write32(tsr_offset + TSR_LDT, this.sreg[reg_ldtr]);\n\n    if(true /* is jump or call or int */)\n    {\n        // mark as busy\n        this.write8(descriptor.table_offset + 5 | 0, this.read8(descriptor.table_offset + 5 | 0) | 2);\n    }\n\n    //var new_tsr_size = descriptor.effective_limit;\n    var new_tsr_offset = descriptor.base;\n\n    dbg_assert(!tss_is_16, \"unimplemented\");\n\n    if(true /* is call or int */)\n    {\n        this.safe_write16(new_tsr_offset + TSR_BACKLINK, this.sreg[reg_tr]);\n    }\n\n    var new_cr3 = this.safe_read32s(new_tsr_offset + TSR_CR3);\n\n    this.flags &= ~flag_vm;\n\n    var new_eip = this.safe_read32s(new_tsr_offset + TSR_EIP);\n    var new_cs = this.safe_read16(new_tsr_offset + TSR_CS);\n    var info = this.lookup_segment_selector(new_cs);\n\n    if(info.is_null)\n    {\n        dbg_log(\"null cs\", LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_valid)\n    {\n        dbg_log(\"invalid cs: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.is_system)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_executable)\n    {\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(info.dc_bit && info.dpl > info.rpl)\n    {\n        dbg_log(\"cs conforming and dpl > rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.dc_bit && info.dpl !== info.rpl)\n    {\n        dbg_log(\"cs non-conforming and dpl != rpl: \" + h(selector), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NP for loading not-present in cs sel=\" + h(selector, 4), LOG_CPU);\n        throw this.debug.unimpl(\"#TS handler\");\n    }\n\n    this.segment_is_null[reg_cs] = 0;\n    this.segment_limits[reg_cs] = info.effective_limit;\n    this.segment_offsets[reg_cs] = info.base;\n    this.sreg[reg_cs] = new_cs;\n\n    this.cpl = info.dpl;\n    this.cpl_changed();\n\n    dbg_assert((this.sreg[reg_cs] & 3) === this.cpl);\n\n    dbg_assert((new_eip >>> 0) <= info.effective_limit, \"todo: #gp\");\n    this.update_cs_size(info.size);\n\n    var new_eflags = this.safe_read32s(new_tsr_offset + TSR_EFLAGS);\n\n    if(true /* is call or int */)\n    {\n        this.safe_write32(tsr_offset + TSR_BACKLINK, selector);\n        new_eflags |= flag_nt;\n    }\n\n    if(new_eflags & flag_vm)\n    {\n        throw this.debug.unimpl(\"task switch to VM mode\");\n    }\n\n    this.update_eflags(new_eflags);\n\n    if(true /* call or int */)\n    {\n        this.flags |= flag_nt;\n    }\n\n    var new_ldt = this.safe_read16(new_tsr_offset + TSR_LDT);\n    this.load_ldt(new_ldt);\n\n    this.reg32s[reg_eax] = this.safe_read32s(new_tsr_offset + TSR_EAX);\n    this.reg32s[reg_ecx] = this.safe_read32s(new_tsr_offset + TSR_ECX);\n    this.reg32s[reg_edx] = this.safe_read32s(new_tsr_offset + TSR_EDX);\n    this.reg32s[reg_ebx] = this.safe_read32s(new_tsr_offset + TSR_EBX);\n\n    this.reg32s[reg_esp] = this.safe_read32s(new_tsr_offset + TSR_ESP);\n    this.reg32s[reg_ebp] = this.safe_read32s(new_tsr_offset + TSR_EBP);\n    this.reg32s[reg_esi] = this.safe_read32s(new_tsr_offset + TSR_ESI);\n    this.reg32s[reg_edi] = this.safe_read32s(new_tsr_offset + TSR_EDI);\n\n    this.switch_seg(reg_es, this.safe_read16(new_tsr_offset + TSR_ES));\n    this.switch_seg(reg_ss, this.safe_read16(new_tsr_offset + TSR_SS));\n    this.switch_seg(reg_ds, this.safe_read16(new_tsr_offset + TSR_DS));\n    this.switch_seg(reg_fs, this.safe_read16(new_tsr_offset + TSR_FS));\n    this.switch_seg(reg_gs, this.safe_read16(new_tsr_offset + TSR_GS));\n\n    this.instruction_pointer = this.get_seg(reg_cs) + new_eip | 0;\n\n    this.segment_offsets[reg_tr] = descriptor.base;\n    this.segment_limits[reg_tr] = descriptor.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    this.cr[3] = new_cr3;\n    dbg_assert((this.cr[3] & 0xFFF) === 0);\n    this.clear_tlb();\n\n    this.cr[0] |= CR0_TS;\n\n    if(error_code !== false)\n    {\n        if(tss_is_16)\n        {\n            this.push16(error_code & 0xFFFF);\n        }\n        else\n        {\n            this.push32(error_code);\n        }\n    }\n};\n\nCPU.prototype.hlt_op = function()\n{\n    if(this.cpl)\n    {\n        this.trigger_gp(0);\n    }\n\n    if((this.flags & flag_interrupt) === 0)\n    {\n        this.debug.show(\"cpu halted\");\n        this.bus.send(\"cpu-event-halt\");\n        if(DEBUG) this.debug.dump_regs();\n        throw \"HALT\";\n    }\n    else\n    {\n        // get out of here and into hlt_loop\n        this.in_hlt = true;\n\n        //if(false) // possibly unsafe, test in safari\n        //{\n        //    this.hlt_loop();\n        //    this.diverged();\n        //    if(this.in_hlt)\n        //    {\n        //        throw MAGIC_CPU_EXCEPTION;\n        //    }\n        //}\n        //else\n        {\n            throw MAGIC_CPU_EXCEPTION;\n        }\n    }\n};\n\n// assumes ip to point to the byte before the next instruction\nCPU.prototype.raise_exception = function(interrupt_nr)\n{\n    //if(DEBUG && interrupt_nr !== 7)\n    //{\n    //    // show interesting exceptions\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //    this.debug.dump_state();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, false);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.raise_exception_with_code = function(interrupt_nr, error_code)\n{\n    dbg_assert(typeof error_code === \"number\");\n\n    //if(DEBUG)\n    //{\n    //    dbg_log(\"Exception \" + h(interrupt_nr) + \" err=\" + h(error_code) + \" at \" + h(this.previous_ip >>> 0, 8) + \" (cs=\" + h(this.sreg[reg_cs], 4) + \")\", LOG_CPU);\n    //    dbg_trace(LOG_CPU);\n    //    this.debug.dump_regs();\n    //}\n\n    this.call_interrupt_vector(interrupt_nr, false, error_code);\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.trigger_de = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(0);\n};\n\nCPU.prototype.trigger_ud = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(6);\n};\n\nCPU.prototype.trigger_nm = function()\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception(7);\n};\n\nCPU.prototype.trigger_ts = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(10, code);\n};\n\nCPU.prototype.trigger_gp = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(13, code);\n};\n\nCPU.prototype.trigger_np = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(11, code);\n};\n\nCPU.prototype.trigger_ss = function(code)\n{\n    this.instruction_pointer = this.previous_ip;\n    this.raise_exception_with_code(12, code);\n};\n\n// used before fpu instructions\nCPU.prototype.task_switch_test = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        this.trigger_nm();\n    }\n};\n\n// used before mmx instructions\nCPU.prototype.task_switch_test_mmx = function()\n{\n    if(this.cr[0] & (CR0_EM | CR0_TS))\n    {\n        if(this.cr[0] & CR0_TS)\n        {\n            this.trigger_nm();\n        }\n        else\n        {\n            this.trigger_ud();\n        }\n    }\n\n};\n\nCPU.prototype.todo = function()\n{\n    if(DEBUG)\n    {\n        dbg_trace();\n        throw \"TODO\";\n    }\n\n    this.trigger_ud();\n};\n\nCPU.prototype.undefined_instruction = function()\n{\n    dbg_assert(false, \"Possible fault: undefined instruction\");\n    this.trigger_ud();\n};\n\nCPU.prototype.unimplemented_sse = function()\n{\n    dbg_log(\"No SSE\", LOG_CPU);\n    dbg_assert(false);\n    this.trigger_ud();\n};\n\nCPU.prototype.get_seg_prefix_ds = function()\n{\n    return this.get_seg_prefix(reg_ds);\n};\n\nCPU.prototype.get_seg_prefix_ss = function()\n{\n    return this.get_seg_prefix(reg_ss);\n};\n\nCPU.prototype.get_seg_prefix_cs = function()\n{\n    return this.get_seg_prefix(reg_cs);\n};\n\n/**\n * Get segment base by prefix or default\n * @param {number} default_segment\n */\nCPU.prototype.get_seg_prefix = function(default_segment /*, offset*/)\n{\n    var prefix = this.prefixes & PREFIX_MASK_SEGMENT;\n\n    if(prefix)\n    {\n        if(prefix === SEG_PREFIX_ZERO)\n        {\n            return 0;\n        }\n        else\n        {\n            return this.get_seg(prefix - 1 /*, offset*/);\n        }\n    }\n    else\n    {\n        return this.get_seg(default_segment /*, offset*/);\n    }\n};\n\n/**\n * Get segment base\n * @param {number} segment\n */\nCPU.prototype.get_seg = function(segment /*, offset*/)\n{\n    dbg_assert(segment >= 0 && segment < 8);\n\n    if(this.protected_mode)\n    {\n        if(this.segment_is_null[segment])\n        {\n            dbg_assert(segment !== reg_cs && segment !== reg_ss);\n            dbg_trace();\n            dbg_log(\"#gp Use null segment: \" + segment + \" sel=\" + h(this.sreg[segment], 4), LOG_CPU);\n\n            this.trigger_gp(0);\n        }\n\n        // TODO:\n        // - validate segment limits\n        // - validate if segment is writable\n    }\n\n    return this.segment_offsets[segment];\n};\n\nCPU.prototype.read_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read8(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.read_e8s = function()\n{\n    return this.read_e8() << 24 >> 24;\n};\n\nCPU.prototype.read_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read16(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.read_e16s = function()\n{\n    return this.read_e16() << 16 >> 16;\n};\n\nCPU.prototype.read_e32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.read_e32 = function()\n{\n    return this.read_e32s() >>> 0;\n};\n\nCPU.prototype.read_mmx_mem32s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read32s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        // Returning lower dword of qword\n        return this.reg_mmxs[2 * (this.modrm_byte & 7)];\n    }\n};\n\nCPU.prototype.read_mmx_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        return this.create_atom64s(\n            this.reg_mmxs[2 * (this.modrm_byte & 7)],\n            this.reg_mmxs[2 * (this.modrm_byte & 7) + 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem64s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read64s(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom64s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_aligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.read_xmm_mem128s_unaligned = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        return this.safe_read128s_unaligned(this.modrm_resolve(this.modrm_byte));\n    } else {\n        let i = (this.modrm_byte & 7) << 2;\n        return this.create_atom128s(\n            this.reg_xmm32s[i],\n            this.reg_xmm32s[i | 1],\n            this.reg_xmm32s[i | 2],\n            this.reg_xmm32s[i | 3]\n        );\n    }\n};\n\nCPU.prototype.set_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write8(addr, value);\n    } else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.set_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write16(addr, value);\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.set_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write32(addr, value);\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.set_mmx_mem64s = function(low, high)\n{\n    if(this.modrm_byte < 0xC0) {\n        var addr = this.modrm_resolve(this.modrm_byte);\n        this.safe_write64(addr, low, high);\n    } else {\n        this.reg_mmxs[2 * (this.modrm_byte & 7)] = low;\n        this.reg_mmxs[2 * (this.modrm_byte & 7) + 1] = high;\n    }\n};\n\nCPU.prototype.read_write_e8 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        return this.read8(this.phys_addr);\n    } else {\n        return this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1];\n    }\n};\n\nCPU.prototype.write_e8 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        this.write8(this.phys_addr, value);\n    }\n    else {\n        this.reg8[this.modrm_byte << 2 & 0xC | this.modrm_byte >> 2 & 1] = value;\n    }\n};\n\nCPU.prototype.read_write_e16 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) === 0xFFF) {\n            this.phys_addr_high = this.translate_address_write(virt_addr + 1 | 0);\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read16(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read16(this.phys_addr);\n        }\n    } else {\n        return this.reg16[this.modrm_byte << 1 & 14];\n    }\n};\n\nCPU.prototype.write_e16 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write16(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write16(this.phys_addr, value);\n        }\n    } else {\n        this.reg16[this.modrm_byte << 1 & 14] = value;\n    }\n};\n\nCPU.prototype.read_write_e32 = function()\n{\n    if(this.modrm_byte < 0xC0) {\n        var virt_addr = this.modrm_resolve(this.modrm_byte);\n        this.phys_addr = this.translate_address_write(virt_addr);\n        if(this.paging && (virt_addr & 0xFFF) >= 0xFFD) {\n            //this.phys_addr_high = this.translate_address_write(virt_addr + 3 | 0);\n            this.phys_addr_high = this.translate_address_write(virt_addr + 3 & ~3) | (virt_addr + 3) & 3;\n            dbg_assert(this.phys_addr_high);\n            return this.virt_boundary_read32s(this.phys_addr, this.phys_addr_high);\n        } else {\n            this.phys_addr_high = 0;\n            return this.read32s(this.phys_addr);\n        }\n    } else {\n        return this.reg32s[this.modrm_byte & 7];\n    }\n};\n\nCPU.prototype.write_e32 = function(value)\n{\n    if(this.modrm_byte < 0xC0) {\n        if(this.phys_addr_high) {\n            this.virt_boundary_write32(this.phys_addr, this.phys_addr_high, value);\n        } else {\n            this.write32(this.phys_addr, value);\n        }\n    } else {\n        this.reg32s[this.modrm_byte & 7] = value;\n    }\n};\n\nCPU.prototype.read_reg_e16 = function()\n{\n    return this.reg16[this.modrm_byte << 1 & 14];\n};\n\nCPU.prototype.write_reg_e16 = function(value)\n{\n    this.reg16[this.modrm_byte << 1 & 14] = value;\n};\n\nCPU.prototype.read_reg_e32s = function()\n{\n    return this.reg32s[this.modrm_byte & 7];\n};\n\nCPU.prototype.write_reg_e32 = function(value)\n{\n    this.reg32s[this.modrm_byte & 7] = value;\n};\n\nCPU.prototype.read_g8 = function()\n{\n    return this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1];\n};\n\nCPU.prototype.write_g8 = function(value)\n{\n    this.reg8[this.modrm_byte >> 1 & 0xC | this.modrm_byte >> 5 & 1] = value;\n};\n\nCPU.prototype.read_g16 = function()\n{\n    return this.reg16[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.read_g16s = function()\n{\n    return this.reg16s[this.modrm_byte >> 2 & 14];\n};\n\nCPU.prototype.write_g16 = function(value)\n{\n    this.reg16[this.modrm_byte >> 2 & 14] = value;\n};\n\nCPU.prototype.read_g32s = function()\n{\n    return this.reg32s[this.modrm_byte >> 3 & 7];\n};\n\nCPU.prototype.write_g32 = function(value)\n{\n    this.reg32[this.modrm_byte >> 3 & 7] = value;\n};\n\nCPU.prototype.read_xmm64s = function()\n{\n    return this.create_atom64s(\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2],\n        this.reg_xmm32s[(this.modrm_byte >> 3 & 7) << 2 | 1]\n    );\n};\n\nCPU.prototype.read_xmm128s = function()\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    return this.create_atom128s(\n        this.reg_xmm32s[i | 0],\n        this.reg_xmm32s[i | 1],\n        this.reg_xmm32s[i | 2],\n        this.reg_xmm32s[i | 3]\n    );\n};\n\nCPU.prototype.read_mmx64s = function()\n{\n    return this.create_atom64s(\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)],\n        this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1]\n    );\n};\n\nCPU.prototype.write_mmx64s = function(low, high)\n{\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7)] = low;\n    this.reg_mmxs[2 * (this.modrm_byte >> 3 & 7) + 1] = high;\n};\n\nCPU.prototype.write_xmm64 = function(low, high)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = low;\n    this.reg_xmm32s[i + 1] = high;\n};\n\nCPU.prototype.write_xmm128s = function(d0, d1, d2, d3)\n{\n    let i = (this.modrm_byte >> 3 & 7) << 2;\n    this.reg_xmm32s[i] = d0;\n    this.reg_xmm32s[i + 1] = d1;\n    this.reg_xmm32s[i + 2] = d2;\n    this.reg_xmm32s[i + 3] = d3;\n};\n\nCPU.prototype.pic_call_irq = function(int)\n{\n    try\n    {\n        this.previous_ip = this.instruction_pointer;\n        this.call_interrupt_vector(int, false, false);\n    }\n    catch(e)\n    {\n        this.exception_cleanup(e);\n    }\n};\n\nCPU.prototype.handle_irqs = function()\n{\n    dbg_assert(!this.page_fault);\n\n    this.diverged();\n\n    if((this.flags & flag_interrupt) && !this.page_fault)\n    {\n        if(this.devices.pic)\n        {\n            this.devices.pic.acknowledge_irq();\n        }\n\n        if(this.devices.apic)\n        {\n            this.devices.apic.acknowledge_irq();\n        }\n    }\n};\n\nCPU.prototype.device_raise_irq = function(i)\n{\n    dbg_assert(arguments.length === 1);\n    if(this.devices.pic)\n    {\n        this.devices.pic.set_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.set_irq(i);\n    }\n};\n\nCPU.prototype.device_lower_irq = function(i)\n{\n    if(this.devices.pic)\n    {\n        this.devices.pic.clear_irq(i);\n    }\n\n    if(this.devices.ioapic)\n    {\n        this.devices.ioapic.clear_irq(i);\n    }\n};\n\nCPU.prototype.test_privileges_for_io = function(port, size)\n{\n    if(this.protected_mode && (this.cpl > this.getiopl() || (this.flags & flag_vm)))\n    {\n        if(!this.tss_size_32)\n        {\n            dbg_log(\"#GP for port io, 16-bit TSS  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n            CPU_LOG_VERBOSE && this.debug.dump_state();\n            this.trigger_gp(0);\n        }\n\n        var tsr_size = this.segment_limits[reg_tr];\n        var tsr_offset = this.segment_offsets[reg_tr];\n\n        if(tsr_size >= 0x67)\n        {\n            dbg_assert((tsr_offset + 0x64 + 2 & 0xFFF) < 0xFFF);\n\n            var iomap_base = this.read16(this.translate_address_system_read(tsr_offset + 0x64 + 2 | 0)),\n                high_port = port + size - 1 | 0;\n\n            if(tsr_size >= (iomap_base + (high_port >> 3) | 0))\n            {\n                var mask = ((1 << size) - 1) << (port & 7),\n                    addr = this.translate_address_system_read(tsr_offset + iomap_base + (port >> 3) | 0),\n                    port_info = (mask & 0xFF00) ?\n                        this.read16(addr) : this.read8(addr);\n\n                dbg_assert((addr & 0xFFF) < 0xFFF);\n\n                if(!(port_info & mask))\n                {\n                    return;\n                }\n            }\n        }\n\n        dbg_log(\"#GP for port io  port=\" + h(port) + \" size=\" + size, LOG_CPU);\n        CPU_LOG_VERBOSE && this.debug.dump_state();\n        this.trigger_gp(0);\n    }\n};\n\nCPU.prototype.cpuid = function()\n{\n    // cpuid\n    // TODO: Fill in with less bogus values\n\n    // http://lxr.linux.no/linux+%2a/arch/x86/include/asm/cpufeature.h\n    // http://www.sandpile.org/x86/cpuid.htm\n\n    var eax = 0;\n    var ecx = 0;\n    var edx = 0;\n    var ebx = 0;\n\n    var winnt_fix = false;\n\n    switch(this.reg32s[reg_eax])\n    {\n        case 0:\n            // maximum supported level\n            if(winnt_fix)\n            {\n                eax = 2;\n            }\n            else\n            {\n                eax = 5;\n            }\n\n            ebx = 0x756E6547|0; // Genu\n            edx = 0x49656E69|0; // ineI\n            ecx = 0x6C65746E|0; // ntel\n            break;\n\n        case 1:\n            // pentium\n            eax = 3 | 6 << 4 | 15 << 8;\n            ebx = 1 << 16 | 8 << 8; // cpu count, clflush size\n            ecx = 1 << 23 | 1 << 30; // popcnt, rdrand\n            var vme = 0 << 1;\n            if(VMWARE_HYPERVISOR_PORT) ecx |= 1 << 31; // hypervisor\n            edx = (this.fpu ? 1 : 0) |                // fpu\n                    vme | 1 << 3 | 1 << 4 | 1 << 5 |   // vme, pse, tsc, msr\n                    1 << 8 | 1 << 11 | 1 << 13 | 1 << 15 | // cx8, sep, pge, cmov\n                    0 << 23 | 0 << 24 | 0 << 25 | 0 << 26;   // mmx, fxsr, sse, sse2\n\n            if(ENABLE_ACPI && this.apic_enabled)\n            {\n                edx |= 1 << 9; // apic\n            }\n            break;\n\n        case 2:\n            // Taken from http://siyobik.info.gf/main/reference/instruction/CPUID\n            eax = 0x665B5001|0;\n            ebx = 0;\n            ecx = 0;\n            edx = 0x007A7000;\n            break;\n\n        case 4:\n            // from my local machine\n            switch(this.reg32s[reg_ecx])\n            {\n                case 0:\n                    eax = 0x00000121;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 1:\n                    eax = 0x00000122;\n                    ebx = 0x01c0003f;\n                    ecx = 0x0000003f;\n                    edx = 0x00000001;\n                    break;\n                case 2:\n                    eax = 0x00000143;\n                    ebx = 0x05c0003f;\n                    ecx = 0x00000fff;\n                    edx = 0x00000001;\n                    break;\n            }\n            break;\n\n        case 5:\n            // from my local machine\n            eax = 0x40;\n            ebx = 0x40;\n            ecx = 3;\n            edx = 0x00142120;\n            break;\n\n        case 0x80000000|0:\n            // maximum supported extended level\n            eax = 5;\n            // other registers are reserved\n            break;\n\n        case 0x40000000|0: // hypervisor\n            if(VMWARE_HYPERVISOR_PORT)\n            {\n                // h(\"Ware\".split(\"\").reduce((a, c, i) => a | c.charCodeAt(0) << i * 8, 0))\n                ebx = 0x61774D56|0; // VMwa\n                ecx = 0x4D566572|0; // reVM\n                edx = 0x65726177|0; // ware\n            }\n            break;\n\n        default:\n            dbg_log(\"cpuid: unimplemented eax: \" + h(this.reg32[reg_eax]), LOG_CPU);\n    }\n\n    dbg_log(\"cpuid: eax=\" + h(this.reg32[reg_eax], 8) + \" cl=\" + h(this.reg8[reg_cl], 2), LOG_CPU);\n\n    this.reg32s[reg_eax] = eax;\n    this.reg32s[reg_ecx] = ecx;\n    this.reg32s[reg_edx] = edx;\n    this.reg32s[reg_ebx] = ebx;\n};\n\nCPU.prototype.update_cs_size = function(new_size)\n{\n    dbg_assert(typeof new_size === \"boolean\");\n\n    if(this.is_32 !== new_size)\n    {\n        this.clear_instruction_cache();\n        this.is_32 = new_size;\n        this.update_operand_size();\n    }\n};\n\nCPU.prototype.update_operand_size = function()\n{\n    if(this.is_32)\n    {\n        this.table = this.table32;\n    }\n    else\n    {\n        this.table = this.table16;\n    }\n};\n\n/**\n * @param {number} selector\n */\nCPU.prototype.lookup_segment_selector = function(selector)\n{\n    dbg_assert(typeof selector === \"number\" && selector >= 0 && selector < 0x10000);\n\n    var is_gdt = (selector & 4) === 0,\n        selector_offset = selector & ~7,\n        info,\n        table_offset,\n        table_limit;\n\n    info = {\n        rpl: selector & 3,\n        from_gdt: is_gdt,\n        is_null: false,\n        is_valid: true,\n\n        base: 0,\n        access: 0,\n        flags: 0,\n        type: 0,\n        dpl: 0,\n        is_system: false,\n        is_present: false,\n        is_executable: false,\n        rw_bit: false,\n        dc_bit: false,\n        size: false,\n\n        is_conforming_executable: false,\n\n        // limit after applying granularity\n        effective_limit: 0,\n\n        is_writable: false,\n        is_readable: false,\n        table_offset: 0,\n\n        raw0: 0,\n        raw1: 0,\n    };\n\n    if(is_gdt)\n    {\n        table_offset = this.gdtr_offset;\n        table_limit = this.gdtr_size;\n    }\n    else\n    {\n        table_offset = this.segment_offsets[reg_ldtr];\n        table_limit = this.segment_limits[reg_ldtr];\n    }\n\n    if(is_gdt && selector_offset === 0)\n    {\n        info.is_null = true;\n        return info;\n    }\n\n    // limit is the number of entries in the table minus one\n    if((selector | 7) > table_limit)\n    {\n        dbg_log(\"Selector \" + h(selector, 4) + \" is outside of the \" +\n            (is_gdt ? \"g\" : \"l\") + \"dt limits\", LOG_CPU);\n        info.is_valid = false;\n        return info;\n    }\n\n    table_offset = table_offset + selector_offset | 0;\n\n    if(this.paging)\n    {\n        table_offset = this.translate_address_system_read(table_offset);\n    }\n    info.table_offset = table_offset;\n\n    info.base = this.read16(table_offset + 2 | 0) | this.read8(table_offset + 4 | 0) << 16 |\n                this.read8(table_offset + 7 | 0) << 24;\n    info.access = this.read8(table_offset + 5 | 0);\n    info.flags = this.read8(table_offset + 6 | 0) >> 4;\n\n    info.raw0 = this.read32s(table_offset     | 0);\n    info.raw1 = this.read32s(table_offset + 4 | 0);\n\n    //this.write8(table_offset + 5 | 0, info.access | 1);\n\n    // used if system\n    info.type = info.access & 0xF;\n\n    info.dpl = info.access >> 5 & 3;\n\n    info.is_system = (info.access & 0x10) === 0;\n    info.is_present = (info.access & 0x80) === 0x80;\n    info.is_executable = (info.access & 8) === 8;\n\n    info.rw_bit = (info.access & 2) === 2;\n    info.dc_bit = (info.access & 4) === 4;\n\n    info.is_conforming_executable = info.dc_bit && info.is_executable;\n\n    info.size = (info.flags & 4) === 4;\n\n    var limit = this.read16(table_offset) |\n                (this.read8(table_offset + 6 | 0) & 0xF) << 16;\n\n    if(info.flags & 8)\n    {\n        // granularity set\n        info.effective_limit = (limit << 12 | 0xFFF) >>> 0;\n    }\n    else\n    {\n        info.effective_limit = limit;\n    }\n\n    info.is_writable = info.rw_bit && !info.is_executable;\n    info.is_readable = info.rw_bit || !info.is_executable;\n\n    return info;\n};\n\n/**\n * @param {number} reg\n * @param {number} selector\n */\nCPU.prototype.switch_seg = function(reg, selector)\n{\n    dbg_assert(reg >= 0 && reg <= 5);\n    dbg_assert(typeof selector === \"number\" && selector < 0x10000 && selector >= 0);\n\n    if(!this.protected_mode || this.vm86_mode())\n    {\n        this.sreg[reg] = selector;\n        this.segment_is_null[reg] = 0;\n        this.segment_offsets[reg] = selector << 4;\n\n        if(reg === reg_ss)\n        {\n            this.stack_size_32 = false;\n        }\n        return;\n    }\n\n    var info = this.lookup_segment_selector(selector);\n\n    if(reg === reg_ss)\n    {\n        if(info.is_null)\n        {\n            dbg_log(\"#GP for loading 0 in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(0);\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           info.rpl !== this.cpl ||\n           !info.is_writable ||\n           info.dpl !== this.cpl)\n        {\n            dbg_log(\"#GP for loading invalid in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#SS for loading non-present in SS sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_ss(selector & ~3);\n        }\n\n        this.stack_size_32 = info.size;\n    }\n    else if(reg === reg_cs)\n    {\n        // handled by switch_cs_real_mode, far_return or far_jump\n        dbg_assert(false);\n    }\n    else\n    {\n        // es, ds, fs, gs\n        if(info.is_null)\n        {\n            //dbg_log(\"0 loaded in seg=\" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            //dbg_trace(LOG_CPU);\n            this.sreg[reg] = selector;\n            this.segment_is_null[reg] = 1;\n            return;\n        }\n\n        if(!info.is_valid ||\n           info.is_system ||\n           !info.is_readable ||\n           (!info.is_conforming_executable &&\n            (info.rpl > info.dpl || this.cpl > info.dpl))\n        ) {\n            dbg_log(\"#GP for loading invalid in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            this.debug.dump_state();\n            this.debug.dump_regs();\n            dbg_trace(LOG_CPU);\n            this.trigger_gp(selector & ~3);\n        }\n\n        if(!info.is_present)\n        {\n            dbg_log(\"#NP for loading not-present in seg \" + reg + \" sel=\" + h(selector, 4), LOG_CPU);\n            dbg_trace(LOG_CPU);\n            this.trigger_np(selector & ~3);\n        }\n    }\n\n    this.segment_is_null[reg] = 0;\n    this.segment_limits[reg] = info.effective_limit;\n    //this.segment_infos[reg] = 0; // TODO\n\n    this.segment_offsets[reg] = info.base;\n    this.sreg[reg] = selector;\n};\n\nCPU.prototype.load_tr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    dbg_assert(info.is_valid);\n    //dbg_log(\"load tr: \" + h(selector, 4) + \" offset=\" + h(info.base >>> 0, 8) + \" limit=\" + h(info.effective_limit >>> 0, 8), LOG_CPU);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"TR can only be loaded from GDT\");\n    }\n\n    if(info.is_null)\n    {\n        dbg_log(\"#GP(0) | tried to load null selector (ltr)\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"#GP | ltr: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler (happens when running kvm-unit-test without ACPI)\");\n    }\n\n    if(info.type !== 9 && info.type !== 1)\n    {\n        // 0xB: busy 386 TSS (GP)\n        // 0x9: 386 TSS\n        // 0x3: busy 286 TSS (GP)\n        // 0x1: 286 TSS (??)\n        dbg_log(\"#GP | ltr: invalid type (type = \" + h(info.type) + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"#NT | present bit not set (ltr)\");\n        throw this.debug.unimpl(\"#NT handler\");\n    }\n\n    this.tss_size_32 = info.type === 9;\n    this.segment_offsets[reg_tr] = info.base;\n    this.segment_limits[reg_tr] = info.effective_limit;\n    this.sreg[reg_tr] = selector;\n\n    // Mark task as busy\n    this.write8(info.table_offset + 5 | 0, this.read8(info.table_offset + 5 | 0) | 2);\n\n    //dbg_log(\"tsr at \" + h(info.base) + \"; (\" + info.effective_limit + \" bytes)\");\n};\n\nCPU.prototype.load_ldt = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n\n    if(info.is_null)\n    {\n        // invalid\n        this.segment_offsets[reg_ldtr] = 0;\n        this.segment_limits[reg_ldtr] = 0;\n        return;\n    }\n\n    dbg_assert(info.is_valid);\n\n    if(!info.from_gdt)\n    {\n        throw this.debug.unimpl(\"LDTR can only be loaded from GDT\");\n    }\n\n    if(!info.is_present)\n    {\n        dbg_log(\"lldt: present bit not set\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(!info.is_system)\n    {\n        dbg_log(\"lldt: not a system entry\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    if(info.type !== 2)\n    {\n        dbg_log(\"lldt: invalid type (\" + info.type + \")\");\n        throw this.debug.unimpl(\"#GP handler\");\n    }\n\n    this.segment_offsets[reg_ldtr] = info.base;\n    this.segment_limits[reg_ldtr] = info.effective_limit;\n    this.sreg[reg_ldtr] = selector;\n\n    //dbg_log(\"ldt at \" + h(info.base >>> 0) + \"; (\" + info.effective_limit + \" bytes)\", LOG_CPU);\n};\n\nCPU.prototype.arpl = function(seg, r16)\n{\n    this.flags_changed &= ~flag_zero;\n\n    if((seg & 3) < (this.reg16[r16] & 3))\n    {\n        this.flags |= flag_zero;\n        return seg & ~3 | this.reg16[r16] & 3;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return seg;\n    }\n};\n\nCPU.prototype.lar = function(selector, original)\n{\n    dbg_log(\"lar sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LAR_INVALID_TYPE = 1 << 0 | 1 << 6 | 1 << 7 | 1 << 8 | 1 << 0xA |\n                           1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LAR_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lar: invalid selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.raw1 & 0x00FFFF00;\n    }\n};\n\nCPU.prototype.lsl = function(selector, original)\n{\n    dbg_log(\"lsl sel=\" + h(selector, 4), LOG_CPU);\n\n    /** @const */\n    var LSL_INVALID_TYPE = 1 << 0 | 1 << 4 | 1 << 5 | 1 << 6 | 1 << 8 |\n                           1 << 0xA | 1 << 0xC | 1 << 0xD | 1 << 0xE | 1 << 0xF;\n\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    var dpl_bad = info.dpl < this.cpl || info.dpl < info.rpl;\n\n    if(info.is_null || !info.is_valid ||\n       (info.is_system ? (LSL_INVALID_TYPE >> info.type & 1) || dpl_bad :\n                         !info.is_conforming_executable && dpl_bad)\n    ) {\n        this.flags &= ~flag_zero;\n        dbg_log(\"lsl: invalid  selector=\" + h(selector, 4) + \" is_null=\" + info.is_null, LOG_CPU);\n        return original;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return info.effective_limit | 0;\n    }\n\n};\n\nCPU.prototype.verr = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_readable ||\n       (!info.is_conforming_executable && (info.dpl < this.cpl || info.dpl < info.rpl)))\n    {\n        dbg_log(\"verr -> invalid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verr -> valid. selector=\" + h(selector, 4), LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.verw = function(selector)\n{\n    var info = this.lookup_segment_selector(selector);\n    this.flags_changed &= ~flag_zero;\n\n    if(info.is_null || !info.is_valid || info.is_system || !info.is_writable ||\n       info.dpl < this.cpl || info.dpl < info.rpl)\n    {\n        dbg_log(\"verw invalid \" + \" \" + h(selector) + \" \" + info.is_null + \" \" +\n                !info.is_valid + \" \" + info.is_system + \" \" + !info.is_writable + \" \" +\n                (info.dpl < this.cpl) + \" \" + (info.dpl < info.rpl) + \" \" + LOG_CPU);\n        this.flags &= ~flag_zero;\n    }\n    else\n    {\n        dbg_log(\"verw valid\", LOG_CPU);\n        this.flags |= flag_zero;\n    }\n};\n\nCPU.prototype.clear_tlb = function()\n{\n    // clear tlb excluding global pages\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n\n    this.tlb_info.set(this.tlb_info_global);\n\n    //dbg_log(\"page table loaded\", LOG_CPU);\n};\n\nCPU.prototype.full_clear_tlb = function()\n{\n    //dbg_log(\"TLB full clear\", LOG_CPU);\n\n    // clear tlb including global pages\n    var buf32 = new Int32Array(this.tlb_info_global.buffer);\n    for(var i = 0; i < (1 << 18); )\n    {\n        buf32[i++] = buf32[i++] = buf32[i++] = buf32[i++] = 0;\n    }\n\n    this.clear_tlb();\n};\n\nCPU.prototype.invlpg = function(addr)\n{\n    var page = addr >>> 12;\n    //dbg_log(\"invlpg: addr=\" + h(addr >>> 0), LOG_CPU);\n\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.last_virt_eip = -1;\n    this.last_virt_esp = -1;\n};\n\nCPU.prototype.translate_address_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_read(addr);\n    }\n    else\n    {\n        return this.translate_address_system_read(addr);\n    }\n};\n\nCPU.prototype.translate_address_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    if(this.cpl === 3)\n    {\n        return this.translate_address_user_write(addr);\n    }\n    else\n    {\n        return this.translate_address_system_write(addr);\n    }\n};\n\nCPU.prototype.translate_address_user_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_user_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_USER_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 1) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_write = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_WRITE)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 1, 0) | addr & 0xFFF;\n    }\n};\n\nCPU.prototype.translate_address_system_read = function(addr)\n{\n    if(!this.paging)\n    {\n        return addr;\n    }\n\n    var base = addr >>> 12;\n\n    if(this.tlb_info[base] & TLB_SYSTEM_READ)\n    {\n        return this.tlb_data[base] ^ addr;\n    }\n    else\n    {\n        return this.do_page_translation(addr, 0, 0) | addr & 0xFFF;\n    }\n};\n\n/**\n * @return {number}\n */\nCPU.prototype.do_page_translation = function(addr, for_writing, user)\n{\n    var page = addr >>> 12,\n        page_dir_addr = (this.cr[3] >>> 2) + (page >> 10) | 0,\n        page_dir_entry = this.mem32s[page_dir_addr],\n        high,\n        can_write = true,\n        global,\n        cachable = true,\n        allow_user = true;\n\n    dbg_assert(addr < 0x80000000);\n\n    if(!(page_dir_entry & 1))\n    {\n        // to do at this place:\n        //\n        // - set cr2 = addr (which caused the page fault)\n        // - call_interrupt_vector  with id 14, error code 0-7 (requires information if read or write)\n        // - prevent execution of the function that triggered this call\n        //dbg_log(\"#PF not present\", LOG_CPU);\n\n        this.cr[2] = addr;\n        this.trigger_pagefault(for_writing, user, 0);\n\n        // never reached as this.trigger_pagefault throws up\n        dbg_assert(false);\n    }\n\n    if((page_dir_entry & 2) === 0)\n    {\n        can_write = false;\n\n        if(for_writing && (user || (this.cr[0] & CR0_WP)))\n        {\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if((page_dir_entry & 4) === 0)\n    {\n        allow_user = false;\n\n        if(user)\n        {\n            // \"Page Fault: page table accessed by non-supervisor\";\n            //dbg_log(\"#PF supervisor\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 1);\n            dbg_assert(false);\n        }\n    }\n\n    if(page_dir_entry & this.page_size_extensions)\n    {\n        // size bit is set\n\n        // set the accessed and dirty bits\n        this.mem32s[page_dir_addr] = page_dir_entry | 0x20 | for_writing << 6;\n\n        high = (page_dir_entry & 0xFFC00000) | (addr & 0x3FF000);\n        global = page_dir_entry & 0x100;\n    }\n    else\n    {\n        var page_table_addr = ((page_dir_entry & 0xFFFFF000) >>> 2) + (page & 0x3FF) | 0,\n            page_table_entry = this.mem32s[page_table_addr];\n\n        if((page_table_entry & 1) === 0)\n        {\n            //dbg_log(\"#PF not present table\", LOG_CPU);\n            this.cr[2] = addr;\n            this.trigger_pagefault(for_writing, user, 0);\n            dbg_assert(false);\n        }\n\n        if((page_table_entry & 2) === 0)\n        {\n            can_write = false;\n\n            if(for_writing && (user || (this.cr[0] & CR0_WP)))\n            {\n                //dbg_log(\"#PF not writable page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        if((page_table_entry & 4) === 0)\n        {\n            allow_user = false;\n\n            if(user)\n            {\n                //dbg_log(\"#PF not supervisor page\", LOG_CPU);\n                this.cr[2] = addr;\n                this.trigger_pagefault(for_writing, user, 1);\n                dbg_assert(false);\n            }\n        }\n\n        // set the accessed and dirty bits\n        this.write_aligned32(page_dir_addr, page_dir_entry | 0x20);\n        this.write_aligned32(page_table_addr, page_table_entry | 0x20 | for_writing << 6);\n\n        high = page_table_entry & 0xFFFFF000;\n        global = page_table_entry & 0x100;\n    }\n\n    this.tlb_data[page] = high ^ page << 12;\n\n    var allowed_flag;\n\n    if(allow_user)\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE | TLB_USER_READ | TLB_USER_WRITE;\n        }\n        else\n        {\n            // TODO: Consider if cr0.wp is not set\n            allowed_flag = TLB_SYSTEM_READ | TLB_USER_READ;\n        }\n    }\n    else\n    {\n        if(can_write)\n        {\n            allowed_flag = TLB_SYSTEM_READ | TLB_SYSTEM_WRITE;\n        }\n        else\n        {\n            allowed_flag = TLB_SYSTEM_READ;\n        }\n    }\n\n    this.tlb_info[page] = allowed_flag;\n\n    if(global && (this.cr[4] & CR4_PGE))\n    {\n        this.tlb_info_global[page] = allowed_flag;\n    }\n\n    return high;\n};\n\nCPU.prototype.writable_or_pagefault = function(addr, size)\n{\n    dbg_assert(size < 0x1000, \"not supported yet\");\n    dbg_assert(size > 0);\n\n    if(!this.paging)\n    {\n        return;\n    }\n\n    var user = this.cpl === 3 ? 1 : 0,\n        mask = user ? TLB_USER_WRITE : TLB_SYSTEM_WRITE,\n        page = addr >>> 12;\n\n    if((this.tlb_info[page] & mask) === 0)\n    {\n        this.do_page_translation(addr, 1, user);\n    }\n\n    if((addr & 0xFFF) + size - 1 >= 0x1000)\n    {\n        if((this.tlb_info[page + 1 | 0] & mask) === 0)\n        {\n            this.do_page_translation(addr + size - 1 | 0, 1, user);\n        }\n    }\n};\n\nCPU.prototype.trigger_pagefault = function(write, user, present)\n{\n    if(LOG_PAGE_FAULTS)\n    {\n        dbg_log(\"page fault w=\" + write + \" u=\" + user + \" p=\" + present +\n                \" eip=\" + h(this.previous_ip >>> 0, 8) +\n                \" cr2=\" + h(this.cr[2] >>> 0, 8), LOG_CPU);\n        dbg_trace(LOG_CPU);\n    }\n\n    if(this.page_fault)\n    {\n        dbg_trace(LOG_CPU);\n        throw this.debug.unimpl(\"Double fault\");\n    }\n\n    // invalidate tlb entry\n    var page = this.cr[2] >>> 12;\n    this.tlb_info[page] = 0;\n    this.tlb_info_global[page] = 0;\n\n    this.instruction_pointer = this.previous_ip;\n    this.page_fault = true;\n    this.call_interrupt_vector(14, false, user << 2 | write << 1 | present);\n\n    throw MAGIC_CPU_EXCEPTION;\n};\n\nCPU.prototype.is_osize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_OPSIZE) === PREFIX_MASK_OPSIZE);\n};\n\nCPU.prototype.is_asize_32 = function()\n{\n    return this.is_32 !== ((this.prefixes & PREFIX_MASK_ADDRSIZE) === PREFIX_MASK_ADDRSIZE);\n};\n\nCPU.prototype.get_reg_asize = function(reg)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    var r = this.reg32s[reg];\n\n    if(this.is_asize_32())\n    {\n        return r;\n    }\n    else\n    {\n        return r & 0xFFFF;\n    }\n};\n\nCPU.prototype.set_ecx_asize = function(value)\n{\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg_ecx] = value;\n    }\n    else\n    {\n        this.reg16[reg_cx] = value;\n    }\n};\n\nCPU.prototype.add_reg_asize = function(reg, value)\n{\n    dbg_assert(reg === reg_ecx || reg === reg_esi || reg === reg_edi);\n    if(this.is_asize_32())\n    {\n        this.reg32s[reg] += value;\n    }\n    else\n    {\n        this.reg16[reg << 1] += value;\n    }\n};\n\nCPU.prototype.decr_ecx_asize = function()\n{\n    return this.is_asize_32() ? --this.reg32s[reg_ecx] : --this.reg16[reg_cx];\n};\n\n// Closure Compiler's way of exporting\nif(typeof window !== \"undefined\")\n{\n    window[\"CPU\"] = CPU;\n}\nelse if(typeof module !== \"undefined\" && typeof module.exports !== \"undefined\")\n{\n    module.exports[\"CPU\"] = CPU;\n}\nelse if(typeof importScripts === \"function\")\n{\n    self[\"CPU\"] = CPU;\n}\n","\"use strict\";\n/*\n * Compile time configuration, some only relevant for debug mode\n */\n\n/**\n * @define {boolean}\n * Overridden for production by closure compiler\n */\nvar DEBUG = true;\n\n/** @const */\nvar LOG_TO_FILE = false;\n\n/**\n * @const\n * Enables logging all IO port reads and writes. Very verbose\n */\nvar LOG_ALL_IO = false;\n\n/**\n * @const\n * Enables logging of page faults, quite verbose\n */\nvar LOG_PAGE_FAULTS = false;\n\n\nvar LOG_LEVEL = LOG_ALL & ~LOG_PS2 & ~LOG_PIT & ~LOG_VIRTIO & ~LOG_9P & ~LOG_PIC &\n                          ~LOG_DMA & ~LOG_SERIAL & ~LOG_NET & ~LOG_FLOPPY & ~LOG_DISK;\n\n/**\n * @const\n * Draws entire buffer and visualizes the layers that would be drawn\n */\nvar DEBUG_SCREEN_LAYERS = DEBUG && false;\n\n\n/** @const */\nvar ENABLE_HPET = DEBUG && false;\n\n/**\n * @define {boolean}\n * Overridden by closure compiler\n */\nvar ENABLE_ACPI = false;\n\n\n/**\n * @const\n * How many cycles the CPU does at a time before running hardware timers\n */\nvar LOOP_COUNTER = 11001;\n\n/**\n * @const\n * How often, in milliseconds, to yield to the browser for rendering and\n * running events\n */\nvar TIME_PER_FRAME = 1;\n\n/**\n * @const\n * How many ticks the TSC does per millisecond\n */\nvar TSC_RATE = 8 * 1024;\n\n\n/** @const */\nvar APIC_TIMER_FREQ = TSC_RATE;\n\n\n/** @const */\nvar VMWARE_HYPERVISOR_PORT = true;\n","\"use strict\";\n\nvar v86util = v86util || {};\n\n// pad string with spaces on the right\nv86util.pads = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = str + \" \";\n    }\n\n    return str;\n};\n\n// pad string with zeros on the left\nv86util.pad0 = function(str, len)\n{\n    str = str ? str + \"\" : \"\";\n\n    while(str.length < len)\n    {\n        str = \"0\" + str;\n    }\n\n    return str;\n};\n\n/**\n * number to hex\n * @param {number} n\n * @param {number=} len\n * @return {string}\n */\nfunction h(n, len)\n{\n    if(!n)\n    {\n        var str = \"\";\n    }\n    else\n    {\n        var str = n.toString(16);\n    }\n\n    return \"0x\" + v86util.pad0(str.toUpperCase(), len || 1);\n}\n\n\nif(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues)\n{\n    let rand_data = new Int32Array(1);\n\n    v86util.has_rand_int = function()\n    {\n        return true;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        window.crypto.getRandomValues(rand_data);\n        return rand_data[0];\n    };\n}\nelse\n{\n    v86util.has_rand_int = function()\n    {\n        return false;\n    };\n\n    v86util.get_rand_int = function()\n    {\n        console.assert(false);\n    };\n}\n\n\n/**\n * Synchronous access to ArrayBuffer\n * @constructor\n */\nfunction SyncBuffer(buffer)\n{\n    this.buffer = buffer;\n    this.byteLength = buffer.byteLength;\n    this.onload = undefined;\n    this.onprogress = undefined;\n}\n\nSyncBuffer.prototype.load = function()\n{\n    this.onload && this.onload({ buffer: this.buffer });\n};\n\n/**\n * @param {number} start\n * @param {number} len\n * @param {function(!Uint8Array)} fn\n */\nSyncBuffer.prototype.get = function(start, len, fn)\n{\n    dbg_assert(start + len <= this.byteLength);\n    fn(new Uint8Array(this.buffer, start, len));\n};\n\n/**\n * @param {number} start\n * @param {!Uint8Array} slice\n * @param {function()} fn\n */\nSyncBuffer.prototype.set = function(start, slice, fn)\n{\n    dbg_assert(start + slice.byteLength <= this.byteLength);\n\n    new Uint8Array(this.buffer, start, slice.byteLength).set(slice);\n    fn();\n};\n\n/**\n * @param {function(!ArrayBuffer)} fn\n */\nSyncBuffer.prototype.get_buffer = function(fn)\n{\n    fn(this.buffer);\n};\n\n\n\n(function()\n{\n    var int_log2_table = new Int8Array(256);\n\n    for(var i = 0, b = -2; i < 256; i++)\n    {\n        if(!(i & i - 1))\n            b++;\n\n        int_log2_table[i] = b;\n    }\n\n    /**\n     * calculate the integer logarithm base 2 of a byte\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2_byte = function(x)\n    {\n        dbg_assert(x > 0);\n        dbg_assert(x < 0x100);\n\n        return int_log2_table[x];\n    };\n\n    /**\n     * calculate the integer logarithm base 2\n     * @param {number} x\n     * @return {number}\n     */\n    v86util.int_log2 = function(x)\n    {\n        dbg_assert(x > 0);\n\n        // http://jsperf.com/integer-log2/6\n        var tt = x >>> 16;\n\n        if(tt)\n        {\n            var t = tt >>> 8;\n            if(t)\n            {\n                return 24 + int_log2_table[t];\n            }\n            else\n            {\n                return 16 + int_log2_table[tt];\n            }\n        }\n        else\n        {\n            var t = x >>> 8;\n            if(t)\n            {\n                return 8 + int_log2_table[t];\n            }\n            else\n            {\n                return int_log2_table[x];\n            }\n        }\n    };\n})();\n\n\n/**\n * @constructor\n *\n * Queue wrapper around Uint8Array\n * Used by devices such as the PS2 controller\n */\nfunction ByteQueue(size)\n{\n    var data = new Uint8Array(size),\n        start,\n        end;\n\n    dbg_assert((size & size - 1) === 0);\n\n    this.length = 0;\n\n    this.push = function(item)\n    {\n        if(this.length === size)\n        {\n            // intentional overwrite\n        }\n        else\n        {\n            this.length++;\n        }\n\n        data[end] = item;\n        end = end + 1 & size - 1;\n    };\n\n    this.shift = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            var item = data[start];\n\n            start = start + 1 & size - 1;\n            this.length--;\n\n            return item;\n        }\n    };\n\n    this.peek = function()\n    {\n        if(!this.length)\n        {\n            return -1;\n        }\n        else\n        {\n            return data[start];\n        }\n    };\n\n    this.clear = function()\n    {\n        start = 0;\n        end = 0;\n        this.length = 0;\n    };\n\n    this.clear();\n}\n\n\n/**\n * @constructor\n *\n * Queue wrapper around Float32Array\n * Used by devices such as the sound blaster sound card\n */\nfunction FloatQueue(size)\n{\n    this.size = size;\n    this.data = new Float32Array(size);\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n\n    dbg_assert((size & size - 1) === 0);\n}\n\nFloatQueue.prototype.push = function(item)\n{\n    if(this.length === this.size)\n    {\n        // intentional overwrite\n        this.start = this.start + 1 & this.size - 1;\n    }\n    else\n    {\n        this.length++;\n    }\n\n    this.data[this.end] = item;\n    this.end = this.end + 1 & this.size - 1;\n};\n\nFloatQueue.prototype.shift = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        var item = this.data[this.start];\n\n        this.start = this.start + 1 & this.size - 1;\n        this.length--;\n\n        return item;\n    }\n};\n\nFloatQueue.prototype.shift_block = function(count)\n{\n    var slice = new Float32Array(count);\n\n    if(count > this.length)\n    {\n        count = this.length;\n    }\n    var slice_end = this.start + count;\n\n    var partial = this.data.subarray(this.start, slice_end);\n\n    slice.set(partial);\n    if(slice_end >= this.size)\n    {\n        slice_end -= this.size;\n        slice.set(this.data.subarray(0, slice_end), partial.length);\n    }\n    this.start = slice_end;\n\n    this.length -= count;\n\n    return slice;\n};\n\nFloatQueue.prototype.peek = function()\n{\n    if(!this.length)\n    {\n        return undefined;\n    }\n    else\n    {\n        return this.data[this.start];\n    }\n};\n\nFloatQueue.prototype.clear = function()\n{\n    this.start = 0;\n    this.end = 0;\n    this.length = 0;\n};\n\n\n/**\n * Simple circular queue for logs\n *\n * @param {number} size\n * @constructor\n */\nfunction CircularQueue(size)\n{\n    this.data = [];\n    this.index = 0;\n    this.size = size;\n}\n\nCircularQueue.prototype.add = function(item)\n{\n    this.data[this.index] = item;\n    this.index = (this.index + 1) % this.size;\n};\n\nCircularQueue.prototype.toArray = function()\n{\n    return [].slice.call(this.data, this.index).concat([].slice.call(this.data, 0, this.index));\n};\n\nCircularQueue.prototype.clear = function()\n{\n    this.data = [];\n    this.index = 0;\n};\n\n/**\n * @param {Array} new_data\n */\nCircularQueue.prototype.set = function(new_data)\n{\n    this.data = new_data;\n    this.index = 0;\n};\n\nfunction dump_file(ab, name)\n{\n    if(!(ab instanceof Array))\n    {\n        ab = [ab];\n    }\n\n    var blob = new Blob(ab);\n    download(blob, name);\n}\n\nfunction download(file_or_blob, name)\n{\n    var a = document.createElement(\"a\");\n    a[\"download\"] = name;\n    a.href = window.URL.createObjectURL(file_or_blob);\n    a.dataset[\"downloadurl\"] = [\"application/octet-stream\", a[\"download\"], a.href].join(\":\");\n\n    if(document.createEvent)\n    {\n        var ev = document.createEvent(\"MouseEvent\");\n        ev.initMouseEvent(\"click\", true, true, window,\n                          0, 0, 0, 0, 0, false, false, false, false, 0, null);\n        a.dispatchEvent(ev);\n    }\n    else\n    {\n        a.click();\n    }\n\n    window.URL.revokeObjectURL(a.href);\n}\n","\"use strict\";\n\n// Useful documentation, articles, and source codes for reference:\n// ===============================================================\n//\n// Official Hardware Programming Guide\n// -> https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n//\n// Official Yamaha YMF262 Manual\n// -> http://map.grauw.nl/resources/sound/yamaha_ymf262.pdf\n//\n// OPL3 Programming Guide\n// -> http://www.fit.vutbr.cz/~arnost/opl/opl3.html\n//\n// DOSBox\n// -> https://sourceforge.net/p/dosbox/code-0/HEAD/tree/dosbox/branches/mamesound/src/hardware/sblaster.cpp\n// -> https://github.com/duganchen/dosbox/blob/master/src/hardware/sblaster.cpp\n// -> https://github.com/joncampbell123/dosbox-x/blob/master/src/hardware/sblaster.cpp\n//\n// QEMU\n// -> https://github.com/qemu/qemu/blob/master/hw/audio/sb16.c\n// -> https://github.com/hackndev/qemu/blob/master/hw/sb16.c\n//\n// VirtualBox\n// -> https://www.virtualbox.org/svn/vbox/trunk/src/VBox/Devices/Audio/DevSB16.cpp\n// -> https://github.com/mdaniel/virtualbox-org-svn-vbox-trunk/blob/master/src/VBox/Devices/Audio/DevSB16.cpp\n\nvar\n\n    // Used for drivers to identify device (DSP command 0xE3).\n/** @const */ DSP_COPYRIGHT = \"COPYRIGHT (C) CREATIVE TECHNOLOGY LTD, 1992.\",\n\n    // Value of the current DSP command that indicates that the\n    // next command/data write in port 2xC should be interpreted\n    // as a command number.\n/** @const */ DSP_NO_COMMAND = 0,\n\n    // Size (bytes) of the DSP write/read buffers\n/** @const */ DSP_BUFSIZE = 64,\n\n    // Size (bytes) of the buffers containing floating point linear PCM audio.\n/** @const */ DSP_DACSIZE = 65536,\n\n    // Size (bytes) of the buffer in which DMA transfers are temporarily\n    // stored before being processed.\n/** @const */ SB_DMA_BUFSIZE = 65536,\n\n    // Number of samples to attempt to retrieve per transfer.\n/** @const */ SB_DMA_BLOCK_SAMPLES = 1024,\n\n    // Usable DMA channels.\n/** @const */ SB_DMA0 = 0,\n/** @const */ SB_DMA1 = 1,\n/** @const */ SB_DMA3 = 3,\n/** @const */ SB_DMA5 = 5,\n/** @const */ SB_DMA6 = 6,\n/** @const */ SB_DMA7 = 7,\n\n    // Default DMA channels.\n/** @const */ SB_DMA_CHANNEL_8BIT = SB_DMA1,\n/** @const */ SB_DMA_CHANNEL_16BIT = SB_DMA5,\n\n    // Usable IRQ channels.\n/** @const */ SB_IRQ2 = 2,\n/** @const */ SB_IRQ5 = 5,\n/** @const */ SB_IRQ7 = 7,\n/** @const */ SB_IRQ10 = 10,\n\n    // Default IRQ channel.\n/** @const */ SB_IRQ = SB_IRQ5,\n\n    // Indices to the irq_triggered register.\n/** @const */ SB_IRQ_8BIT = 0x1,\n/** @const */ SB_IRQ_16BIT = 0x2,\n/** @const */ SB_IRQ_MIDI = 0x1,\n/** @const */ SB_IRQ_MPU = 0x4;\n\n\n// Probably less efficient, but it's more maintainable, instead\n// of having a single large unorganised and decoupled table.\nvar DSP_COMMAND_SIZES = new Uint8Array(256);\nvar DSP_COMMAND_HANDLERS = [];\nvar MIXER_READ_HANDLERS = [];\nvar MIXER_WRITE_HANDLERS = [];\nvar FM_HANDLERS = [];\n\n\n/**\n * Sound Blaster 16 Emulator, or so it seems.\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction SB16(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    // I/O Buffers.\n    this.write_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.read_buffer_lastvalue = 0;\n\n    // Current DSP command info.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    // Mixer.\n    this.mixer_current_address = 0;\n    this.mixer_registers = new Uint8Array(256);\n    this.mixer_reset();\n\n    // Dummy status and test registers.\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    // DSP state.\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    // DAC buffer.\n    // The final destination for audio data before being sent off\n    // to Web Audio APIs.\n    // Format:\n    // Floating precision linear PCM, nominal between -1 and 1.\n    this.dac_buffers = [\n      new FloatQueue(DSP_DACSIZE),\n      new FloatQueue(DSP_DACSIZE),\n    ];\n\n    // Direct Memory Access transfer info.\n    this.dma = cpu.devices.dma;\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_channel_8bit = SB_DMA_CHANNEL_8BIT;\n    this.dma_channel_16bit = SB_DMA_CHANNEL_16BIT;\n    this.dma_autoinit = false;\n    this.dma_buffer = new ArrayBuffer(SB_DMA_BUFSIZE);\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_uint8 = new Uint8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n    this.sampling_rate = 22050;\n    bus.send(\"dac-tell-sampling-rate\", this.sampling_rate);\n    this.bytes_per_sample = 1;\n\n    // DMA identification data.\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    // ASP data: not understood by me.\n    this.asp_registers = new Uint8Array(256);\n\n    // MPU.\n    this.mpu_read_buffer = new ByteQueue(DSP_BUFSIZE);\n    this.mpu_read_buffer_lastvalue = 0;\n\n    // FM Synthesizer.\n    this.fm_current_address0 = 0;\n    this.fm_current_address1 = 0;\n    this.fm_waveform_select_enable = false;\n\n    // Interrupts.\n    this.irq = SB_IRQ;\n    this.irq_triggered = new Uint8Array(0x10);\n\n    // IO Ports.\n    // http://homepages.cae.wisc.edu/~brodskye/sb16doc/sb16doc.html#DSPPorts\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n\n    cpu.io.register_read_consecutive(0x220, this,\n        this.port2x0_read, this.port2x1_read, this.port2x2_read, this.port2x3_read);\n    cpu.io.register_read_consecutive(0x388, this,\n        this.port2x0_read, this.port2x1_read);\n\n    cpu.io.register_read_consecutive(0x224, this,\n        this.port2x4_read, this.port2x5_read);\n\n    cpu.io.register_read(0x226, this, this.port2x6_read);\n    cpu.io.register_read(0x227, this, this.port2x7_read);\n    cpu.io.register_read(0x228, this, this.port2x8_read);\n    cpu.io.register_read(0x229, this, this.port2x9_read);\n\n    cpu.io.register_read(0x22A, this, this.port2xA_read);\n    cpu.io.register_read(0x22B, this, this.port2xB_read);\n    cpu.io.register_read(0x22C, this, this.port2xC_read);\n    cpu.io.register_read(0x22D, this, this.port2xD_read);\n\n    cpu.io.register_read_consecutive(0x22E, this,\n        this.port2xE_read, this.port2xF_read);\n\n    cpu.io.register_write_consecutive(0x220, this,\n        this.port2x0_write, this.port2x1_write, this.port2x2_write, this.port2x3_write);\n    cpu.io.register_write_consecutive(0x388, this,\n        this.port2x0_write, this.port2x1_write);\n\n    cpu.io.register_write_consecutive(0x224, this,\n        this.port2x4_write, this.port2x5_write);\n\n    cpu.io.register_write(0x226, this, this.port2x6_write);\n    cpu.io.register_write(0x227, this, this.port2x7_write);\n\n    cpu.io.register_write_consecutive(0x228, this,\n        this.port2x8_write, this.port2x9_write);\n\n    cpu.io.register_write(0x22A, this, this.port2xA_write);\n    cpu.io.register_write(0x22B, this, this.port2xB_write);\n    cpu.io.register_write(0x22C, this, this.port2xC_write);\n    cpu.io.register_write(0x22D, this, this.port2xD_write);\n    cpu.io.register_write(0x22E, this, this.port2xE_write);\n    cpu.io.register_write(0x22F, this, this.port2xF_write);\n\n    cpu.io.register_read_consecutive(0x330, this, this.port3x0_read, this.port3x1_read);\n    cpu.io.register_write_consecutive(0x330, this, this.port3x0_write, this.port3x1_write);\n\n    this.dma.on_unmask(this.dma_on_unmask, this);\n\n    bus.register(\"dac-request-data\", function()\n    {\n        this.dac_handle_request();\n    }, this);\n    bus.register(\"speaker-has-initialized\", function()\n    {\n        this.mixer_reset();\n    }, this);\n    bus.send(\"speaker-confirm-initialized\");\n\n    this.dsp_reset();\n}\n\n//\n// General\n//\n\nSB16.prototype.dsp_reset = function()\n{\n    this.write_buffer.clear();\n    this.read_buffer.clear();\n\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n\n    this.dummy_speaker_enabled = false;\n    this.test_register = 0;\n\n    this.dsp_highspeed = false;\n    this.dsp_stereo = false;\n    this.dsp_16bit = false;\n    this.dsp_signed = false;\n\n    this.dac_buffers[0].clear();\n    this.dac_buffers[1].clear();\n\n    this.dma_sample_count = 0;\n    this.dma_bytes_count = 0;\n    this.dma_bytes_left = 0;\n    this.dma_bytes_block = 0;\n    this.dma_irq = 0;\n    this.dma_channel = 0;\n    this.dma_autoinit = false;\n    this.dma_buffer_uint8.fill(0);\n    this.dma_waiting_transfer = false;\n    this.dma_paused = false;\n\n    this.e2_value = 0xAA;\n    this.e2_count = 0;\n\n    this.sampling_rate = 22050;\n    this.bytes_per_sample = 1;\n\n    this.lower_irq(SB_IRQ_8BIT);\n    this.irq_triggered.fill(0);\n\n    this.asp_registers.fill(0);\n    this.asp_registers[5] = 0x01;\n    this.asp_registers[9] = 0xF8;\n};\n\nSB16.prototype.get_state = function()\n{\n    var state = [];\n\n    // state[0] = this.write_buffer;\n    // state[1] = this.read_buffer;\n    state[2] = this.read_buffer_lastvalue;\n\n    state[3] = this.command;\n    state[4] = this.command_size;\n\n    state[5] = this.mixer_current_address;\n    state[6] = this.mixer_registers;\n\n    state[7] = this.dummy_speaker_enabled;\n    state[8] = this.test_register;\n\n    state[9] = this.dsp_highspeed;\n    state[10] = this.dsp_stereo;\n    state[11] = this.dsp_16bit;\n    state[12] = this.dsp_signed;\n\n    // state[13] = this.dac_buffers;\n    //state[14]\n\n    state[15] = this.dma_sample_count;\n    state[16] = this.dma_bytes_count;\n    state[17] = this.dma_bytes_left;\n    state[18] = this.dma_bytes_block;\n    state[19] = this.dma_irq;\n    state[20] = this.dma_channel;\n    state[21] = this.dma_channel_8bit;\n    state[22] = this.dma_channel_16bit;\n    state[23] = this.dma_autoinit;\n    state[24] = this.dma_buffer_uint8;\n    state[25] = this.dma_waiting_transfer;\n    state[26] = this.dma_paused;\n    state[27] = this.sampling_rate;\n    state[28] = this.bytes_per_sample;\n\n    state[29] = this.e2_value;\n    state[30] = this.e2_count;\n\n    state[31] = this.asp_registers;\n\n    // state[32] = this.mpu_read_buffer;\n    state[33] = this.mpu_read_buffer_last_value;\n\n    state[34] = this.irq;\n    state[35] = this.irq_triggered;\n    //state[36]\n\n    return state;\n};\n\nSB16.prototype.set_state = function(state)\n{\n    // this.write_buffer = state[0];\n    // this.read_buffer = state[1];\n    this.read_buffer_lastvalue = state[2];\n\n    this.command = state[3];\n    this.command_size = state[4];\n\n    this.mixer_current_address = state[5];\n    this.mixer_registers = state[6];\n    this.mixer_full_update();\n\n    this.dummy_speaker_enabled = state[7];\n    this.test_register = state[8];\n\n    this.dsp_highspeed = state[9];\n    this.dsp_stereo = state[10];\n    this.dsp_16bit = state[11];\n    this.dsp_signed = state[12];\n\n    // this.dac_buffers = state[13];\n    //state[14]\n\n    this.dma_sample_count = state[15];\n    this.dma_bytes_count = state[16];\n    this.dma_bytes_left = state[17];\n    this.dma_bytes_block = state[18];\n    this.dma_irq = state[19];\n    this.dma_channel = state[20];\n    this.dma_channel_8bit = state[21];\n    this.dma_channel_16bit = state[22];\n    this.dma_autoinit = state[23];\n    this.dma_buffer_uint8 = state[24];\n    this.dma_waiting_transfer = state[25];\n    this.dma_paused = state[26];\n    this.sampling_rate = state[27];\n    this.bytes_per_sample = state[28];\n\n    this.e2_value = state[29];\n    this.e2_count = state[30];\n\n    this.asp_registers = state[31];\n\n    // this.mpu_read_buffer = state[32];\n    this.mpu_read_buffer_last_value = state[33];\n\n    this.irq = state[34];\n    this.irq_triggered = state[35];\n    //state[36];\n\n    this.dma_buffer = this.dma_buffer_uint8.buffer;\n    this.dma_buffer_int8 = new Int8Array(this.dma_buffer);\n    this.dma_buffer_int16 = new Int16Array(this.dma_buffer);\n    this.dma_buffer_uint16 = new Uint16Array(this.dma_buffer);\n    this.dma_syncbuffer = new SyncBuffer(this.dma_buffer);\n\n    if(this.dma_paused)\n    {\n        this.bus.send(\"dac-disable\");\n    }\n    else\n    {\n        this.bus.send(\"dac-enable\");\n    }\n};\n\n//\n// I/O handlers\n//\n\nSB16.prototype.port2x0_read = function()\n{\n    dbg_log(\"220 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x1_read = function()\n{\n    dbg_log(\"221 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x2_read = function()\n{\n    dbg_log(\"222 read: advanced fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x3_read = function()\n{\n    dbg_log(\"223 read: advanced music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_read = function()\n{\n    dbg_log(\"224 read: mixer address port\", LOG_SB16);\n    return this.mixer_current_address;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_read = function()\n{\n    dbg_log(\"225 read: mixer data port\", LOG_SB16);\n    return this.mixer_read(this.mixer_current_address);\n};\n\nSB16.prototype.port2x6_read = function()\n{\n    dbg_log(\"226 read: (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x7_read = function()\n{\n    dbg_log(\"227 read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x8_read = function()\n{\n    dbg_log(\"228 read: fm music status port (unimplemented)\", LOG_SB16);\n    return 0xFF;\n};\n\nSB16.prototype.port2x9_read = function()\n{\n    dbg_log(\"229 read: fm music data port (write only)\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read Data.\n// Used to acces in-bound DSP data.\nSB16.prototype.port2xA_read = function()\n{\n    dbg_log(\"22A read: read data\", LOG_SB16);\n    if(this.read_buffer.length)\n    {\n        this.read_buffer_lastvalue = this.read_buffer.shift();\n    }\n    dbg_log(\" <- \" + this.read_buffer_lastvalue + \" \" + h(this.read_buffer_lastvalue) + \" '\" + String.fromCharCode(this.read_buffer_lastvalue) + \"'\", LOG_SB16);\n    return this.read_buffer_lastvalue;\n};\n\nSB16.prototype.port2xB_read = function()\n{\n    dbg_log(\"22B read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Write-Buffer Status.\n// Indicates whether the DSP is ready to accept commands or data.\nSB16.prototype.port2xC_read = function()\n{\n    dbg_log(\"22C read: write-buffer status\", LOG_SB16);\n    // Always return ready (bit-7 set to low)\n    return 0x7F;\n};\n\nSB16.prototype.port2xD_read = function()\n{\n    dbg_log(\"22D read: undocumented\", LOG_SB16);\n    return 0xFF;\n};\n\n// Read-Buffer Status.\n// Indicates whether there is any in-bound data available for reading.\n// Also used to acknowledge DSP 8-bit interrupt.\nSB16.prototype.port2xE_read = function()\n{\n    dbg_log(\"22E read: read-buffer status / irq 8bit ack.\", LOG_SB16);\n    if(this.irq_triggered[SB_IRQ_8BIT])\n    {\n        this.lower_irq(SB_IRQ_8BIT);\n    }\n    var ready = this.read_buffer.length && !this.dsp_highspeed;\n    return (ready << 7) | 0x7F;\n};\n\n// DSP 16-bit interrupt acknowledgement.\nSB16.prototype.port2xF_read = function()\n{\n    dbg_log(\"22F read: irq 16bit ack\", LOG_SB16);\n    this.lower_irq(SB_IRQ_16BIT);\n    return 0;\n};\n\n\n// FM Address Port - primary register.\nSB16.prototype.port2x0_write = function(value)\n{\n    dbg_log(\"220 write: (unimplemented) fm register 0 address = \" + h(value), LOG_SB16);\n    this.fm_current_address0 = 0;\n};\n\n// FM Data Port - primary register.\nSB16.prototype.port2x1_write = function(value)\n{\n    dbg_log(\"221 write: (unimplemented) fm register 0 data = \" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address0];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 0, this.fm_current_address0);\n};\n\n// FM Address Port - secondary register.\nSB16.prototype.port2x2_write = function(value)\n{\n    dbg_log(\"222 write: (unimplemented) fm register 1 address = \" + h(value), LOG_SB16);\n    this.fm_current_address1 = 0;\n};\n\n// FM Data Port - secondary register.\nSB16.prototype.port2x3_write = function(value)\n{\n    dbg_log(\"223 write: (unimplemented) fm register 1 data =\" + h(value), LOG_SB16);\n    var handler = FM_HANDLERS[this.fm_current_address1];\n    if(!handler)\n    {\n        handler = this.fm_default_write;\n    }\n    handler.call(this, value, 1, this.fm_current_address1);\n};\n\n// Mixer Address Port.\nSB16.prototype.port2x4_write = function(value)\n{\n    dbg_log(\"224 write: mixer address = \" + h(value), LOG_SB16);\n    this.mixer_current_address = value;\n};\n\n// Mixer Data Port.\nSB16.prototype.port2x5_write = function(value)\n{\n    dbg_log(\"225 write: mixer data = \" + h(value), LOG_SB16);\n    this.mixer_write(this.mixer_current_address, value);\n};\n\n// Reset.\n// Used to reset the DSP to its default state and to exit highspeed mode.\nSB16.prototype.port2x6_write = function(yesplease)\n{\n    dbg_log(\"226 write: reset = \" + h(yesplease), LOG_SB16);\n\n    if(this.dsp_highspeed)\n    {\n        dbg_log(\" -> exit highspeed\", LOG_SB16);\n        this.dsp_highspeed = false;\n    }\n    else if(yesplease)\n    {\n        dbg_log(\" -> reset\", LOG_SB16);\n        this.dsp_reset();\n    }\n\n    // Signal completion.\n    this.read_buffer.clear();\n    this.read_buffer.push(0xAA);\n};\n\nSB16.prototype.port2x7_write = function(value)\n{\n    dbg_log(\"227 write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2x8_write = function(value)\n{\n    dbg_log(\"228 write: fm music register port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2x9_write = function(value)\n{\n    dbg_log(\"229 write: fm music data port (unimplemented)\", LOG_SB16);\n};\n\nSB16.prototype.port2xA_write = function(value)\n{\n    dbg_log(\"22A write: dsp read data port (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xB_write = function(value)\n{\n    dbg_log(\"22B write: undocumented\", LOG_SB16);\n};\n\n// Write Command/Data.\n// Used to send commands or data to the DSP.\nSB16.prototype.port2xC_write = function(value)\n{\n    dbg_log(\"22C write: write command/data\", LOG_SB16);\n\n    if(this.command === DSP_NO_COMMAND)\n    {\n        // New command.\n        dbg_log(\"22C write: command = \" + h(value), LOG_SB16);\n        this.command = value;\n        this.write_buffer.clear();\n        this.command_size = DSP_COMMAND_SIZES[value];\n    }\n    else\n    {\n        // More data for current command.\n        dbg_log(\"22C write: data: \" + h(value), LOG_SB16);\n        this.write_buffer.push(value);\n    }\n\n    // Perform command when we have all the needed data.\n    if(this.write_buffer.length >= this.command_size)\n    {\n        this.command_do();\n    }\n};\n\nSB16.prototype.port2xD_write = function(value)\n{\n    dbg_log(\"22D write: undocumented\", LOG_SB16);\n};\n\nSB16.prototype.port2xE_write = function(value)\n{\n    dbg_log(\"22E write: dsp read buffer status (read only)\", LOG_SB16);\n};\n\nSB16.prototype.port2xF_write = function(value)\n{\n    dbg_log(\"22F write: undocumented\", LOG_SB16);\n};\n\n\n// MPU UART Mode - Data Port\nSB16.prototype.port3x0_read = function()\n{\n    dbg_log(\"330 read: mpu data\", LOG_SB16);\n\n    if(this.mpu_read_buffer.length)\n    {\n        this.mpu_read_buffer_lastvalue = this.mpu_read_buffer.shift();\n    }\n    dbg_log(\" <- \" + h(this.mpu_read_buffer_lastvalue), LOG_SB16);\n\n    return this.mpu_read_buffer_lastvalue;\n};\nSB16.prototype.port3x0_write = function(value)\n{\n    dbg_log(\"330 write: mpu data (unimplemented) : \" + h(value), LOG_SB16);\n};\n\n// MPU UART Mode - Status Port\nSB16.prototype.port3x1_read = function()\n{\n    dbg_log(\"331 read: mpu status\", LOG_SB16);\n\n    var status = 0;\n    status |= 0x40 * 0; // Output Ready\n    status |= 0x80 * !this.mpu_read_buffer.length; // Input Ready\n\n    return status;\n};\n\n// MPU UART Mode - Command Port\nSB16.prototype.port3x1_write = function(value)\n{\n    dbg_log(\"331 write: mpu command: \" + h(value), LOG_SB16);\n    if(value == 0xFF)\n    {\n        // Command acknowledge.\n        this.mpu_read_buffer.clear();\n        this.mpu_read_buffer.push(0xFE);\n    }\n};\n\n//\n// DSP command handlers\n//\n\nSB16.prototype.command_do = function()\n{\n    var handler = DSP_COMMAND_HANDLERS[this.command];\n    if(!handler)\n    {\n        handler = this.dsp_default_handler;\n    }\n    handler.call(this);\n\n    // Reset Inputs.\n    this.command = DSP_NO_COMMAND;\n    this.command_size = 0;\n    this.write_buffer.clear();\n};\n\nSB16.prototype.dsp_default_handler = function()\n{\n    dbg_log(\"Unhandled command: \" + h(this.command), LOG_SB16);\n};\n\n/**\n * @param {Array} commands\n * @param {number} size\n * @param {function()=} handler\n */\nfunction register_dsp_command(commands, size, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.dsp_default_handler;\n    }\n    for(var i = 0; i < commands.length; i++)\n    {\n        DSP_COMMAND_SIZES[commands[i]] = size;\n        DSP_COMMAND_HANDLERS[commands[i]] = handler;\n    }\n}\n\nfunction any_first_digit(base)\n{\n    var commands = [];\n    for(var i = 0; i < 16; i++)\n    {\n        commands.push(base + i);\n    }\n    return commands;\n}\n\n// ASP set register\nregister_dsp_command([0x0E], 2, function()\n{\n    this.asp_registers[this.write_buffer.shift()] = this.write_buffer.shift();\n});\n\n// ASP get register\nregister_dsp_command([0x0F], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.asp_registers[this.write_buffer.shift()]);\n});\n\n// 8-bit direct mode single byte digitized sound output.\nregister_dsp_command([0x10], 1, function()\n{\n    var value = audio_normalize(this.write_buffer.shift(), 127.5, -1);\n\n    this.dac_buffers[0].push(value);\n    this.dac_buffers[1].push(value);\n    this.bus.send(\"dac-enable\");\n});\n\n// 8-bit single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x14, 0x15], 2, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = false;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output.\nregister_dsp_command([0x16], 2);\n\n// Creative 8-bit to 2-bit ADPCM single-cycle DMA mode digitzed sound output\n// with reference byte.\nregister_dsp_command([0x17], 2);\n\n// 8-bit auto-init DMA mode digitized sound output.\nregister_dsp_command([0x1C], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_16bit = false;\n    this.dsp_highspeed = false;\n    this.dma_transfer_start();\n});\n\n// Creative 8-bit to 2-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x1F], 0);\n\n// 8-bit direct mode single byte digitized sound input.\nregister_dsp_command([0x20], 0, function()\n{\n    // Fake silent input.\n    this.read_buffer.clear();\n    this.read_buffer.push(0x7f);\n});\n\n// 8-bit single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x24], 2);\n\n// 8-bit auto-init DMA mode digitized sound input.\nregister_dsp_command([0x2C], 0);\n\n// Polling mode MIDI input.\nregister_dsp_command([0x30], 0);\n\n// Interrupt mode MIDI input.\nregister_dsp_command([0x31], 0);\n\n// UART polling mode MIDI I/O.\nregister_dsp_command([0x34], 0);\n\n// UART interrupt mode MIDI I/O.\nregister_dsp_command([0x35], 0);\n\n// UART polling mode MIDI I/O with time stamping.\nregister_dsp_command([0x36], 0);\n\n// UART interrupt mode MIDI I/O with time stamping.\nregister_dsp_command([0x37], 0);\n\n// MIDI output.\nregister_dsp_command([0x38], 0);\n\n// Set digitized sound transfer Time Constant.\nregister_dsp_command([0x40], 1, function()\n{\n    // Note: bTimeConstant = 256 * time constant\n    this.sampling_rate_change(\n        1000000\n        / (256 - this.write_buffer.shift())\n        / this.get_channel_count()\n    );\n});\n\n// Set digitized sound output sampling rate.\n// Set digitized sound input sampling rate.\nregister_dsp_command([0x41, 0x42], 2, function()\n{\n    this.sampling_rate_change((this.write_buffer.shift() << 8) | this.write_buffer.shift());\n});\n\n// Set DSP block transfer size.\nregister_dsp_command([0x48], 2, function()\n{\n    // TODO: should be in bytes, but if this is only used\n    // for 8 bit transfers, then this number is the same\n    // as number of samples?\n    // Wrong: e.g. stereo requires two bytes per sample.\n    this.dma_transfer_size_set();\n});\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x74], 2);\n\n// Creative 8-bit to 4-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x75], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output.\nregister_dsp_command([0x76], 2);\n\n// Creative 8-bit to 3-bit ADPCM single-cycle DMA mode digitized sound output\n// with referene byte.\nregister_dsp_command([0x77], 2);\n\n// Creative 8-bit to 4-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7D], 0);\n\n// Creative 8-bit to 3-bit ADPCM auto-init DMA mode digitized sound output\n// with reference byte.\nregister_dsp_command([0x7F], 0);\n\n// Pause DAC for a duration.\nregister_dsp_command([0x80], 2);\n\n// 8-bit high-speed auto-init DMA mode digitized sound output.\nregister_dsp_command([0x90], 0, function()\n{\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = true;\n    this.dsp_signed = false;\n    this.dsp_highspeed = true;\n    this.dsp_16bit = false;\n    this.dma_transfer_start();\n});\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x91], 0);\n\n// 8-bit high-speed auto-init DMA mode digitized sound input.\nregister_dsp_command([0x98], 0);\n\n// 8-bit high-speed single-cycle DMA mode digitized sound input.\nregister_dsp_command([0x99], 0);\n\n// Set input mode to mono.\nregister_dsp_command([0xA0], 0);\n\n// Set input mode to stereo.\nregister_dsp_command([0xA8], 0);\n\n// Program 16-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xB0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_16BIT;\n    this.dma_channel = this.dma_channel_16bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = true;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Program 8-bit DMA mode digitized sound I/O.\nregister_dsp_command(any_first_digit(0xC0), 3, function()\n{\n    if(this.command & (1 << 3))\n    {\n        // Analogue to digital not implemented.\n        this.dsp_default_handler();\n        return;\n    }\n    var mode = this.write_buffer.shift();\n    this.dma_irq = SB_IRQ_8BIT;\n    this.dma_channel = this.dma_channel_8bit;\n    this.dma_autoinit = !!(this.command & (1 << 2));\n    this.dsp_signed = !!(mode & (1 << 4));\n    this.dsp_stereo = !!(mode & (1 << 5));\n    this.dsp_16bit = false;\n    this.dma_transfer_size_set();\n    this.dma_transfer_start();\n});\n\n// Pause 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD0], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"dac-disable\");\n});\n\n// Turn on speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD1], 0, function()\n{\n    this.dummy_speaker_enabled = true;\n});\n\n// Turn off speaker.\n// Documented to have no effect on SB16.\nregister_dsp_command([0xD3], 0, function()\n{\n    this.dummy_speaker_enabled = false;\n});\n\n// Continue 8-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD4], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n});\n\n// Pause 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD5], 0, function()\n{\n    this.dma_paused = true;\n    this.bus.send(\"dac-disable\");\n});\n\n// Continue 16-bit DMA mode digitized sound I/O.\nregister_dsp_command([0xD6], 0, function()\n{\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n});\n\n// Get speaker status.\nregister_dsp_command([0xD8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.dummy_speaker_enabled * 0xFF);\n});\n\n// Exit 16-bit auto-init DMA mode digitized sound I/O.\n// Exit 8-bit auto-init mode digitized sound I/O.\nregister_dsp_command([0xD9, 0xDA], 0, function()\n{\n    this.dma_autoinit = false;\n});\n\n// DSP identification\nregister_dsp_command([0xE0], 1, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(~this.write_buffer.shift());\n});\n\n// Get DSP version number.\nregister_dsp_command([0xE1], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(4);\n    this.read_buffer.push(5);\n});\n\n// DMA identification.\nregister_dsp_command([0xE2], 1);\n\n// Get DSP copyright.\nregister_dsp_command([0xE3], 0, function()\n{\n    this.read_buffer.clear();\n    for(var i = 0; i < DSP_COPYRIGHT.length; i++)\n    {\n        this.read_buffer.push(DSP_COPYRIGHT.charCodeAt(i));\n    }\n    // Null terminator.\n    this.read_buffer.push(0);\n});\n\n// Write test register.\nregister_dsp_command([0xE4], 1, function()\n{\n    this.test_register = this.write_buffer.shift();\n});\n\n// Read test register.\nregister_dsp_command([0xE8], 0, function()\n{\n    this.read_buffer.clear();\n    this.read_buffer.push(this.test_register);\n});\n\n// Trigger IRQ\nregister_dsp_command([0xF2, 0xF3], 0, function()\n{\n    this.raise_irq();\n});\n\n// ASP - unknown function\nvar SB_F9 = new Uint8Array(256);\nSB_F9[0x0E] = 0xFF;\nSB_F9[0x0F] = 0x07;\nSB_F9[0x37] = 0x38;\nregister_dsp_command([0xF9], 1, function()\n{\n    var input = this.write_buffer.shift();\n    dbg_log(\"dsp 0xf9: unknown function. input: \" + input, LOG_SB16);\n\n    this.read_buffer.clear();\n    this.read_buffer.push(SB_F9[input]);\n});\n\n//\n// Mixer Handlers (CT1745)\n//\n\nSB16.prototype.mixer_read = function(address)\n{\n    var handler = MIXER_READ_HANDLERS[address];\n    var data;\n    if(handler)\n    {\n        data = handler.call(this);\n    }\n    else\n    {\n        data = this.mixer_registers[address];\n        dbg_log(\"unhandled mixer register read. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    }\n    return data;\n};\n\nSB16.prototype.mixer_write = function(address, data)\n{\n    var handler = MIXER_WRITE_HANDLERS[address];\n    if(handler)\n    {\n        handler.call(this, data);\n    }\n    else\n    {\n        dbg_log(\"unhandled mixer register write. addr:\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    }\n};\n\nSB16.prototype.mixer_default_read = function()\n{\n    dbg_log(\"mixer register read. addr:\" + h(this.mixer_current_address), LOG_SB16);\n    return this.mixer_registers[this.mixer_current_address];\n};\n\nSB16.prototype.mixer_default_write = function(data)\n{\n    dbg_log(\"mixer register write. addr:\" + h(this.mixer_current_address) + \" data:\" + h(data), LOG_SB16);\n    this.mixer_registers[this.mixer_current_address] = data;\n};\n\nSB16.prototype.mixer_reset = function()\n{\n    // Values intentionally in decimal.\n    // Default values available at\n    // https://pdos.csail.mit.edu/6.828/2011/readings/hardware/SoundBlaster.pdf\n    this.mixer_registers[0x04] = 12 << 4 | 12;\n    this.mixer_registers[0x22] = 12 << 4 | 12;\n    this.mixer_registers[0x26] = 12 << 4 | 12;\n    this.mixer_registers[0x28] = 0;\n    this.mixer_registers[0x2E] = 0;\n    this.mixer_registers[0x0A] = 0;\n    this.mixer_registers[0x30] = 24 << 3;\n    this.mixer_registers[0x31] = 24 << 3;\n    this.mixer_registers[0x32] = 24 << 3;\n    this.mixer_registers[0x33] = 24 << 3;\n    this.mixer_registers[0x34] = 24 << 3;\n    this.mixer_registers[0x35] = 24 << 3;\n    this.mixer_registers[0x36] = 0;\n    this.mixer_registers[0x37] = 0;\n    this.mixer_registers[0x38] = 0;\n    this.mixer_registers[0x39] = 0;\n    this.mixer_registers[0x3B] = 0;\n    this.mixer_registers[0x3C] = 0x1F;\n    this.mixer_registers[0x3D] = 0x15;\n    this.mixer_registers[0x3E] = 0x0B;\n    this.mixer_registers[0x3F] = 0;\n    this.mixer_registers[0x40] = 0;\n    this.mixer_registers[0x41] = 0;\n    this.mixer_registers[0x42] = 0;\n    this.mixer_registers[0x43] = 0;\n    this.mixer_registers[0x44] = 8 << 4;\n    this.mixer_registers[0x45] = 8 << 4;\n    this.mixer_registers[0x46] = 8 << 4;\n    this.mixer_registers[0x47] = 8 << 4;\n\n    this.mixer_full_update();\n};\n\nSB16.prototype.mixer_full_update = function()\n{\n    // Start at 1. Don't re-reset.\n    for(var i = 1; i < this.mixer_registers.length; i++)\n    {\n        this.mixer_write(i, this.mixer_registers[i]);\n    }\n};\n\n/**\n * @param{number} address\n * @param{function():number=} handler\n */\nfunction register_mixer_read(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_read;\n    }\n    MIXER_READ_HANDLERS[address] = handler;\n}\n\n/**\n * @param{number} address\n * @param{function(number)=} handler\n */\nfunction register_mixer_write(address, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.mixer_default_write;\n    }\n    MIXER_WRITE_HANDLERS[address] = handler;\n}\n\n// Legacy registers map each nibble to the last 4 bits of the new registers\nfunction register_mixer_legacy(address_old, address_new_left, address_new_right)\n{\n    /** @this {SB16} */\n    MIXER_READ_HANDLERS[address_old] = function()\n    {\n        var left = this.mixer_registers[address_new_left] & 0xF0;\n        var right = this.mixer_registers[address_new_right] >>> 4;\n        return left | right;\n    };\n\n    /** @this {SB16} */\n    MIXER_WRITE_HANDLERS[address_old] = function(data)\n    {\n        this.mixer_registers[address_old] = data;\n        var prev_left = this.mixer_registers[address_new_left];\n        var prev_right = this.mixer_registers[address_new_right];\n        var left = (data & 0xF0) | (prev_left & 0x0F);\n        var right = (data << 4 & 0xF0) | (prev_right & 0x0F);\n\n        this.mixer_write(address_new_left, left);\n        this.mixer_write(address_new_right, right);\n    };\n}\n\n/**\n * @param {number} address\n * @param {number} mixer_source\n * @param {number} channel\n */\nfunction register_mixer_volume(address, mixer_source, channel)\n{\n    MIXER_READ_HANDLERS[address] = SB16.prototype.mixer_default_read;\n\n    /** @this {SB16} */\n    MIXER_WRITE_HANDLERS[address] = function(data)\n    {\n        this.mixer_registers[address] = data;\n        this.bus.send(\"mixer-volume\",\n        [\n            mixer_source,\n            channel,\n            (data >>> 2) - 62\n        ]);\n    };\n}\n\n// Reset.\nregister_mixer_read(0x00, function()\n{\n    this.mixer_reset();\n    return 0;\n});\nregister_mixer_write(0x00);\n\n// Legacy Voice Volume Left/Right.\nregister_mixer_legacy(0x04, 0x32, 0x33);\n\n// Legacy Mic Volume. TODO.\n//register_mixer_read(0x0A);\n//register_mixer_write(0x0A, function(data)\n//{\n//    this.mixer_registers[0x0A] = data;\n//    var prev = this.mixer_registers[0x3A];\n//    this.mixer_write(0x3A, data << 5 | (prev & 0x0F));\n//});\n\n// Legacy Master Volume Left/Right.\nregister_mixer_legacy(0x22, 0x30, 0x31);\n// Legacy Midi Volume Left/Right.\nregister_mixer_legacy(0x26, 0x34, 0x35);\n// Legacy CD Volume Left/Right.\nregister_mixer_legacy(0x28, 0x36, 0x37);\n// Legacy Line Volume Left/Right.\nregister_mixer_legacy(0x2E, 0x38, 0x39);\n\n// Master Volume Left.\nregister_mixer_volume(0x30, MIXER_SRC_MASTER, MIXER_CHANNEL_LEFT);\n// Master Volume Right.\nregister_mixer_volume(0x31, MIXER_SRC_MASTER, MIXER_CHANNEL_RIGHT);\n// Voice Volume Left.\nregister_mixer_volume(0x32, MIXER_SRC_DAC, MIXER_CHANNEL_LEFT);\n// Voice Volume Right.\nregister_mixer_volume(0x33, MIXER_SRC_DAC, MIXER_CHANNEL_RIGHT);\n// MIDI Volume Left. TODO.\n//register_mixer_volume(0x34, MIXER_SRC_SYNTH, MIXER_CHANNEL_LEFT);\n// MIDI Volume Right. TODO.\n//register_mixer_volume(0x35, MIXER_SRC_SYNTH, MIXER_CHANNEL_RIGHT);\n// CD Volume Left. TODO.\n//register_mixer_volume(0x36, MIXER_SRC_CD, MIXER_CHANNEL_LEFT);\n// CD Volume Right. TODO.\n//register_mixer_volume(0x37, MIXER_SRC_CD, MIXER_CHANNEL_RIGHT);\n// Line Volume Left. TODO.\n//register_mixer_volume(0x38, MIXER_SRC_LINE, MIXER_CHANNEL_LEFT);\n// Line Volume Right. TODO.\n//register_mixer_volume(0x39, MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT);\n// Mic Volume. TODO.\n//register_mixer_volume(0x3A, MIXER_SRC_MIC, MIXER_CHANNEL_BOTH);\n\n// PC Speaker Volume.\nregister_mixer_read(0x3B);\nregister_mixer_write(0x3B, function(data)\n{\n    this.mixer_registers[0x3B] = data;\n    this.bus.send(\"mixer-volume\", [MIXER_SRC_PCSPEAKER, MIXER_CHANNEL_BOTH, (data >>> 6) * 6 - 18]);\n});\n\n// Output Mixer Switches. TODO.\n//register_mixer_read(0x3C);\n//register_mixer_write(0x3C, function(data)\n//{\n//    this.mixer_registers[0x3C] = data;\n//\n//    if(data & 0x01) this.bus.send(\"mixer-connect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_MIC, MIXER_CHANNEL_BOTH]);\n//\n//    if(data & 0x02) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_RIGHT]);\n//\n//    if(data & 0x04) this.bus.send(\"mixer-connect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_CD, MIXER_CHANNEL_LEFT]);\n//\n//    if(data & 0x08) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_RIGHT]);\n//\n//    if(data & 0x10) this.bus.send(\"mixer-connect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\n//    else this.bus.send(\"mixer-disconnect\", [MIXER_SRC_LINE, MIXER_CHANNEL_LEFT]);\n//});\n\n// Input Mixer Left Switches. TODO.\n//register_mixer_read(0x3D);\n//register_mixer_write(0x3D);\n\n// Input Mixer Right Switches. TODO.\n//register_mixer_read(0x3E);\n//register_mixer_write(0x3E);\n\n// Input Gain Left. TODO.\n//register_mixer_read(0x3F);\n//register_mixer_write(0x3F);\n\n// Input Gain Right. TODO.\n//register_mixer_read(0x40);\n//register_mixer_write(0x40);\n\n// Output Gain Left.\nregister_mixer_read(0x41);\nregister_mixer_write(0x41, function(data)\n{\n    this.mixer_registers[0x41] = data;\n    this.bus.send(\"mixer-gain-left\", (data >>> 6) * 6);\n});\n\n// Output Gain Right.\nregister_mixer_read(0x42);\nregister_mixer_write(0x42, function(data)\n{\n    this.mixer_registers[0x42] = data;\n    this.bus.send(\"mixer-gain-right\", (data >>> 6) * 6);\n});\n\n// Mic AGC. TODO.\n//register_mixer_read(0x43);\n//register_mixer_write(0x43);\n\n// Treble Left.\nregister_mixer_read(0x44);\nregister_mixer_write(0x44, function(data)\n{\n    this.mixer_registers[0x44] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-treble-left\", data - (data < 16 ? 14 : 16));\n});\n\n// Treble Right.\nregister_mixer_read(0x45);\nregister_mixer_write(0x45, function(data)\n{\n    this.mixer_registers[0x45] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-treble-right\", data - (data < 16 ? 14 : 16));\n});\n\n// Bass Left.\nregister_mixer_read(0x46);\nregister_mixer_write(0x46, function(data)\n{\n    this.mixer_registers[0x46] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\n});\n\n// Bass Right.\nregister_mixer_read(0x47);\nregister_mixer_write(0x47, function(data)\n{\n    this.mixer_registers[0x47] = data;\n    data >>>= 3;\n    this.bus.send(\"mixer-bass-right\", data - (data < 16 ? 14 : 16));\n});\n\n// IRQ Select.\nregister_mixer_read(0x80, function()\n{\n    switch(this.irq)\n    {\n        case SB_IRQ2: return 0x1;\n        case SB_IRQ5: return 0x2;\n        case SB_IRQ7: return 0x4;\n        case SB_IRQ10: return 0x8;\n        default: return 0x0;\n    }\n});\nregister_mixer_write(0x80, function(bits)\n{\n    if(bits & 0x1) this.irq = SB_IRQ2;\n    if(bits & 0x2) this.irq = SB_IRQ5;\n    if(bits & 0x4) this.irq = SB_IRQ7;\n    if(bits & 0x8) this.irq = SB_IRQ10;\n});\n\n// DMA Select.\nregister_mixer_read(0x81, function()\n{\n    var ret = 0;\n    switch(this.dma_channel_8bit)\n    {\n        case SB_DMA0: ret |= 0x1; break;\n        case SB_DMA1: ret |= 0x2; break;\n        // Channel 2 is hardwired to floppy disk.\n        case SB_DMA3: ret |= 0x8; break;\n    }\n    switch(this.dma_channel_16bit)\n    {\n        // Channel 4 cannot be used.\n        case SB_DMA5: ret |= 0x20; break;\n        case SB_DMA6: ret |= 0x40; break;\n        case SB_DMA7: ret |= 0x80; break;\n    }\n    return ret;\n});\nregister_mixer_write(0x81, function(bits)\n{\n    if(bits & 0x1) this.dma_channel_8bit = SB_DMA0;\n    if(bits & 0x2) this.dma_channel_8bit = SB_DMA1;\n    if(bits & 0x8) this.dma_channel_8bit = SB_DMA3;\n    if(bits & 0x20) this.dma_channel_16bit = SB_DMA5;\n    if(bits & 0x40) this.dma_channel_16bit = SB_DMA6;\n    if(bits & 0x80) this.dma_channel_16bit = SB_DMA7;\n});\n\n// IRQ Status.\nregister_mixer_read(0x82, function()\n{\n    var ret = 0x20;\n    for(var i = 0; i < 16; i++)\n    {\n        ret |= i * this.irq_triggered[i];\n    }\n    return ret;\n});\n\n//\n// FM Handlers\n//\n\nSB16.prototype.fm_default_write = function(data, register, address)\n{\n    dbg_log(\"unhandled fm register write. addr:\" + register + \"|\" + h(address) + \" data:\" + h(data), LOG_SB16);\n    // No need to save into a dummy register as the registers are write-only.\n};\n\n/**\n * @param{Array} addresses\n * @param{function(number, number, number)=} handler\n */\nfunction register_fm_write(addresses, handler)\n{\n    if(!handler)\n    {\n        handler = SB16.prototype.fm_default_write;\n    }\n    for(var i = 0; i < addresses.length; i++)\n    {\n        FM_HANDLERS[addresses[i]] = handler;\n    }\n}\n\nfunction between(start, end)\n{\n    var a = [];\n    for(var i = start; i <= end; i++)\n    {\n        a.push(i);\n    }\n    return a;\n}\n\n/** @const */ var SB_FM_OPERATORS_BY_OFFSET = new Uint8Array(32);\nSB_FM_OPERATORS_BY_OFFSET[0x00] = 0;\nSB_FM_OPERATORS_BY_OFFSET[0x01] = 1;\nSB_FM_OPERATORS_BY_OFFSET[0x02] = 2;\nSB_FM_OPERATORS_BY_OFFSET[0x03] = 3;\nSB_FM_OPERATORS_BY_OFFSET[0x04] = 4;\nSB_FM_OPERATORS_BY_OFFSET[0x05] = 5;\nSB_FM_OPERATORS_BY_OFFSET[0x08] = 6;\nSB_FM_OPERATORS_BY_OFFSET[0x09] = 7;\nSB_FM_OPERATORS_BY_OFFSET[0x0A] = 8;\nSB_FM_OPERATORS_BY_OFFSET[0x0B] = 9;\nSB_FM_OPERATORS_BY_OFFSET[0x0C] = 10;\nSB_FM_OPERATORS_BY_OFFSET[0x0D] = 11;\nSB_FM_OPERATORS_BY_OFFSET[0x10] = 12;\nSB_FM_OPERATORS_BY_OFFSET[0x11] = 13;\nSB_FM_OPERATORS_BY_OFFSET[0x12] = 14;\nSB_FM_OPERATORS_BY_OFFSET[0x13] = 15;\nSB_FM_OPERATORS_BY_OFFSET[0x14] = 16;\nSB_FM_OPERATORS_BY_OFFSET[0x15] = 17;\n\nfunction get_fm_operator(register, offset)\n{\n    return register * 18 + SB_FM_OPERATORS_BY_OFFSET[offset];\n}\n\nregister_fm_write([0x01], function(bits, register, address)\n{\n    this.fm_waveform_select_enable[register] = bits & 0x20 > 0;\n    this.fm_update_waveforms();\n});\n\n// Timer 1 Count.\nregister_fm_write([0x02]);\n\n// Timer 2 Count.\nregister_fm_write([0x03]);\n\nregister_fm_write([0x04], function(bits, register, address)\n{\n    switch(register)\n    {\n        case 0:\n            // if(bits & 0x80)\n            // {\n            //     // IQR Reset\n            // }\n            // else\n            // {\n            //     // Timer masks and on/off\n            // }\n            break;\n        case 1:\n            // Four-operator enable\n            break;\n    }\n});\n\nregister_fm_write([0x05], function(bits, register, address)\n{\n    if(register === 0)\n    {\n        // No registers documented here.\n        this.fm_default_write(bits, register, address);\n        return;\n    }\n    // OPL3 Mode Enable\n});\n\nregister_fm_write([0x08], function(bits, register, address)\n{\n    // Composite sine wave on/off\n    // Note select (keyboard split selection method)\n});\n\nregister_fm_write(between(0x20, 0x35), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x20);\n    // Tremolo\n    // Vibrato\n    // Sustain\n    // KSR Envelope Scaling\n    // Frequency Multiplication Factor\n});\n\nregister_fm_write(between(0x40, 0x55), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x40);\n    // Key Scale Level\n    // Output Level\n});\n\nregister_fm_write(between(0x60, 0x75), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x60);\n    // Attack Rate\n    // Decay Rate\n});\n\nregister_fm_write(between(0x80, 0x95), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0x80);\n    // Sustain Level\n    // Release Rate\n});\n\nregister_fm_write(between(0xA0, 0xA8), function(bits, register, address)\n{\n    var channel = address - 0xA0;\n    // Frequency Number (Lower 8 bits)\n});\n\nregister_fm_write(between(0xB0, 0xB8), function(bits, register, address)\n{\n    // Key-On\n    // Block Number\n    // Frequency Number (Higher 2 bits)\n});\n\nregister_fm_write([0xBD], function(bits, register, address)\n{\n    // Tremelo Depth\n    // Vibrato Depth\n    // Percussion Mode\n    // Bass Drum Key-On\n    // Snare Drum Key-On\n    // Tom-Tom Key-On\n    // Cymbal Key-On\n    // Hi-Hat Key-On\n});\n\nregister_fm_write(between(0xC0, 0xC8), function(bits, register, address)\n{\n    // Right Speaker Enable\n    // Left Speaker Enable\n    // Feedback Modulation Factor\n    // Synthesis Type\n});\n\nregister_fm_write(between(0xE0, 0xF5), function(bits, register, address)\n{\n    var operator = get_fm_operator(register, address - 0xE0);\n    // Waveform Select\n});\n\n//\n// FM behaviours\n//\n\nSB16.prototype.fm_update_waveforms = function()\n{\n    // To be implemented.\n};\n\n//\n// General behaviours\n//\n\nSB16.prototype.sampling_rate_change = function(rate)\n{\n    this.sampling_rate = rate;\n    this.bus.send(\"dac-tell-sampling-rate\", rate);\n};\n\nSB16.prototype.get_channel_count = function()\n{\n    return this.dsp_stereo ? 2 : 1;\n};\n\nSB16.prototype.dma_transfer_size_set = function()\n{\n    this.dma_sample_count = 1 + (this.write_buffer.shift() << 0) + (this.write_buffer.shift() << 8);\n};\n\nSB16.prototype.dma_transfer_start = function()\n{\n    dbg_log(\"begin dma transfer\", LOG_SB16);\n\n    // (1) Setup appropriate settings.\n\n    this.bytes_per_sample = 1;\n    if(this.dsp_16bit) this.bytes_per_sample *= 2;\n\n    // Don't count stereo interleaved bits apparently.\n    // Disabling this line is needed for sounds to work correctly,\n    // especially double buffering autoinit mode.\n    // Learnt the hard way.\n    // if(this.dsp_stereo) this.bytes_per_sample *= 2;\n\n    this.dma_bytes_count = this.dma_sample_count * this.bytes_per_sample;\n    this.dma_bytes_block = SB_DMA_BLOCK_SAMPLES * this.bytes_per_sample;\n\n    // Ensure block size is small enough but not too small, and is divisible by 4\n    var max_bytes_block = Math.max(this.dma_bytes_count >> 2 & ~0x3, 32);\n    this.dma_bytes_block = Math.min(max_bytes_block, this.dma_bytes_block);\n\n    // (2) Wait until channel is unmasked (if not already)\n    this.dma_waiting_transfer = true;\n    if(!this.dma.channel_mask[this.dma_channel])\n    {\n        this.dma_on_unmask(this.dma_channel);\n    }\n};\n\nSB16.prototype.dma_on_unmask = function(channel)\n{\n    if(channel !== this.dma_channel || !this.dma_waiting_transfer)\n    {\n        return;\n    }\n\n    // (3) Configure amount of bytes left to transfer and tell speaker adapter\n    // to start requesting transfers\n    this.dma_waiting_transfer = false;\n    this.dma_bytes_left = this.dma_bytes_count;\n    this.dma_paused = false;\n    this.bus.send(\"dac-enable\");\n};\n\nSB16.prototype.dma_transfer_next = function()\n{\n    dbg_log(\"dma transfering next block\", LOG_SB16);\n\n    var size = Math.min(this.dma_bytes_left, this.dma_bytes_block);\n    var samples = Math.floor(size / this.bytes_per_sample);\n\n    this.dma.do_write(this.dma_syncbuffer, 0, size, this.dma_channel, (error) =>\n    {\n        dbg_log(\"dma block transfer \" + (error ? \"unsuccessful\" : \"successful\"), LOG_SB16);\n        if(error) return;\n\n        this.dma_to_dac(samples);\n        this.dma_bytes_left -= size;\n\n        if(!this.dma_bytes_left)\n        {\n            // Completed requested transfer of given size.\n            this.raise_irq(this.dma_irq);\n\n            if(this.dma_autoinit)\n            {\n                // Restart the transfer.\n                this.dma_bytes_left = this.dma_bytes_count;\n            }\n        }\n    });\n};\n\nSB16.prototype.dma_to_dac = function(sample_count)\n{\n    var amplitude = this.dsp_16bit ? 32767.5 : 127.5;\n    var offset = this.dsp_signed ? 0 : -1;\n    var repeats = this.dsp_stereo ? 1 : 2;\n\n    var buffer;\n    if(this.dsp_16bit)\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int16 : this.dma_buffer_uint16;\n    }\n    else\n    {\n        buffer = this.dsp_signed ? this.dma_buffer_int8 : this.dma_buffer_uint8;\n    }\n\n    var channel = 0;\n    for(var i = 0; i < sample_count; i++)\n    {\n        var sample = audio_normalize(buffer[i], amplitude, offset);\n        for(var j = 0; j < repeats; j++)\n        {\n            this.dac_buffers[channel].push(sample);\n            channel ^= 1;\n        }\n    }\n\n    this.dac_send();\n};\n\nSB16.prototype.dac_handle_request = function()\n{\n    if(!this.dma_bytes_left || this.dma_paused)\n    {\n        // No more data to transfer or is paused. Send whatever is in the buffers.\n        this.dac_send();\n    }\n    else\n    {\n        this.dma_transfer_next();\n    }\n};\n\nSB16.prototype.dac_send = function()\n{\n    if(!this.dac_buffers[0].length)\n    {\n        return;\n    }\n\n    var out0 = this.dac_buffers[0].shift_block(this.dac_buffers[0].length);\n    var out1 = this.dac_buffers[1].shift_block(this.dac_buffers[1].length);\n    this.bus.send(\"dac-send-data\", [out0, out1], [out0.buffer, out1.buffer]);\n};\n\nSB16.prototype.raise_irq = function(type)\n{\n    dbg_log(\"raise irq\", LOG_SB16);\n    this.irq_triggered[type] = 1;\n    this.cpu.device_raise_irq(this.irq);\n};\n\nSB16.prototype.lower_irq = function(type)\n{\n    dbg_log(\"lower irq\", LOG_SB16);\n    this.irq_triggered[type] = 0;\n    this.cpu.device_lower_irq(this.irq);\n};\n\n//\n// Helpers\n//\n\nfunction audio_normalize(value, amplitude, offset)\n{\n    return audio_clip(value / amplitude + offset, -1, 1);\n}\n\nfunction audio_clip(value, low, high)\n{\n    return (value < low) * low + (value > high) * high + (low <= value && value <= high) * value;\n}\n","\"use strict\";\n\n/** @const */\nvar FPU_LOG_OP = false;\n\nvar\n    /** @const */\n    FPU_C0 = 0x100,\n    /** @const */\n    FPU_C1 = 0x200,\n    /** @const */\n    FPU_C2 = 0x400,\n    /** @const */\n    FPU_C3 = 0x4000,\n    /** @const */\n    FPU_RESULT_FLAGS = FPU_C0 | FPU_C1 | FPU_C2 | FPU_C3,\n    /** @const */\n    FPU_STACK_TOP = 0x3800;\n\nvar\n    // precision, round & infinity control\n    /** @const */\n    FPU_PC = 3 << 8,\n    /** @const */\n    FPU_RC = 3 << 10,\n    /** @const */\n    FPU_IF = 1 << 12;\n\n// exception bits in the status word\nvar\n    /** @const */\n    FPU_EX_SF = 1 << 6,\n    /** @const */\n    FPU_EX_P = 1 << 5,\n    /** @const */\n    FPU_EX_U = 1 << 4,\n    /** @const */\n    FPU_EX_O = 1 << 3,\n    /** @const */\n    FPU_EX_Z = 1 << 2,\n    /** @const */\n    FPU_EX_D = 1 << 1,\n    /** @const */\n    FPU_EX_I = 1 << 0;\n\nvar\n    /** @const */\n    TWO_POW_63 =  0x8000000000000000;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction FPU(cpu)\n{\n    // TODO:\n    // - Precision Control\n    // - QNaN, unordered comparison\n    // - Exceptions\n\n    this.cpu = cpu;\n\n    // Why no Float80Array :-(\n    this.st = new Float64Array(8);\n\n    // used for conversion\n    /** @const */ this.float32 = new Float32Array(1);\n    /** @const */ this.float32_byte = new Uint8Array(this.float32.buffer);\n    /** @const */ this.float32_int = new Int32Array(this.float32.buffer);\n    /** @const */ this.float64 = new Float64Array(1);\n    /** @const */ this.float64_byte = new Uint8Array(this.float64.buffer);\n    /** @const */ this.float64_int = new Int32Array(this.float64.buffer);\n\n    /** @const */ this.st8 = new Uint8Array(this.st.buffer);\n    /** @const */ this.st32 = new Int32Array(this.st.buffer);\n\n\n    // bitmap of which stack registers are empty\n    this.stack_empty = 0xff;\n    this.stack_ptr = 0;\n\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_ip_selector = 0;\n    this.fpu_opcode = 0;\n    this.fpu_dp = 0;\n    this.fpu_dp_selector = 0;\n\n    /** @const */\n    this.indefinite_nan = NaN;\n\n    /** @const */\n    this.constants = new Float64Array([\n        1, Math.log(10) / Math.LN2, Math.LOG2E, Math.PI,\n        Math.log(2) / Math.LN10, Math.LN2, 0\n    ]);\n\n}\n\nFPU.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.st;\n    state[1] = this.stack_empty;\n    state[2] = this.stack_ptr;\n    state[3] = this.control_word;\n    state[4] = this.fpu_dp_selector;\n    state[5] = this.fpu_ip;\n    state[6] = this.fpu_ip_selector;\n    state[7] = this.fpu_dp;\n    state[8] = this.fpu_dp_selector;\n    state[9] = this.fpu_opcode;\n\n    return state;\n};\n\nFPU.prototype.set_state = function(state)\n{\n    this.st.set(state[0]);\n    this.stack_empty = state[1];\n    this.stack_ptr = state[2];\n    this.control_word = state[3];\n    this.fpu_dp_selector = state[4];\n    this.fpu_ip = state[5];\n    this.fpu_ip_selector = state[6];\n    this.fpu_dp = state[7];\n    this.fpu_dp_selector = state[8];\n    this.fpu_opcode = state[9];\n};\n\nFPU.prototype.fpu_unimpl = function()\n{\n    dbg_trace();\n    if(DEBUG) throw \"fpu: unimplemented\";\n    else this.cpu.trigger_ud();\n}\n\nFPU.prototype.stack_fault = function()\n{\n    // TODO: Interrupt\n    this.status_word |= FPU_EX_SF | FPU_EX_I;\n}\n\nFPU.prototype.invalid_arithmatic = function()\n{\n    this.status_word |= FPU_EX_I;\n}\n\nFPU.prototype.fcom = function(y)\n{\n    var x = this.get_st0();\n\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === y)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else\n    {\n        this.status_word |= FPU_C0 | FPU_C2 | FPU_C3;\n    }\n}\n\nFPU.prototype.fucom = function(y)\n{\n    // TODO\n    this.fcom(y);\n}\n\n\nFPU.prototype.fcomi = function(y)\n{\n    var x = this.st[this.stack_ptr];\n\n    this.cpu.flags_changed &= ~(1 | flag_parity | flag_zero);\n    this.cpu.flags &= ~(1 | flag_parity | flag_zero);\n\n    if(x > y)\n    {\n    }\n    else if(y > x)\n    {\n        this.cpu.flags |= 1;\n    }\n    else if(x === y)\n    {\n        this.cpu.flags |= flag_zero;\n    }\n    else\n    {\n        this.cpu.flags |= 1 | flag_parity | flag_zero;\n    }\n}\n\nFPU.prototype.fucomi = function(y)\n{\n    // TODO\n    this.fcomi(y);\n}\n\nFPU.prototype.ftst = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n\n    if(isNaN(x))\n    {\n        this.status_word |= FPU_C3 | FPU_C2 | FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x < 0)\n    {\n        this.status_word |= FPU_C0;\n    }\n\n    // TODO: unordered (x is nan, etc)\n}\n\nFPU.prototype.fxam = function(x)\n{\n    this.status_word &= ~FPU_RESULT_FLAGS;\n    this.status_word |= this.sign(0) << 9;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word |= FPU_C3 | FPU_C0;\n    }\n    else if(isNaN(x))\n    {\n        this.status_word |= FPU_C0;\n    }\n    else if(x === 0)\n    {\n        this.status_word |= FPU_C3;\n    }\n    else if(x === Infinity || x === -Infinity)\n    {\n        this.status_word |= FPU_C2 | FPU_C0;\n    }\n    else\n    {\n        this.status_word |= FPU_C2;\n    }\n    // TODO:\n    // Unsupported, Denormal\n}\n\nFPU.prototype.finit = function()\n{\n    this.control_word = 0x37F;\n    this.status_word = 0;\n    this.fpu_ip = 0;\n    this.fpu_dp = 0;\n    this.fpu_opcode = 0;\n\n    this.stack_empty = 0xFF;\n    this.stack_ptr = 0;\n}\n\nFPU.prototype.load_status_word = function()\n{\n    return this.status_word & ~(7 << 11) | this.stack_ptr << 11;\n}\n\nFPU.prototype.set_status_word = function(sw)\n{\n    this.status_word = sw & ~(7 << 11);\n    this.stack_ptr = sw >> 11 & 7;\n}\n\nFPU.prototype.load_tag_word = function()\n{\n    var tag_word = 0,\n        value;\n\n    for(var i = 0; i < 8; i++)\n    {\n        value = this.st[i];\n\n        if(this.stack_empty >> i & 1)\n        {\n            tag_word |= 3 << (i << 1);\n        }\n        else if(value === 0)\n        {\n            tag_word |= 1 << (i << 1);\n        }\n        else if(!isFinite(value))\n        {\n            tag_word |= 2 << (i << 1);\n        }\n    }\n\n    //dbg_log(\"load  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty) + \" sp=\" + this.stack_ptr, LOG_FPU);\n\n    return tag_word;\n}\n\nFPU.prototype.set_tag_word = function(tag_word)\n{\n    this.stack_empty = 0;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.stack_empty |= (tag_word >> i) & (tag_word >> i + 1) & 1 << i;\n    }\n\n    //dbg_log(\"set_tag_word  tw=\" + h(tag_word) + \" se=\" + h(this.stack_empty), LOG_FPU);\n}\n\nFPU.prototype.fstenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.cpu.writable_or_pagefault(addr, 26);\n\n        this.cpu.safe_write16(addr, this.control_word);\n\n        this.cpu.safe_write16(addr + 4, this.load_status_word());\n        this.cpu.safe_write16(addr + 8, this.load_tag_word());\n\n        this.cpu.safe_write32(addr + 12, this.fpu_ip);\n        this.cpu.safe_write16(addr + 16, this.fpu_ip_selector);\n        this.cpu.safe_write16(addr + 18, this.fpu_opcode);\n        this.cpu.safe_write32(addr + 20, this.fpu_dp);\n        this.cpu.safe_write16(addr + 24, this.fpu_dp_selector);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fldenv = function(addr)\n{\n    if(this.cpu.is_osize_32())\n    {\n        this.control_word = this.cpu.safe_read16(addr);\n\n        this.set_status_word(this.cpu.safe_read16(addr + 4));\n        this.set_tag_word(this.cpu.safe_read16(addr + 8));\n\n        this.fpu_ip = this.cpu.safe_read32s(addr + 12);\n        this.fpu_ip_selector = this.cpu.safe_read16(addr + 16);\n        this.fpu_opcode = this.cpu.safe_read16(addr + 18);\n        this.fpu_dp = this.cpu.safe_read32s(addr + 20);\n        this.fpu_dp_selector = this.cpu.safe_read16(addr + 24);\n    }\n    else\n    {\n        this.fpu_unimpl();\n    }\n}\n\nFPU.prototype.fsave = function(addr)\n{\n    this.cpu.writable_or_pagefault(addr, 108);\n\n    this.fstenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.store_m80(addr, this.st[this.stack_ptr + i & 7]);\n        addr += 10;\n    }\n\n    //dbg_log(\"save st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n\n    this.finit();\n}\n\nFPU.prototype.frstor = function(addr)\n{\n    this.fldenv(addr);\n    addr += 28;\n\n    for(var i = 0; i < 8; i++)\n    {\n        this.st[(i + this.stack_ptr) & 7] = this.load_m80(addr);\n        addr += 10;\n    }\n\n    //dbg_log(\"rstor st=\" + this.stack_ptr + \" \" + [].slice.call(this.st), LOG_FPU);\n}\n\nFPU.prototype.fxtract = function()\n{\n    this.float64[0] = this.get_st0();\n\n    var exponent = ((this.float64_byte[7] & 0x7F) << 4 | this.float64_byte[6] >> 4) - 0x3FF;\n\n    this.float64_byte[7] = 0x3F | (this.float64_byte[7] & 0x80);\n    this.float64_byte[6] |= 0xF0;\n\n    this.st[this.stack_ptr] = exponent;\n    this.push(this.float64[0]);\n};\n\nFPU.prototype.integer_round = function(f)\n{\n    var rc = this.control_word >> 10 & 3;\n\n    if(rc === 0)\n    {\n        // Round to nearest, or even if equidistant\n        var rounded = Math.round(f);\n\n        if(rounded - f === 0.5 && (rounded % 2))\n        {\n            // Special case: Math.round rounds to positive infinity\n            // if equidistant\n            rounded--;\n        }\n\n        return rounded;\n    }\n        // rc=3 is truncate -> floor for positive numbers\n    else if(rc === 1 || (rc === 3 && f > 0))\n    {\n        return Math.floor(f);\n    }\n    else\n    {\n        return Math.ceil(f);\n    }\n}\n\nFPU.prototype.truncate = function(x)\n{\n    return x > 0 ? Math.floor(x) : Math.ceil(x);\n}\n\nFPU.prototype.push = function(x)\n{\n    this.stack_ptr = this.stack_ptr - 1 & 7;\n\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_empty &= ~(1 << this.stack_ptr);\n        this.st[this.stack_ptr] = x;\n    }\n    else\n    {\n        this.status_word |= FPU_C1;\n        this.stack_fault();\n        this.st[this.stack_ptr] = this.indefinite_nan;\n    }\n}\n\nFPU.prototype.pop = function()\n{\n    this.stack_empty |= 1 << this.stack_ptr;\n    this.stack_ptr = this.stack_ptr + 1 & 7;\n}\n\nFPU.prototype.get_sti = function(i)\n{\n    dbg_assert(typeof i === \"number\" && i >= 0 && i < 8);\n\n    i = i + this.stack_ptr & 7;\n\n    if(this.stack_empty >> i & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[i];\n    }\n}\n\nFPU.prototype.get_st0 = function()\n{\n    if(this.stack_empty >> this.stack_ptr & 1)\n    {\n        this.status_word &= ~FPU_C1;\n        this.stack_fault();\n        return this.indefinite_nan;\n    }\n    else\n    {\n        return this.st[this.stack_ptr];\n    }\n}\n\nFPU.prototype.load_m80 = function(addr)\n{\n    var exponent = this.cpu.safe_read16(addr + 8),\n        sign,\n        low = this.cpu.safe_read32s(addr) >>> 0,\n        high = this.cpu.safe_read32s(addr + 4) >>> 0;\n\n    sign = exponent >> 15;\n    exponent &= ~0x8000;\n\n    if(exponent === 0)\n    {\n        // TODO: denormal numbers\n        return 0;\n    }\n\n    if(exponent < 0x7FFF)\n    {\n        exponent -= 0x3FFF;\n    }\n    else\n    {\n        // TODO: NaN, Infinity\n        //dbg_log(\"Load m80 TODO\", LOG_FPU);\n        this.float64_byte[7] = 0x7F | sign << 7;\n        this.float64_byte[6] = 0xF0 | high >> 30 << 3 & 0x08;\n\n        this.float64_byte[5] = 0;\n        this.float64_byte[4] = 0;\n\n        this.float64_int[0] = 0;\n\n        return this.float64[0];\n    }\n\n    // Note: some bits might be lost at this point\n    var mantissa = low + 0x100000000 * high;\n\n    if(sign)\n    {\n        mantissa = -mantissa;\n    }\n\n    //console.log(\"m: \" + mantissa);\n    //console.log(\"e: \" + exponent);\n    //console.log(\"s: \" + this.sign);\n    //console.log(\"f: \" + mantissa * Math.pow(2, exponent - 63));\n\n    // Simply compute the 64 bit floating point number.\n    // An alternative write the mantissa, sign and exponent in the\n    // float64_byte and return float64[0]\n\n    return mantissa * Math.pow(2, exponent - 63);\n}\n\nFPU.prototype.store_m80 = function(addr, n)\n{\n    this.float64[0] = n;\n\n    var sign = this.float64_byte[7] & 0x80,\n        exponent = (this.float64_byte[7] & 0x7f) << 4 | this.float64_byte[6] >> 4,\n        low,\n        high;\n\n    if(exponent === 0x7FF)\n    {\n        // all bits set (NaN and infinity)\n        exponent = 0x7FFF;\n        low = 0;\n        high = 0x80000000 | (this.float64_int[1] & 0x80000) << 11;\n    }\n    else if(exponent === 0)\n    {\n        // zero and denormal numbers\n        // Just assume zero for now\n        low = 0;\n        high = 0;\n    }\n    else\n    {\n        exponent += 0x3FFF - 0x3FF;\n\n        // does the mantissa need to be adjusted?\n        low = this.float64_int[0] << 11;\n        high = 0x80000000 | (this.float64_int[1] & 0xFFFFF) << 11 | (this.float64_int[0] >>> 21);\n    }\n\n    dbg_assert(exponent >= 0 && exponent < 0x8000);\n\n    this.cpu.safe_write32(addr, low);\n    this.cpu.safe_write32(addr + 4, high);\n\n    this.cpu.safe_write16(addr + 8, sign << 8 | exponent);\n}\n\nFPU.prototype.load_m64 = function(addr)\n{\n    var low = this.cpu.safe_read32s(addr),\n        high = this.cpu.safe_read32s(addr + 4);\n\n    this.float64_int[0] = low;\n    this.float64_int[1] = high;\n\n    return this.float64[0];\n};\n\nFPU.prototype.store_m64 = function(addr, i)\n{\n    this.cpu.writable_or_pagefault(addr, 8);\n\n    this.float64[0] = this.get_sti(i);\n\n    this.cpu.safe_write32(addr, this.float64_int[0]);\n    this.cpu.safe_write32(addr + 4, this.float64_int[1]);\n};\n\nFPU.prototype.load_m32 = function(addr)\n{\n    this.float32_int[0] = this.cpu.safe_read32s(addr);\n\n    return this.float32[0];\n};\n\nFPU.prototype.store_m32 = function(addr, x)\n{\n    this.float32[0] = x;\n\n    this.cpu.safe_write32(addr, this.float32_int[0]);\n};\n\n// sign of a number on the stack\nFPU.prototype.sign = function(i)\n{\n    return this.st8[(this.stack_ptr + i & 7) << 3 | 7] >> 7;\n};\n\n\nFPU.prototype.dbg_log_fpu_op = function(op, imm8)\n{\n    if(!FPU_LOG_OP)\n    {\n        return;\n    }\n\n    if(imm8 >= 0xC0)\n    {\n        dbg_log(h(op, 2) + \" \" + h(imm8, 2) + \"/\" + (imm8 >> 3 & 7) + \"/\" + (imm8 & 7) +\n                \" @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n    else\n    {\n        dbg_log(h(op, 2) + \" /\" + (imm8 >> 3 & 7) +\n                \"     @\" + h(this.cpu.instruction_pointer >>> 0, 8) + \" sp=\" + this.stack_ptr + \" st=\" + h(this.stack_empty, 2), LOG_FPU);\n    }\n}\n\n\nFPU.prototype.fwait = function()\n{\n    // NOP unless FPU instructions run in parallel with CPU instructions\n};\n\n\nFPU.prototype.op_D8_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + sti;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * sti;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D8_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD8, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.load_m32(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var sti = this.get_sti(low);\n            this.push(sti);\n            break;\n        case 1:\n            // fxch\n            var sti = this.get_sti(low);\n\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            this.st[this.stack_ptr] = sti;\n            break;\n        case 2:\n            switch(low)\n            {\n                case 0:\n                    // fnop\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 3:\n            // fstp1\n            this.fpu_unimpl();\n            break;\n        case 4:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fchs\n                    this.st[this.stack_ptr] = -st0;\n                    break;\n                case 1:\n                    // fabs\n                    this.st[this.stack_ptr] = Math.abs(st0);\n                    break;\n                case 4:\n                    this.ftst(st0);\n                    break;\n                case 5:\n                    this.fxam(st0);\n                    break;\n                default:\n                    dbg_log(low);\n                    this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.push(this.constants[low]);\n            break;\n        case 6:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // f2xm1\n                    this.st[this.stack_ptr] = Math.pow(2, st0) - 1;\n                    break;\n                case 1:\n                    // fyl2x\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    // fptan\n                    this.st[this.stack_ptr] = Math.tan(st0);\n                    this.push(1); // no bug: push constant 1\n                    break;\n                case 3:\n                    // fpatan\n                    this.st[this.stack_ptr + 1 & 7] = Math.atan2(this.get_sti(1), st0);\n                    this.pop();\n                    break;\n                case 4:\n                    this.fxtract();\n                    break;\n                case 5:\n                    // fprem1\n                    this.st[this.stack_ptr] = st0 % this.get_sti(1);\n                    break;\n                case 6:\n                    // fdecstp\n                    this.stack_ptr = this.stack_ptr - 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                case 7:\n                    // fincstp\n                    this.stack_ptr = this.stack_ptr + 1 & 7;\n                    this.status_word &= ~FPU_C1;\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        case 7:\n            var st0 = this.get_st0();\n\n            switch(low)\n            {\n                case 0:\n                    // fprem\n                    var st1 = this.get_sti(1);\n                    var fprem_quotient = Math.trunc(st0 / st1);\n                    this.st[this.stack_ptr] = st0 % st1;\n\n                    this.status_word &= ~(FPU_C0 | FPU_C1 | FPU_C3);\n                    if (fprem_quotient & 1) {\n                        this.status_word |= FPU_C1;\n                    }\n                    if (fprem_quotient & (1 << 1)) {\n                        this.status_word |= FPU_C3;\n                    }\n                    if (fprem_quotient & (1 << 2)) {\n                        this.status_word |= FPU_C0;\n                    }\n\n                    this.status_word &= ~FPU_C2;\n                    break;\n                case 1:\n                    // fyl2xp1: y * log2(x+1) and pop\n                    this.st[this.stack_ptr + 1 & 7] = this.get_sti(1) * Math.log(st0 + 1) / Math.LN2;\n                    this.pop();\n                    break;\n                case 2:\n                    this.st[this.stack_ptr] = Math.sqrt(st0);\n                    break;\n                case 3:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    this.push(Math.cos(st0));\n                    break;\n                case 4:\n                    // frndint\n                    this.st[this.stack_ptr] = this.integer_round(st0);\n                    break;\n                case 5:\n                    // fscale\n                    this.st[this.stack_ptr] = st0 * Math.pow(2, this.truncate(this.get_sti(1)));\n                    break;\n                case 6:\n                    this.st[this.stack_ptr] = Math.sin(st0);\n                    break;\n                case 7:\n                    this.st[this.stack_ptr] = Math.cos(st0);\n                    break;\n                default:\n                    dbg_assert(false);\n            }\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_D9_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xD9, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m32(addr);\n            this.push(data);\n            break;\n        case 1:\n            // not defined\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m32(addr, this.get_st0());\n            break;\n        case 3:\n            // fstp\n            this.store_m32(addr, this.get_st0());\n            this.pop();\n            break;\n        case 4:\n            this.fldenv(addr);\n            break;\n        case 5:\n            // fldcw\n            var word = this.cpu.safe_read16(addr);\n            this.control_word = word;\n            break;\n        case 6:\n            this.fstenv(addr);\n            break;\n        case 7:\n            // fstcw\n            this.cpu.safe_write16(addr, this.control_word);\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DA_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovb\n            if(this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmove\n            if(this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovbe\n            if(this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovu\n            if(this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 5:\n            if(low === 1)\n            {\n                // fucompp\n                this.fucom(this.get_sti(1));\n                this.pop();\n                this.pop();\n            }\n            else\n            {\n                dbg_log(mod); this.fpu_unimpl();\n            }\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DA_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDA, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m32 = this.cpu.safe_read32s(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m32;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m32;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m32);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m32);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m32;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m32 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m32;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m32 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DB_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fcmovnb\n            if(!this.cpu.test_b())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 1:\n            // fcmovne\n            if(!this.cpu.test_z())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 2:\n            // fcmovnbe\n            if(!this.cpu.test_be())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 3:\n            // fcmovnu\n            if(!this.cpu.test_p())\n            {\n                this.st[this.stack_ptr] = this.get_sti(low);\n                this.stack_empty &= ~(1 << this.stack_ptr);\n            }\n            break;\n        case 4:\n            if(imm8 === 0xE3)\n            {\n                this.finit();\n            }\n            else if(imm8 === 0xE4)\n            {\n                // fsetpm\n                // treat as nop\n            }\n            else if(imm8 === 0xE1)\n            {\n                // fdisi\n                // also treat as nop\n            }\n            else if(imm8 === 0xE2)\n            {\n                // fclex\n                this.status_word = 0;\n            }\n            else\n            {\n                dbg_log(h(imm8));\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            this.fucomi(this.get_sti(low));\n            break;\n        case 6:\n            this.fcomi(this.get_sti(low));\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DB_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDB, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fild\n            var int32 = this.cpu.safe_read32s(addr);\n            this.push(int32);\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                // TODO: Invalid operation\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFFFFFF && st0 >= -0x80000000)\n            {\n                this.cpu.safe_write32(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write32(addr, 0x80000000|0);\n            }\n            this.pop();\n            break;\n        case 5:\n            // fld\n            this.push(this.load_m80(addr));\n            break;\n        case 7:\n            // fstp\n            this.cpu.writable_or_pagefault(addr, 10);\n            this.store_m80(addr, this.get_st0());\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DC_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmul\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcom\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(sti);\n            this.pop();\n            break;\n        case 4:\n            // fsubr\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsub\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivr\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdiv\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DC_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDC, imm8);\n\n    var\n        mod = imm8 >> 3 & 7,\n        m64 = this.load_m64(addr);\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m64;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m64;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m64);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m64);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m64;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m64 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m64;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m64 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DD_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // ffree\n            this.stack_empty |= 1 << (this.stack_ptr + low & 7);\n            break;\n        case 2:\n            // fst\n            this.st[this.stack_ptr + low & 7] = this.get_st0();\n            break;\n        case 3:\n            // fstp\n            if(low === 0)\n            {\n                this.pop();\n            }\n            else\n            {\n                this.st[this.stack_ptr + low & 7] = this.get_st0();\n                this.pop();\n            }\n            break;\n        case 4:\n            this.fucom(this.get_sti(low));\n            break;\n        case 5:\n            // fucomp\n            this.fucom(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DD_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDD, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            // fld\n            var data = this.load_m64(addr);\n            this.push(data);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fst\n            this.store_m64(addr, 0);\n            break;\n        case 3:\n            // fstp\n            this.store_m64(addr, 0);\n            this.pop();\n            break;\n        case 4:\n            this.frstor(addr);\n            break;\n        case 5:\n            // nothing\n            this.fpu_unimpl();\n            break;\n        case 6:\n            // fsave\n            this.fsave(addr);\n            break;\n        case 7:\n            // fnstsw / store status word\n            this.cpu.safe_write16(addr, this.load_status_word());\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\n\nFPU.prototype.op_DE_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7,\n        low_ptr = this.stack_ptr + low & 7,\n        sti = this.get_sti(low),\n        st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // faddp\n            this.st[low_ptr] = sti + st0;\n            break;\n        case 1:\n            // fmulp\n            this.st[low_ptr] = sti * st0;\n            break;\n        case 2:\n            // fcomp\n            this.fcom(sti);\n            break;\n        case 3:\n            // fcompp\n            if(low === 1)\n            {\n                this.fcom(this.st[low_ptr]);\n                this.pop();\n            }\n            else\n            {\n                // not a valid encoding\n                dbg_log(mod);\n                this.fpu_unimpl();\n            }\n            break;\n        case 4:\n            // fsubrp\n            this.st[low_ptr] = st0 - sti;\n            break;\n        case 5:\n            // fsubp\n            this.st[low_ptr] = sti - st0;\n            break;\n        case 6:\n            // fdivrp\n            this.st[low_ptr] = st0 / sti;\n            break;\n        case 7:\n            // fdivp\n            this.st[low_ptr] = sti / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n\n    this.pop();\n};\n\nFPU.prototype.op_DE_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDE, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n    var st0 = this.get_st0();\n\n    switch(mod)\n    {\n        case 0:\n            // fadd\n            this.st[this.stack_ptr] = st0 + m16;\n            break;\n        case 1:\n            // fmul\n            this.st[this.stack_ptr] = st0 * m16;\n            break;\n        case 2:\n            // fcom\n            this.fcom(m16);\n            break;\n        case 3:\n            // fcomp\n            this.fcom(m16);\n            this.pop();\n            break;\n        case 4:\n            // fsub\n            this.st[this.stack_ptr] = st0 - m16;\n            break;\n        case 5:\n            // fsubr\n            this.st[this.stack_ptr] = m16 - st0;\n            break;\n        case 6:\n            // fdiv\n            this.st[this.stack_ptr] = st0 / m16;\n            break;\n        case 7:\n            // fdivr\n            this.st[this.stack_ptr] = m16 / st0;\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n\nFPU.prototype.op_DF_reg = function(imm8)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7,\n        low = imm8 & 7;\n\n    switch(mod)\n    {\n        case 4:\n            if(imm8 === 0xE0)\n            {\n                // fnstsw\n                this.cpu.reg16[reg_ax] = this.load_status_word();\n            }\n            else\n            {\n                dbg_log(imm8);\n                this.fpu_unimpl();\n            }\n            break;\n        case 5:\n            // fucomip\n            this.fucomi(this.get_sti(low));\n            this.pop();\n            break;\n        case 6:\n            // fcomip\n            this.fcomi(this.get_sti(low));\n            this.pop();\n            break;\n        default:\n            dbg_log(mod);\n            this.fpu_unimpl();\n    }\n};\n\nFPU.prototype.op_DF_mem = function(imm8, addr)\n{\n    this.dbg_log_fpu_op(0xDF, imm8);\n\n    var mod = imm8 >> 3 & 7;\n\n    switch(mod)\n    {\n        case 0:\n            var m16 = this.cpu.safe_read16(addr) << 16 >> 16;\n\n            this.push(m16);\n            break;\n        case 1:\n            // fisttp\n            this.fpu_unimpl();\n            break;\n        case 2:\n            // fist\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            break;\n        case 3:\n            // fistp\n            var st0 = this.integer_round(this.get_st0());\n            if(st0 <= 0x7FFF && st0 >= -0x8000)\n            {\n                this.cpu.safe_write16(addr, st0);\n            }\n            else\n            {\n                this.invalid_arithmatic();\n                this.cpu.safe_write16(addr, 0x8000);\n            }\n            this.pop();\n            break;\n        case 4:\n            // fbld\n            this.fpu_unimpl();\n            break;\n        case 5:\n            // fild\n            var low = this.cpu.safe_read32s(addr) >>> 0,\n                high = this.cpu.safe_read32s(addr + 4);\n\n            var m64 = low + 0x100000000 * high;\n\n            this.push(m64);\n            break;\n        case 6:\n            // fbstp\n            this.fpu_unimpl();\n            break;\n        case 7:\n            this.cpu.writable_or_pagefault(addr, 8);\n\n            // fistp\n            var st0 = this.integer_round(this.get_st0()),\n                st0_low,\n                st0_high;\n\n            if(st0 < TWO_POW_63 && st0 >= -TWO_POW_63)\n            {\n                st0_low = st0 | 0;\n                st0_high = st0 / 0x100000000 | 0;\n\n                if(st0_high === 0 && st0 < 0)\n                    st0_high = -1;\n            }\n            else\n            {\n                // write 0x8000000000000000\n                st0_low  = 0;\n                st0_high = 0x80000000 | 0;\n                this.invalid_arithmatic();\n            }\n\n            this.cpu.safe_write32(addr, st0_low);\n            this.cpu.safe_write32(addr + 4, st0_high);\n\n            this.pop();\n            break;\n        default:\n            dbg_assert(false);\n    }\n};\n","\"use strict\";\n\n/** @param {number=} length */\nfunction hex_dump(buffer, length)\n{\n    var result = [];\n    length = length || buffer.byteLength;\n    var addr = 0;\n    var line, byt;\n\n    for(var i = 0; i < length >> 4; i++)\n    {\n        line = h(addr + (i << 4), 5) + \"   \";\n\n        for(var j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += h(byt, 2) + \" \";\n        }\n\n        line += \"  \";\n\n        for(j = 0; j < 0x10; j++)\n        {\n            byt = buffer[addr + (i << 4) + j];\n            line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n        }\n\n        result.push(line);\n    }\n\n    return \"\\n\" + result.join(\"\\n\");\n}\n\n/** @const */\nvar CDROM_SECTOR_SIZE = 2048;\n/** @const */\nvar HD_SECTOR_SIZE = 512;\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {boolean} is_cd\n * @param {number} nr\n * @param {BusConnector} bus\n * */\nfunction IDEDevice(cpu, buffer, is_cd, nr, bus)\n{\n    this.master = new IDEInterface(this, cpu, buffer, is_cd, nr, 0, bus);\n    this.slave = new IDEInterface(this, cpu, undefined, false, nr, 1, bus);\n\n    this.current_interface = this.master;\n\n    this.cpu = cpu;\n\n    // gets set via PCI in seabios, likely doesn't matter\n    if(nr === 0)\n    {\n        this.ata_port = 0x1F0;\n        this.irq = 14;\n\n        this.pci_id = 0x1E << 3;\n    }\n    else if(nr === 1)\n    {\n        this.ata_port = 0x170;\n        this.irq = 15;\n\n        this.pci_id = 0x1F << 3;\n    }\n    else\n    {\n        dbg_assert(false, \"IDE device with nr \" + nr + \" ignored\", LOG_DISK);\n    }\n\n    // alternate status, starting at 3f4/374\n    /** @type {number} */\n    this.ata_port_high = this.ata_port | 0x204;\n\n    /** @type {number} */\n    this.master_port = 0xB400;\n\n    this.pci_space = [\n        0x86, 0x80, 0x10, 0x70, 0x05, 0x00, 0xA0, 0x02,\n        0x00, 0x80, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00,\n        this.ata_port & 0xFF | 1,      this.ata_port >> 8, 0x00, 0x00,\n        this.ata_port_high & 0xFF | 1, this.ata_port_high >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, // second device\n        0x00, 0x00, 0x00, 0x00, // second device\n        this.master_port & 0xFF | 1,   this.master_port >> 8, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00,\n        0x43, 0x10, 0xD4, 0x82,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, this.irq, 0x01, 0x00, 0x00,\n\n        // 0x40\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        // 0x80\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    ];\n    this.pci_bars = [\n        {\n            size: 8,\n        },\n        {\n            size: 4,\n        },\n        undefined,\n        undefined,\n        {\n            size: 0x10,\n        },\n    ];\n    this.name = \"ide\" + nr;\n\n    /** @type {number} */\n    this.device_control = 2;\n\n    // status\n    cpu.io.register_read(this.ata_port | 7, this, function() {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        return this.read_status();\n    });\n    cpu.io.register_read(this.ata_port_high | 2, this, this.read_status);\n\n    cpu.io.register_write(this.ata_port_high | 2, this, this.write_control);\n    cpu.io.register_read(this.ata_port | 0, this, function()\n    {\n        return this.current_interface.read_data(1);\n    }, function()\n    {\n        return this.current_interface.read_data(2);\n    }, function()\n    {\n        return this.current_interface.read_data(4);\n    });\n\n    cpu.io.register_read(this.ata_port | 1, this, function()\n    {\n        dbg_log(\"Read error: \" + h(this.current_interface.error & 0xFF) +\n                \" slave=\" + (this.current_interface === this.slave), LOG_DISK);\n        return this.current_interface.error;\n    });\n    cpu.io.register_read(this.ata_port | 2, this, function()\n    {\n        dbg_log(\"Read bytecount: \" + h(this.current_interface.bytecount & 0xFF), LOG_DISK);\n        return this.current_interface.bytecount & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 3, this, function()\n    {\n        dbg_log(\"Read sector: \" + h(this.current_interface.sector & 0xFF), LOG_DISK);\n        return this.current_interface.sector & 0xFF;\n    });\n\n    cpu.io.register_read(this.ata_port | 4, this, function()\n    {\n        dbg_log(\"Read 1F4: \" + h(this.current_interface.cylinder_low & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_low & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 5, this, function()\n    {\n        dbg_log(\"Read 1F5: \" + h(this.current_interface.cylinder_high & 0xFF), LOG_DISK);\n        return this.current_interface.cylinder_high & 0xFF;\n    });\n    cpu.io.register_read(this.ata_port | 6, this, function()\n    {\n        dbg_log(\"Read 1F6\", LOG_DISK);\n        return this.current_interface.drive_head;\n    });\n\n    cpu.io.register_write(this.ata_port | 0, this, function(data)\n    {\n        this.current_interface.write_data_port8(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port16(data);\n    }, function(data)\n    {\n        this.current_interface.write_data_port32(data);\n    });\n\n    cpu.io.register_write(this.ata_port | 1, this, function(data)\n    {\n        dbg_log(\"1F1/lba_count: \" + h(data), LOG_DISK);\n        this.master.lba_count = (this.master.lba_count << 8 | data) & 0xFFFF;\n        this.slave.lba_count = (this.slave.lba_count << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 2, this, function(data)\n    {\n        dbg_log(\"1F2/bytecount: \" + h(data), LOG_DISK);\n        this.master.bytecount = (this.master.bytecount << 8 | data) & 0xFFFF;\n        this.slave.bytecount = (this.slave.bytecount << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 3, this, function(data)\n    {\n        dbg_log(\"1F3/sector: \" + h(data), LOG_DISK);\n        this.master.sector = (this.master.sector << 8 | data) & 0xFFFF;\n        this.slave.sector = (this.slave.sector << 8 | data) & 0xFFFF;\n    });\n\n    cpu.io.register_write(this.ata_port | 4, this, function(data)\n    {\n        dbg_log(\"1F4/sector low: \" + h(data), LOG_DISK);\n        this.master.cylinder_low = (this.master.cylinder_low << 8 | data) & 0xFFFF;\n        this.slave.cylinder_low = (this.slave.cylinder_low << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 5, this, function(data)\n    {\n        dbg_log(\"1F5/sector high: \" + h(data), LOG_DISK);\n        this.master.cylinder_high = (this.master.cylinder_high << 8 | data) & 0xFFFF;\n        this.slave.cylinder_high = (this.slave.cylinder_high << 8 | data) & 0xFFFF;\n    });\n    cpu.io.register_write(this.ata_port | 6, this, function(data)\n    {\n        var slave = data & 0x10;\n        var mode = data & 0xE0;\n\n        dbg_log(\"1F6/drive: \" + h(data, 2), LOG_DISK);\n\n        if(slave)\n        {\n            dbg_log(\"Slave\", LOG_DISK);\n            this.current_interface = this.slave;\n        }\n        else\n        {\n            this.current_interface = this.master;\n        }\n\n        this.master.drive_head = data;\n        this.slave.drive_head = data;\n        this.master.is_lba = this.slave.is_lba = data >> 6 & 1;\n        this.master.head = this.slave.head = data & 0xF;\n    });\n\n    /** @type {number} */\n    this.prdt_addr = 0;\n\n    /** @type {number} */\n    this.dma_status = 0;\n\n    /** @type {number} */\n    this.dma_command = 0;\n\n    cpu.io.register_write(this.ata_port | 7, this, function(data)\n    {\n        dbg_log(\"lower irq\", LOG_DISK);\n        this.cpu.device_lower_irq(this.irq);\n        this.current_interface.ata_command(data);\n    });\n\n    cpu.io.register_read(this.master_port | 4, this, undefined, undefined, this.dma_read_addr);\n    cpu.io.register_write(this.master_port | 4, this, undefined, undefined, this.dma_set_addr);\n\n    cpu.io.register_read(this.master_port, this,\n                         this.dma_read_command8, undefined, this.dma_read_command);\n    cpu.io.register_write(this.master_port, this,\n                          this.dma_write_command8, undefined, this.dma_write_command);\n\n    cpu.io.register_read(this.master_port | 2, this, this.dma_read_status);\n    cpu.io.register_write(this.master_port | 2, this, this.dma_write_status);\n\n    cpu.io.register_read(this.master_port | 0x8, this, function() {\n        dbg_log(\"DMA read 0x8\", LOG_DISK); return 0;\n    });\n    cpu.io.register_read(this.master_port | 0xA, this, function() {\n        dbg_log(\"DMA read 0xA\", LOG_DISK); return 0;\n    });\n\n    cpu.devices.pci.register_device(this);\n\n    DEBUG && Object.seal(this);\n}\n\nIDEDevice.prototype.read_status = function()\n{\n    if(this.current_interface.buffer)\n    {\n        var ret = this.current_interface.status;\n        dbg_log(\"ATA read status: \" + h(ret, 2), LOG_DISK);\n        return ret;\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nIDEDevice.prototype.write_control = function(data)\n{\n    dbg_log(\"set device control: \" + h(data, 2) + \" interrupts \" +\n            ((data & 2) ? \"disabled\" : \"enabled\"), LOG_DISK);\n\n    if(data & 4)\n    {\n        dbg_log(\"Reset via control port\", LOG_DISK);\n\n        this.cpu.device_lower_irq(this.irq);\n\n        this.master.device_reset();\n        this.slave.device_reset();\n    }\n\n    this.device_control = data;\n};\n\nIDEDevice.prototype.dma_read_addr = function()\n{\n    dbg_log(\"dma get address: \" + h(this.prdt_addr, 8), LOG_DISK);\n    return this.prdt_addr;\n};\n\nIDEDevice.prototype.dma_set_addr = function(data)\n{\n    dbg_log(\"dma set address: \" + h(data, 8), LOG_DISK);\n    this.prdt_addr = data;\n};\n\nIDEDevice.prototype.dma_read_status = function()\n{\n    dbg_log(\"DMA read status: \" + h(this.dma_status), LOG_DISK);\n    return this.dma_status;\n};\n\nIDEDevice.prototype.dma_write_status = function(value)\n{\n    dbg_log(\"DMA set status: \" + h(value), LOG_DISK);\n    this.dma_status &= ~(value & 6);\n};\n\nIDEDevice.prototype.dma_read_command = function()\n{\n    return this.dma_read_command8() | this.dma_read_status() << 16;\n};\n\nIDEDevice.prototype.dma_read_command8 = function()\n{\n    dbg_log(\"DMA read command: \" + h(this.dma_command), LOG_DISK);\n    return this.dma_command;\n};\n\nIDEDevice.prototype.dma_write_command = function(value)\n{\n    dbg_log(\"DMA write command: \" + h(value), LOG_DISK);\n\n    this.dma_write_command8(value & 0xFF);\n    this.dma_write_status(value >> 16 & 0xFF);\n};\n\nIDEDevice.prototype.dma_write_command8 = function(value)\n{\n    dbg_log(\"DMA write command8: \" + h(value), LOG_DISK);\n\n    let old_command = this.dma_command;\n    this.dma_command = value & 0x9;\n\n    if((old_command & 1) === (value & 1))\n    {\n        return;\n    }\n\n    if((value & 1) === 0)\n    {\n        this.dma_status &= ~1;\n        return;\n    }\n\n    this.dma_status |= 1;\n\n    switch(this.current_interface.current_command)\n    {\n        case 0x25:\n        case 0xC8:\n            this.current_interface.do_ata_read_sectors_dma();\n            break;\n\n        case 0xCA:\n        case 0x35:\n            this.current_interface.do_ata_write_sectors_dma();\n            break;\n\n        case 0xA0:\n            this.current_interface.do_atapi_dma();\n            break;\n\n        default:\n            dbg_log(\"Spurious dma command write, current command: \" +\n                    h(this.current_interface.current_command), LOG_DISK);\n            dbg_assert(false);\n    }\n};\n\nIDEDevice.prototype.push_irq = function()\n{\n    if((this.device_control & 2) === 0)\n    {\n        dbg_log(\"push irq\", LOG_DISK);\n        this.dma_status |= 4;\n        this.cpu.device_raise_irq(this.irq);\n    }\n};\n\nIDEDevice.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.master;\n    state[1] = this.slave;\n    state[2] = this.ata_port;\n    state[3] = this.irq;\n    state[4] = this.pci_id;\n    state[5] = this.ata_port_high;\n    state[6] = this.master_port;\n    state[7] = this.name;\n    state[8] = this.device_control;\n    state[9] = this.prdt_addr;\n    state[10] = this.dma_status;\n    state[11] = this.current_interface === this.master;\n    state[12] = this.dma_command;\n    return state;\n};\n\nIDEDevice.prototype.set_state = function(state)\n{\n    this.master = state[0];\n    this.slave = state[1];\n    this.ata_port = state[2];\n    this.irq = state[3];\n    this.pci_id = state[4];\n    this.ata_port_high = state[5];\n    this.master_port = state[6];\n    this.name = state[7];\n    this.device_control = state[8];\n    this.prdt_addr = state[9];\n    this.dma_status = state[10];\n    this.current_interface = state[11] ? this.master : this.slave;\n    this.dma_command = state[12];\n};\n\n\n/**\n * @constructor\n */\nfunction IDEInterface(device, cpu, buffer, is_cd, device_nr, interface_nr, bus)\n{\n    this.device = device;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /**\n     * @const\n     * @type {number}\n     */\n    this.nr = device_nr;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.sector_size = is_cd ? CDROM_SECTOR_SIZE : HD_SECTOR_SIZE;\n\n    /** @type {boolean} */\n    this.is_atapi = is_cd;\n\n    /** @type {number} */\n    this.sector_count = 0;\n\n    /** @type {number} */\n    this.head_count = 0;\n\n    /** @type {number} */\n    this.sectors_per_track = 0;\n\n    /** @type {number} */\n    this.cylinder_count = 0;\n\n    if(this.buffer)\n    {\n        this.sector_count = this.buffer.byteLength / this.sector_size;\n\n        if(this.sector_count !== (this.sector_count | 0))\n        {\n            dbg_log(\"Warning: Disk size not aligned with sector size\", LOG_DISK);\n            this.sector_count = Math.ceil(this.sector_count);\n        }\n\n        if(is_cd)\n        {\n            this.head_count = 1;\n            this.sectors_per_track = 0;\n        }\n        else\n        {\n            // \"default\" values: 16/63\n            // common: 255, 63\n            this.head_count = 16;\n            this.sectors_per_track = 63;\n        }\n\n\n        this.cylinder_count = this.sector_count / this.head_count / this.sectors_per_track;\n\n        if(this.cylinder_count !== (this.cylinder_count | 0))\n        {\n            dbg_log(\"Warning: Rounding up cylinder count. Choose different head number\", LOG_DISK);\n            this.cylinder_count = Math.floor(this.cylinder_count);\n            //this.sector_count = this.cylinder_count * this.head_count *\n            //                        this.sectors_per_track * this.sector_size;\n        }\n\n        //if(this.cylinder_count > 16383)\n        //{\n        //    this.cylinder_count = 16383;\n        //}\n\n        // disk translation: lba\n        var rtc = cpu.devices.rtc;\n\n        // master\n        rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n            rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << this.nr * 4);\n        rtc.cmos_write(CMOS_DISK_DATA, rtc.cmos_read(CMOS_DISK_DATA) & 0x0F | 0xF0);\n\n        var reg = CMOS_DISK_DRIVE1_CYL;\n        rtc.cmos_write(reg + 0, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 1, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 2, this.head_count & 0xFF);\n        rtc.cmos_write(reg + 3, 0xFF);\n        rtc.cmos_write(reg + 4, 0xFF);\n        rtc.cmos_write(reg + 5, 0xC8);\n        rtc.cmos_write(reg + 6, this.cylinder_count & 0xFF);\n        rtc.cmos_write(reg + 7, this.cylinder_count >> 8 & 0xFF);\n        rtc.cmos_write(reg + 8, this.sectors_per_track & 0xFF);\n\n        //rtc.cmos_write(CMOS_BIOS_DISKTRANSFLAG,\n        //    rtc.cmos_read(CMOS_BIOS_DISKTRANSFLAG) | 1 << (nr * 4 + 2)); // slave\n    }\n\n    /** @const */\n    this.stats = {\n        sectors_read: 0,\n        sectors_written: 0,\n        bytes_read: 0,\n        bytes_written: 0,\n        loading: false,\n    };\n\n\n    this.buffer = buffer;\n\n    /** @type {number} */\n    this.is_lba = 0;\n\n    /** @type {number} */\n    this.bytecount = 0;\n\n    /** @type {number} */\n    this.sector = 0;\n\n    /** @type {number} */\n    this.lba_count = 0;\n\n    /** @type {number} */\n    this.cylinder_low = 0;\n\n    /** @type {number} */\n    this.cylinder_high = 0;\n\n    /** @type {number} */\n    this.head = 0;\n\n    /** @type {number} */\n    this.drive_head = 0;\n\n    /** @type {number} */\n    this.status = 0x50;\n\n    /** @type {number} */\n    this.sectors_per_drq = 0x80;\n\n    /** @type {number} */\n    this.error = 0;\n\n    /** @type {number} */\n    this.data_pointer = 0;\n\n    this.data = new Uint8Array(64 * 1024);\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n\n    /** @type {number} */\n    this.data_length = 0;\n\n    /** @type {number} */\n    this.data_end = 0;\n\n    /** @type {number} */\n    this.current_command = -1;\n\n    /** @type {number} */\n    this.current_atapi_command = -1;\n\n    /** @type {number} */\n    this.write_dest = 0;\n\n    Object.seal(this);\n}\n\nIDEInterface.prototype.device_reset = function()\n{\n    if(this.is_atapi)\n    {\n        this.status = 0;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n        this.cylinder_low = 0x14; // lba_mid\n        this.cylinder_high = 0xEB; // lba_high\n    }\n    else\n    {\n        this.status = 0x50 | 1;\n        this.bytecount = 1;\n        this.error = 1;\n        this.sector = 1; // lba_low\n\n        // 0, 0 needed by bochs bios\n        this.cylinder_low = 0; // lba_mid\n        this.cylinder_high = 0; // lba_high\n    }\n};\n\nIDEInterface.prototype.push_irq = function()\n{\n    this.device.push_irq();\n};\n\nIDEInterface.prototype.ata_command = function(cmd)\n{\n    dbg_log(\"ATA Command: \" + h(cmd) + \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    if(!this.buffer)\n    {\n        dbg_log(\"abort: No buffer\", LOG_DISK);\n        this.error = 4;\n        this.status = 0x41;\n        this.push_irq();\n        return;\n    }\n\n    this.current_command = cmd;\n    this.error = 0;\n\n    switch(cmd)\n    {\n        case 0x08:\n            dbg_log(\"ATA device reset\", LOG_DISK);\n            this.data_pointer = 0;\n            this.data_end = 0;\n            this.data_length = 0;\n            this.device_reset();\n            this.push_irq();\n            break;\n\n        case 0x10:\n            // calibrate drive\n            this.status = 0x50;\n            this.cylinder_low = 0;\n            this.push_irq();\n            break;\n\n        case 0xF8:\n            // read native max address\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.drive_head = this.drive_head & 0xF0 | last_sector >> 24 & 0x0F;\n            this.push_irq();\n            break;\n\n        case 0x27:\n            // read native max address ext\n            this.status = 0x50;\n            var last_sector = this.sector_count - 1;\n            this.sector = last_sector & 0xFF;\n            this.cylinder_low = last_sector >> 8 & 0xFF;\n            this.cylinder_high = last_sector >> 16 & 0xFF;\n            this.sector |= last_sector >> 24 << 8 & 0xFF00;\n            this.push_irq();\n            break;\n\n        case 0x20:\n        case 0x24:\n        case 0x29:\n        case 0xC4:\n            // 0x20 read sectors\n            // 0x24 read sectors ext\n            // 0xC4 read multiple\n            // 0x29 read multiple ext\n            this.ata_read_sectors(cmd);\n            break;\n\n        case 0x30:\n        case 0x34:\n        case 0x39:\n        case 0xC5:\n            // 0x30 write sectors\n            // 0x34 write sectors ext\n            // 0xC5 write multiple\n            // 0x39 write multiple ext\n            this.ata_write_sectors(cmd);\n            break;\n\n        case 0x90:\n            // execute device diagnostic\n            this.push_irq();\n            this.error = 0x101;\n            this.status = 0x50;\n            break;\n\n        case 0x91:\n            // initialize device parameters\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xA0:\n            // ATA packet\n            if(this.is_atapi)\n            {\n                this.status = 0x58;\n                this.data_allocate(12);\n                this.data_end = 12;\n                this.bytecount = 1;\n                this.push_irq();\n            }\n            break;\n\n        case 0xA1:\n            dbg_log(\"ATA identify packet device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.create_identify_packet();\n                this.status = 0x58;\n\n                this.cylinder_low = 0x14;\n                this.cylinder_high = 0xEB;\n\n                this.push_irq();\n            }\n            else\n            {\n                this.status = 0x41;\n                this.push_irq();\n            }\n            break;\n\n        case 0xC6:\n            // set multiple mode\n            // Logical sectors per DRQ Block in word 1\n            dbg_log(\"Logical sectors per DRQ Block: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.sectors_per_drq = this.bytecount & 0xFF;\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0x25: // read dma ext\n        case 0xC8: // read dma\n            this.ata_read_sectors_dma(cmd);\n            break;\n\n        case 0x35: // write dma ext\n        case 0xCA: // write dma\n            this.ata_write_sectors_dma(cmd);\n            break;\n\n        case 0x40:\n            dbg_log(\"read verify sectors\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xDA:\n            dbg_log(\"Unimplemented: get media status\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            this.push_irq();\n            break;\n\n        case 0xE0:\n            dbg_log(\"ATA standby immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE1:\n            dbg_log(\"ATA idle immediate\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xE7:\n            dbg_log(\"ATA flush cache\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEC:\n            dbg_log(\"ATA identify device\", LOG_DISK);\n\n            if(this.is_atapi)\n            {\n                this.status = 0x41;\n                this.error = 4;\n                this.push_irq();\n                return;\n            }\n\n            this.create_identify_packet();\n            this.status = 0x58;\n\n            this.push_irq();\n            break;\n\n        case 0xEA:\n            dbg_log(\"flush cache ext\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xEF:\n            dbg_log(\"set features: \" + h(this.bytecount & 0xFF), LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF5:\n            dbg_log(\"security freeze lock\", LOG_DISK);\n            this.status = 0x50;\n            this.push_irq();\n            break;\n\n        case 0xF9:\n            dbg_log(\"Unimplemented: set max address\", LOG_DISK);\n            this.status = 0x41;\n            this.error = 4;\n            break;\n\n        default:\n            dbg_assert(false, \"New ATA cmd on 1F7: \" + h(cmd), LOG_DISK);\n\n            this.status = 0x41;\n            // abort bit set\n            this.error = 4;\n    }\n};\n\nIDEInterface.prototype.atapi_handle = function()\n{\n    dbg_log(\"ATAPI Command: \" + h(this.data[0]) +\n            \" slave=\" + (this.drive_head >> 4 & 1), LOG_DISK);\n\n    this.data_pointer = 0;\n    this.current_atapi_command = this.data[0];\n\n    switch(this.current_atapi_command)\n    {\n        case 0x00:\n            dbg_log(\"test unit ready\", LOG_DISK);\n            // test unit ready\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x03:\n            // request sense\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n\n            this.data[0] = 0x80 | 0x70;\n            this.data[2] = 5; // illegal request\n            this.data[7] = 8;\n            break;\n\n        case 0x12:\n            // inquiry\n            var length = this.data[4];\n            this.status = 0x58;\n\n            dbg_log(\"inquiry: \" + h(this.data[1], 2) + \" length=\" + length, LOG_DISK);\n\n            // http://www.t10.org/ftp/x3t9.2/document.87/87-106r0.txt\n            //this.data_allocate(36);\n            this.data.set([\n                0x05, 0x80, 0x01, 0x31,\n                // additional length\n                31,\n                0, 0, 0,\n\n                // 8\n                0x53, 0x4F, 0x4E, 0x59,\n                0x20, 0x20, 0x20, 0x20,\n\n                // 16\n                0x43, 0x44, 0x2D, 0x52,\n                0x4F, 0x4D, 0x20, 0x43,\n                0x44, 0x55, 0x2D, 0x31,\n                0x30, 0x30, 0x30, 0x20,\n\n                // 32\n                0x31, 0x2E, 0x31, 0x61,\n            ]);\n            this.data_end = this.data_length = Math.min(36, length);\n            break;\n\n        case 0x1A:\n            // mode sense (6)\n            this.data_allocate(this.data[4]);\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x1E:\n            // prevent/allow medium removal\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x25:\n            // read capacity\n            var count = this.sector_count - 1;\n            this.data_set(new Uint8Array([\n                count >> 24 & 0xFF,\n                count >> 16 & 0xFF,\n                count >> 8 & 0xFF,\n                count & 0xFF,\n                0,\n                0,\n                this.sector_size >> 8 & 0xFF,\n                this.sector_size & 0xFF,\n            ]));\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0x28:\n            // read\n            if(this.lba_count & 1)\n            {\n                this.atapi_read_dma(this.data);\n            }\n            else\n            {\n                this.atapi_read(this.data);\n            }\n            break;\n\n        case 0x42:\n            var length = this.data[8];\n            this.data_allocate(Math.min(8, length));\n            this.data_end = this.data_length;\n            dbg_log(\"read q subcode: length=\" + length, LOG_DISK);\n            this.status = 0x58;\n            break;\n\n        case 0x43:\n            // read toc\n            var length = this.data[8] | this.data[7] << 8;\n            var format = this.data[9] >> 6;\n\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            dbg_log(\"read toc: \" + h(format, 2) +\n                    \" length=\" + length +\n                    \" \" + (this.data[1] & 2) +\n                    \" \" + h(this.data[6]), LOG_DISK);\n\n            if(format === 0)\n            {\n                var sector_count = this.sector_count;\n                this.data.set(new Uint8Array([\n                    0, 18, // length\n                    1, 1, // first and last session\n\n                    0,\n                    0x14,\n                    1, // track number\n                    0,\n                    0, 0, 0, 0,\n\n                    0,\n                    0x16,\n                    0xAA, // track number\n                    0,\n                    sector_count >> 24,\n                    sector_count >> 16 & 0xFF,\n                    sector_count >> 8 & 0xFF,\n                    sector_count & 0xFF,\n                ]));\n            }\n            else if(format === 1)\n            {\n                this.data.set(new Uint8Array([\n                    0, 10, // length\n                    1, 1, // first and last session\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                    0, 0,\n                ]));\n            }\n            else\n            {\n                dbg_assert(false, \"Unimplemented format: \" + format);\n            }\n\n            this.status = 0x58;\n            break;\n\n        case 0x46:\n            // get configuration\n            var length = this.data[8] | this.data[7] << 8;\n            length = Math.min(length, 32);\n            this.data_allocate(length);\n            this.data_end = this.data_length;\n            this.data[0] = length - 4 >> 24 & 0xFF;\n            this.data[1] = length - 4 >> 16 & 0xFF;\n            this.data[2] = length - 4 >> 8 & 0xFF;\n            this.data[3] = length - 4 & 0xFF;\n            this.data[6] = 0x08;\n            this.data[10] = 3;\n            this.status = 0x58;\n            break;\n\n        case 0x51:\n            // read disk information\n            this.data_allocate(0);\n            this.data_end = this.data_length;\n            this.status = 0x50;\n            break;\n\n        case 0x52:\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            break;\n\n        case 0x5A:\n            // mode sense\n            var length = this.data[8] | this.data[7] << 8;\n            var page_code = this.data[2];\n            dbg_log(\"mode sense: \" + h(page_code) + \" length=\" + length, LOG_DISK);\n            if(page_code === 0x2A)\n            {\n                this.data_allocate(Math.min(30, length));\n            }\n            this.data_end = this.data_length;\n            this.status = 0x58;\n            break;\n\n        case 0xBD:\n            // mechanism status\n            this.data_allocate(this.data[9] | this.data[8] << 8);\n            this.data_end = this.data_length;\n            this.data[5] = 1;\n            this.status = 0x58;\n            break;\n\n        case 0x4A:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            break;\n\n        default:\n            this.status = 0x51;\n            this.data_length = 0;\n            this.error = 5 << 4;\n            dbg_log(\"Unimplemented ATAPI command: \" + h(this.data[0]), LOG_DISK);\n            dbg_assert(false);\n    }\n\n    this.bytecount = this.bytecount & ~7 | 2;\n\n    if((this.status & 0x80) === 0)\n    {\n        this.push_irq();\n    }\n\n    if((this.status & 0x80) === 0 && this.data_length === 0)\n    {\n        this.bytecount |= 1;\n        this.status &= ~8;\n    }\n};\n\nIDEInterface.prototype.do_write = function()\n{\n    this.status = 0x50;\n\n    dbg_assert(this.data_length <= this.data.length);\n    var data = this.data.subarray(0, this.data_length);\n\n    //dbg_log(hex_dump(data), LOG_DISK);\n    dbg_assert(this.data_length % 512 === 0);\n    this.ata_advance(this.current_command, this.data_length / 512);\n    this.push_irq();\n\n    this.buffer.set(this.write_dest, data, function()\n    {\n    });\n\n    this.report_write(this.data_length);\n};\n\nIDEInterface.prototype.atapi_read = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    this.data_length = 0;\n    var req_length = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n    dbg_log(h(this.cylinder_high, 2) + \" \" + h(this.cylinder_low, 2), LOG_DISK);\n    this.cylinder_low = this.cylinder_high = 0; // oak technology driver (windows 3.0)\n\n    if(req_length === 0xFFFF)\n        req_length--;\n\n    if(req_length > byte_count)\n    {\n        req_length = byte_count;\n    }\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else if(byte_count === 0)\n    {\n        this.status = 0x50;\n\n        this.data_pointer = 0;\n        //this.push_irq();\n    }\n    else\n    {\n        byte_count = Math.min(byte_count, this.buffer.byteLength - start);\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"cd read: data arrived\", LOG_DISK);\n            this.data_set(data);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n\n            this.push_irq();\n\n            req_length &= ~3;\n\n            this.data_end = req_length;\n            if(this.data_end > this.data_length)\n            {\n                this.data_end = this.data_length;\n            }\n            this.cylinder_low = this.data_end & 0xFF;\n            this.cylinder_high = this.data_end >> 8 & 0xFF;\n\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.atapi_read_dma = function(cmd)\n{\n    // Note: Big Endian\n    var lba = cmd[2] << 24 | cmd[3] << 16 | cmd[4] << 8 | cmd[5];\n    var count = cmd[7] << 8 | cmd[8];\n    var flags = cmd[1];\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"CD read DMA lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count) +\n            \" flags=\" + h(flags), LOG_DISK);\n\n    if(start >= this.buffer.byteLength)\n    {\n        dbg_assert(false, \"CD read: Outside of disk  end=\" + h(start + byte_count) +\n                          \" size=\" + h(this.buffer.byteLength), LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x50 | 0x80;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            dbg_log(\"atapi_read_dma: Data arrived\");\n            this.report_read_end(byte_count);\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.data_set(data);\n\n            this.do_atapi_dma();\n        });\n    }\n};\n\nIDEInterface.prototype.do_atapi_dma = function()\n{\n    if((this.device.dma_status & 1) === 0)\n    {\n        dbg_log(\"do_atapi_dma: Status not set\", LOG_DISK);\n        return;\n    }\n\n    if((this.status & 0x8) === 0)\n    {\n        dbg_log(\"do_atapi_dma: DRQ not set\", LOG_DISK);\n        return;\n    }\n\n    dbg_log(\"atapi dma transfer len=\" + this.data_length, LOG_DISK);\n\n    var prdt_start = this.device.prdt_addr;\n    var offset = 0;\n\n    var data = this.data;\n\n    do {\n        var addr = this.cpu.read32s(prdt_start);\n        var count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!count)\n        {\n            count = 0x10000;\n        }\n\n        dbg_log(\"dma read dest=\" + h(addr) + \" count=\" + h(count) + \" datalen=\" + h(this.data_length), LOG_DISK);\n        this.cpu.write_blob(data.subarray(offset,\n            Math.min(offset + count, this.data_length)), addr);\n\n        offset += count;\n        prdt_start += 8;\n\n        if(offset >= this.data_length && !end)\n        {\n            dbg_log(\"leave early end=\" + (+end) +\n                    \" offset=\" + h(offset) +\n                    \" data_length=\" + h(this.data_length) +\n                    \" cmd=\" + h(this.current_command), LOG_DISK);\n            break;\n        }\n    }\n    while(!end);\n\n    dbg_log(\"end offset=\" + offset, LOG_DISK);\n\n    this.status = 0x50;\n    this.device.dma_status &= ~1;\n    this.bytecount = this.bytecount & ~7 | 3;\n    this.push_irq();\n};\n\nIDEInterface.prototype.read_data = function(length)\n{\n    if(this.data_pointer < this.data_end)\n    {\n        dbg_assert(this.data_pointer + length - 1 < this.data_end);\n        dbg_assert(this.data_pointer % length === 0, h(this.data_pointer) + \" \" + length);\n\n        if(length === 1)\n        {\n            var result = this.data[this.data_pointer];\n        }\n        else if(length === 2)\n        {\n            var result = this.data16[this.data_pointer >>> 1];\n        }\n        else\n        {\n            var result = this.data32[this.data_pointer >>> 2];\n        }\n\n        this.data_pointer += length;\n\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer & align) === 0)\n        {\n            dbg_log(\"Read 1F0: \" + h(this.data[this.data_pointer], 2) +\n                        \" cur=\" + h(this.data_pointer) +\n                        \" cnt=\" + h(this.data_length), LOG_DISK);\n        }\n\n        if(this.data_pointer >= this.data_end)\n        {\n            this.read_end();\n        }\n\n        return result;\n    }\n    else\n    {\n        dbg_log(\"Read 1F0: empty\", LOG_DISK);\n\n        this.data_pointer += length;\n        return 0;\n    }\n};\n\nIDEInterface.prototype.read_end = function()\n{\n    dbg_log(\"read_end cmd=\" + h(this.current_command) + \" data_pointer=\" + h(this.data_pointer) +\n            \" end=\" + h(this.data_end) + \" length=\" + h(this.data_length), LOG_DISK);\n\n    if(this.current_command === 0xA0)\n    {\n        if(this.data_end === this.data_length)\n        {\n            this.status = 0x50;\n            this.bytecount = this.bytecount & ~7 | 3;\n            this.push_irq();\n        }\n        else\n        {\n            this.status = 0x58;\n            this.bytecount = this.bytecount & ~7 | 2;\n            this.push_irq();\n            var byte_count = this.cylinder_high << 8 & 0xFF00 | this.cylinder_low & 0xFF;\n\n            if(this.data_end + byte_count > this.data_length)\n            {\n                this.cylinder_low = (this.data_length - this.data_end) & 0xFF;\n                this.cylinder_high = (this.data_length - this.data_end) >> 8 & 0xFF;\n                this.data_end = this.data_length;\n            }\n            else\n            {\n                this.data_end += byte_count;\n            }\n            dbg_log(\"data_end=\" + h(this.data_end), LOG_DISK);\n        }\n    }\n    else\n    {\n        this.error = 0;\n        if(this.data_pointer >= this.data_length)\n        {\n            this.status = 0x50;\n            this.push_irq();\n        }\n        else\n        {\n            if(this.current_command === 0xC4 || this.current_command === 0x29)\n            {\n                var sector_count = Math.min(this.sectors_per_drq,\n                    (this.data_length - this.data_end) / 512);\n                dbg_assert(sector_count % 1 === 0);\n            }\n            else\n            {\n                dbg_assert(this.current_command === 0x20 || this.current_command === 0x24);\n                var sector_count = 1;\n            }\n            this.ata_advance(this.current_command, sector_count);\n            this.data_end += 512 * sector_count;\n            this.status = 0x58;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port = function(data, length)\n{\n    dbg_assert(this.data_pointer % length === 0);\n\n    if(this.data_pointer >= this.data_end)\n    {\n        dbg_log(\"Redundant write to data port: \" + h(data) + \" count=\" + h(this.data_end) +\n                \" cur=\" + h(this.data_pointer), LOG_DISK);\n    }\n    else\n    {\n        var align = (this.data_end & 0xFFF) === 0 ? 0xFFF : 0xFF;\n        if((this.data_pointer + length & align) === 0 || this.data_end < 20)\n        {\n            dbg_log(\"Data port: \" + h(data >>> 0) + \" count=\" + h(this.data_end) +\n                    \" cur=\" + h(this.data_pointer), LOG_DISK);\n        }\n\n        if(length === 1)\n        {\n            this.data[this.data_pointer++] = data;\n        }\n        else if(length === 2)\n        {\n            this.data16[this.data_pointer >>> 1] = data;\n            this.data_pointer += 2;\n        }\n        else\n        {\n            this.data32[this.data_pointer >>> 2] = data;\n            this.data_pointer += 4;\n        }\n\n        dbg_assert(this.data_pointer <= this.data_end);\n        if(this.data_pointer === this.data_end)\n        {\n            this.write_end();\n        }\n    }\n};\n\nIDEInterface.prototype.write_data_port8 = function(data)\n{\n    this.write_data_port(data, 1);\n};\n\nIDEInterface.prototype.write_data_port16 = function(data)\n{\n    this.write_data_port(data, 2);\n};\n\nIDEInterface.prototype.write_data_port32 = function(data)\n{\n    this.write_data_port(data, 4);\n};\n\nIDEInterface.prototype.write_end = function()\n{\n    if(this.current_command === 0xA0)\n    {\n        this.atapi_handle();\n    }\n    else\n    {\n        dbg_log(\"write_end data_pointer=\" + h(this.data_pointer) +\n                \" data_length=\" + h(this.data_length), LOG_DISK);\n\n        if(this.data_pointer >= this.data_length)\n        {\n            this.do_write();\n        }\n        else\n        {\n            dbg_assert(this.current_command === 0x30 || this.current_command === 0x34);\n            // XXX: Should advance here, but do_write does all the advancing\n            //this.ata_advance(this.current_command, 1);\n            this.status = 0x58;\n            this.data_end += 512;\n            this.push_irq();\n        }\n    }\n};\n\nIDEInterface.prototype.ata_advance = function(cmd, sectors)\n{\n    dbg_log(\"Advance sectors=\" + sectors + \" old_bytecount=\" + this.bytecount, LOG_DISK);\n    this.bytecount -= sectors;\n\n    if(cmd === 0x24 || cmd === 0x29 || cmd === 0x34 || cmd === 0x39 ||\n       cmd === 0x25 || cmd === 0x35)\n    {\n        var new_sector = sectors + this.get_lba48();\n        this.sector = new_sector & 0xFF | new_sector >> 16 & 0xFF00;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n    }\n    else if(this.is_lba)\n    {\n        var new_sector = sectors + this.get_lba28();\n        this.sector = new_sector & 0xFF;\n        this.cylinder_low = new_sector >> 8 & 0xFF;\n        this.cylinder_high = new_sector >> 16 & 0xFF;\n        this.head = this.head & ~0xF | new_sector & 0xF;\n    }\n    else // chs\n    {\n        var new_sector = sectors + this.get_chs();\n\n        var c = new_sector / (this.head_count * this.sectors_per_track) | 0;\n        this.cylinder_low = c & 0xFF;\n        this.cylinder_high = c >> 8 & 0xFF;\n        this.head = (new_sector / this.sectors_per_track | 0) % this.head_count & 0xF;\n        this.sector = (new_sector % this.sectors_per_track + 1) & 0xFF;\n\n        dbg_assert(new_sector === this.get_chs());\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x24 || cmd === 0x29;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x20 || cmd === 0x24;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA read cmd=\" + h(cmd) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x80 | 0x40;\n        this.report_read_start();\n\n        this.buffer.get(start, byte_count, (data) =>\n        {\n            //setTimeout(() => {\n            dbg_log(\"ata_read: Data arrived\", LOG_DISK);\n\n            this.data_set(data);\n            this.status = 0x58;\n            this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n            this.ata_advance(cmd, is_single ? 1 : Math.min(count, this.sectors_per_track));\n\n            this.push_irq();\n            this.report_read_end(byte_count);\n            //}, 10);\n        });\n    }\n};\n\nIDEInterface.prototype.ata_read_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA read lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA read: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_read_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x25;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_assert(lba < this.buffer.byteLength);\n\n    this.report_read_start();\n\n    var orig_prdt_start = this.device.prdt_addr;\n\n    this.buffer.get(start, byte_count, (data) =>\n    {\n        //setTimeout(function() {\n        dbg_log(\"do_ata_read_sectors_dma: Data arrived\", LOG_DISK);\n        var prdt_start = this.device.prdt_addr;\n        var offset = 0;\n\n        dbg_assert(orig_prdt_start === prdt_start);\n\n        do {\n            var prd_addr = this.cpu.read32s(prdt_start);\n            var prd_count = this.cpu.read16(prdt_start + 4);\n            var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n            if(!prd_count)\n            {\n                prd_count = 0x10000;\n                dbg_log(\"dma: prd count was 0\", LOG_DISK);\n            }\n\n            dbg_log(\"dma read transfer dest=\" + h(prd_addr) +\n                    \" prd_count=\" + h(prd_count), LOG_DISK);\n            this.cpu.write_blob(data.subarray(offset, offset + prd_count), prd_addr);\n\n            offset += prd_count;\n            prdt_start += 8;\n        }\n        while(!end);\n\n        dbg_assert(offset === byte_count);\n\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n\n        this.push_irq();\n\n        this.report_read_end(byte_count);\n        //}.bind(this), 10);\n    });\n};\n\nIDEInterface.prototype.ata_write_sectors = function(cmd)\n{\n    var is_lba48 = cmd === 0x34 || cmd === 0x39;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var is_single = cmd === 0x30 || cmd === 0x34;\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA write lba=\" + h(lba) +\n            \" mode=\" + (this.is_lba ? \"lba\" : \"chs\") +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n    }\n    else\n    {\n        this.status = 0x58;\n        this.data_allocate_noclear(byte_count);\n        this.data_end = is_single ? 512 : Math.min(byte_count, this.sectors_per_drq * 512);\n        this.write_dest = start;\n    }\n};\n\nIDEInterface.prototype.ata_write_sectors_dma = function(cmd)\n{\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    dbg_log(\"ATA DMA write lba=\" + h(lba) +\n            \" lbacount=\" + h(count) +\n            \" bytecount=\" + h(byte_count), LOG_DISK);\n\n    if(start + byte_count > this.buffer.byteLength)\n    {\n        dbg_assert(false, \"ATA DMA write: Outside of disk\", LOG_DISK);\n\n        this.status = 0xFF;\n        this.push_irq();\n        return;\n    }\n\n    this.status = 0x58;\n    this.device.dma_status |= 1;\n};\n\nIDEInterface.prototype.do_ata_write_sectors_dma = function()\n{\n    var cmd = this.current_command;\n\n    var is_lba48 = cmd === 0x35;\n    var count = this.get_count(is_lba48);\n    var lba = this.get_lba(is_lba48);\n\n    var byte_count = count * this.sector_size;\n    var start = lba * this.sector_size;\n\n    var prdt_start = this.device.prdt_addr;\n    var prdt_count = 0;\n    var prdt_write_count = 0;\n    var offset = 0;\n\n    dbg_log(\"prdt addr: \" + h(prdt_start, 8), LOG_DISK);\n\n    do {\n        var prd_addr = this.cpu.read32s(prdt_start);\n        var prd_count = this.cpu.read16(prdt_start + 4);\n        var end = this.cpu.read8(prdt_start + 7) & 0x80;\n\n        if(!prd_count)\n        {\n            prd_count = 0x10000;\n            dbg_log(\"dma: prd count was 0\", LOG_DISK);\n        }\n\n        dbg_log(\"dma write transfer dest=\" + h(prd_addr) + \" prd_count=\" + h(prd_count), LOG_DISK);\n\n        var slice = this.cpu.mem8.subarray(prd_addr, prd_addr + prd_count);\n        dbg_assert(slice.length === prd_count);\n\n        //if(DEBUG)\n        //{\n        //    dbg_log(hex_dump(slice), LOG_DISK);\n        //}\n\n        this.buffer.set(start + offset, slice, function()\n        {\n            prdt_write_count++;\n        });\n\n        offset += prd_count;\n        prdt_start += 8;\n        prdt_count++;\n    }\n    while(!end);\n\n    if(prdt_write_count === prdt_count)\n    {\n        //setTimeout(function() {\n        dbg_log(\"dma write completed\", LOG_DISK);\n        this.ata_advance(this.current_command, count);\n        this.status = 0x50;\n        this.push_irq();\n        this.device.dma_status &= ~1;\n        this.current_command = -1;\n        //}, 10);\n    }\n    else\n    {\n        // fails when writes don't happen synchronously, which isn't currently\n        // the case, but might be in the future\n        dbg_assert(false, \"dma write not completed\", LOG_DISK);\n    }\n\n    this.report_write(byte_count);\n};\n\nIDEInterface.prototype.get_chs = function()\n{\n    var c = this.cylinder_low & 0xFF | this.cylinder_high << 8 & 0xFF00;\n    var h = this.head;\n    var s = this.sector & 0xFF;\n\n    dbg_log(\"get_chs: c=\" + c + \" h=\" + h + \" s=\" + s, LOG_DISK);\n\n    return (c * this.head_count + h) * this.sectors_per_track + s - 1;\n};\n\nIDEInterface.prototype.get_lba28 = function()\n{\n    return this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.head & 0xF) << 24;\n};\n\nIDEInterface.prototype.get_lba48 = function()\n{\n    // Note: Bits over 32 missing\n    return (this.sector & 0xFF |\n            this.cylinder_low << 8 & 0xFF00 |\n            this.cylinder_high << 16 & 0xFF0000 |\n            (this.sector >> 8) << 24 & 0xFF000000) >>> 0;\n};\n\nIDEInterface.prototype.get_lba = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        return this.get_lba48();\n    }\n    else if(this.is_lba)\n    {\n        return this.get_lba28();\n    }\n    else\n    {\n        return this.get_chs();\n    }\n};\n\nIDEInterface.prototype.get_count = function(is_lba48)\n{\n    if(is_lba48)\n    {\n        var count = this.bytecount;\n        if(count === 0) count = 0x10000;\n        return count;\n    }\n    else\n    {\n        var count = this.bytecount & 0xFF;\n        if(count === 0) count = 0x100;\n        return count;\n    }\n};\n\nIDEInterface.prototype.create_identify_packet = function()\n{\n    // http://bochs.sourceforge.net/cgi-bin/lxr/source/iodev/harddrv.cc#L2821\n\n    if(this.drive_head & 0x10)\n    {\n        // slave\n        this.data_allocate(0);\n        return;\n    }\n\n    for(var i = 0; i < 512; i++)\n    {\n        this.data[i] = 0;\n    }\n\n    var cylinder_count = Math.min(16383, this.cylinder_count);\n\n    this.data_set([\n        0x40, this.is_atapi ? 0x85 : 0,\n        // 1 cylinders\n        cylinder_count, cylinder_count >> 8,\n        0, 0,\n\n        // 3 heads\n        this.head_count, this.head_count >> 8,\n        this.sectors_per_track / 512, this.sectors_per_track / 512 >> 8,\n        // 5\n        0, 512 >> 8,\n        // sectors per track\n        this.sectors_per_track, this.sectors_per_track >> 8,\n        0, 0, 0, 0, 0, 0,\n        // 10-19 serial number\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 15\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 20\n        3, 0,\n        0, 2,\n        4, 0,\n        // 23-26 firmware revision\n        0, 0, 0, 0, 0, 0, 0, 0,\n\n        // 27 model number\n        56, 118, 32, 54, 68, 72, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n        32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\n\n        // 47 max value for set multiple mode\n        0x80, 0,\n        1, 0,\n        //0, 3,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        0, 2,  // capabilities, 2: Only LBA / 3: LBA and DMA\n        // 50\n        0, 0,\n        0, 2,\n        0, 2,\n        7, 0,\n\n        // 54 cylinders\n        cylinder_count, cylinder_count >> 8,\n        // 55 heads\n        this.head_count, this.head_count >> 8,\n        // 56 sectors per track\n        this.sectors_per_track, 0,\n        // capacity in sectors\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 60\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n\n        0, 0,\n        // 63, dma supported mode, dma selected mode\n        this.current_command === 0xA0 ? 0 : 7, this.current_command === 0xA0 ? 0 : 4,\n        //0, 0, // no DMA\n\n        0, 0,\n        // 65\n        30, 0, 30, 0, 30, 0, 30, 0, 0, 0,\n        // 70\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 75\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 80\n        0x7E, 0, 0, 0, 0, 0, 0, 0x74, 0, 0x40,\n        // 85\n        0, 0x40, 0, 0x74, 0, 0x40, 0, 0, 0, 0,\n        // 90\n        0, 0, 0, 0, 0, 0, 1, 0x60, 0, 0,\n        // 95\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        // 100\n        this.sector_count & 0xFF, this.sector_count >> 8 & 0xFF,\n        this.sector_count >> 16 & 0xFF, this.sector_count >> 24 & 0xFF,\n    ]);\n\n    this.data_length = 512;\n    this.data_end = 512;\n};\n\nIDEInterface.prototype.data_allocate = function(len)\n{\n    this.data_allocate_noclear(len);\n\n    for(var i = 0; i < (len + 3 >> 2); i++)\n    {\n        this.data32[i] = 0;\n    }\n};\n\nIDEInterface.prototype.data_allocate_noclear = function(len)\n{\n    if(this.data.length < len)\n    {\n        this.data = new Uint8Array(len + 3 & ~3);\n        this.data16 = new Uint16Array(this.data.buffer);\n        this.data32 = new Int32Array(this.data.buffer);\n    }\n\n    this.data_length = len;\n    this.data_pointer = 0;\n};\n\nIDEInterface.prototype.data_set = function(data)\n{\n    this.data_allocate_noclear(data.length);\n    this.data.set(data);\n};\n\nIDEInterface.prototype.report_read_start = function()\n{\n    this.stats.loading = true;\n    this.bus.send(\"ide-read-start\");\n};\n\nIDEInterface.prototype.report_read_end = function(byte_count)\n{\n    this.stats.loading = false;\n\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_read += sector_count;\n    this.stats.bytes_read += byte_count;\n\n    this.bus.send(\"ide-read-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.report_write = function(byte_count)\n{\n    var sector_count = byte_count / this.sector_size | 0;\n    this.stats.sectors_written += sector_count;\n    this.stats.bytes_written += byte_count;\n\n    this.bus.send(\"ide-write-end\", [this.nr, byte_count, sector_count]);\n};\n\nIDEInterface.prototype.get_state = function()\n{\n    var state = [];\n    state[0] = this.bytecount;\n    state[1] = this.cylinder_count;\n    state[2] = this.cylinder_high;\n    state[3] = this.cylinder_low;\n    state[4] = this.data_pointer;\n    state[5] = 0;\n    state[6] = 0;\n    state[7] = 0;\n    state[8] = 0;\n    state[9] = this.drive_head;\n    state[10] = this.error;\n    state[11] = this.head;\n    state[12] = this.head_count;\n    state[13] = this.is_atapi;\n    state[14] = this.is_lba;\n    state[15] = this.lba_count;\n    state[16] = this.data;\n    state[17] = this.data_length;\n    state[18] = this.sector;\n    state[19] = this.sector_count;\n    state[20] = this.sector_size;\n    state[21] = this.sectors_per_drq;\n    state[22] = this.sectors_per_track;\n    state[23] = this.status;\n    state[24] = this.write_dest;\n    state[25] = this.current_command;\n    state[26] = this.data_end;\n    state[27] = this.current_atapi_command;\n    return state;\n};\n\nIDEInterface.prototype.set_state = function(state)\n{\n    this.bytecount = state[0];\n    this.cylinder_count = state[1];\n    this.cylinder_high = state[2];\n    this.cylinder_low = state[3];\n    this.data_pointer = state[4];\n\n    this.drive_head = state[9];\n    this.error = state[10];\n    this.head = state[11];\n    this.head_count = state[12];\n    this.is_atapi = state[13];\n    this.is_lba = state[14];\n    this.lba_count = state[15];\n    this.data = state[16];\n    this.data_length = state[17];\n    this.sector = state[18];\n    this.sector_count = state[19];\n    this.sector_size = state[20];\n    this.sectors_per_drq = state[21];\n    this.sectors_per_track = state[22];\n    this.status = state[23];\n    this.write_dest = state[24];\n    this.current_command = state[25];\n\n    this.data_end = state[26];\n    this.current_atapi_command = state[27];\n\n    this.data16 = new Uint16Array(this.data.buffer);\n    this.data32 = new Int32Array(this.data.buffer);\n};\n","\"use strict\";\n\n/** @const */ var CMOS_RTC_SECONDS = 0x00;\n/** @const */ var CMOS_RTC_SECONDS_ALARM = 0x01;\n/** @const */ var CMOS_RTC_MINUTES = 0x02;\n/** @const */ var CMOS_RTC_MINUTES_ALARM = 0x03;\n/** @const */ var CMOS_RTC_HOURS = 0x04;\n/** @const */ var CMOS_RTC_HOURS_ALARM = 0x05;\n/** @const */ var CMOS_RTC_DAY_WEEK = 0x06;\n/** @const */ var CMOS_RTC_DAY_MONTH = 0x07;\n/** @const */ var CMOS_RTC_MONTH = 0x08;\n/** @const */ var CMOS_RTC_YEAR = 0x09;\n/** @const */ var CMOS_STATUS_A = 0x0a;\n/** @const */ var CMOS_STATUS_B = 0x0b;\n/** @const */ var CMOS_STATUS_C = 0x0c;\n/** @const */ var CMOS_STATUS_D = 0x0d;\n/** @const */ var CMOS_RESET_CODE = 0x0f;\n\n/** @const */ var CMOS_FLOPPY_DRIVE_TYPE = 0x10;\n/** @const */ var CMOS_DISK_DATA = 0x12;\n/** @const */ var CMOS_EQUIPMENT_INFO = 0x14;\n/** @const */ var CMOS_MEM_BASE_LOW = 0x15;\n/** @const */ var CMOS_MEM_BASE_HIGH = 0x16;\n/** @const */ var CMOS_MEM_OLD_EXT_LOW = 0x17;\n/** @const */ var CMOS_MEM_OLD_EXT_HIGH = 0x18;\n/** @const */ var CMOS_DISK_DRIVE1_TYPE = 0x19;\n/** @const */ var CMOS_DISK_DRIVE2_TYPE = 0x1a;\n/** @const */ var CMOS_DISK_DRIVE1_CYL = 0x1b;\n/** @const */ var CMOS_DISK_DRIVE2_CYL = 0x24;\n/** @const */ var CMOS_MEM_EXTMEM_LOW = 0x30;\n/** @const */ var CMOS_MEM_EXTMEM_HIGH = 0x31;\n/** @const */ var CMOS_CENTURY = 0x32;\n/** @const */ var CMOS_MEM_EXTMEM2_LOW = 0x34;\n/** @const */ var CMOS_MEM_EXTMEM2_HIGH = 0x35;\n/** @const */ var CMOS_BIOS_BOOTFLAG1 = 0x38;\n/** @const */ var CMOS_BIOS_DISKTRANSFLAG = 0x39;\n/** @const */ var CMOS_BIOS_BOOTFLAG2 = 0x3d;\n/** @const */ var CMOS_MEM_HIGHMEM_LOW = 0x5b;\n/** @const */ var CMOS_MEM_HIGHMEM_MID = 0x5c;\n/** @const */ var CMOS_MEM_HIGHMEM_HIGH = 0x5d;\n/** @const */ var CMOS_BIOS_SMP_COUNT = 0x5f;\n\n\n/**\n * RTC (real time clock) and CMOS\n * @constructor\n * @param {CPU} cpu\n */\nfunction RTC(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.cmos_index = 0;\n    this.cmos_data = new Uint8Array(128);\n\n    // used for cmos entries\n    this.rtc_time = Date.now();\n    this.last_update = this.rtc_time;\n\n    // used for periodic interrupt\n    this.next_interrupt = 0;\n\n    this.periodic_interrupt = false;\n\n    // corresponds to default value for cmos_a\n    this.periodic_interrupt_time = 1000 / 1024;\n\n    this.cmos_a = 0x26;\n    this.cmos_b = 2;\n    this.cmos_c = 0;\n\n    this.nmi_disabled = 0;\n\n    cpu.io.register_write(0x70, this, function(out_byte)\n    {\n        this.cmos_index = out_byte & 0x7F;\n        this.nmi_disabled = out_byte >> 7;\n    });\n\n    cpu.io.register_write(0x71, this, this.cmos_port_write);\n    cpu.io.register_read(0x71, this, this.cmos_port_read);\n}\n\nRTC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.cmos_index;\n    state[1] = this.cmos_data;\n    state[2] = this.rtc_time;\n    state[3] = this.last_update;\n    state[4] = this.next_interrupt;\n\n    state[6] = this.periodic_interrupt;\n    state[7] = this.periodic_interrupt_time;\n    state[8] = this.cmos_a;\n    state[9] = this.cmos_b;\n    state[10] = this.cmos_c;\n    state[11] = this.nmi_disabled;\n\n    return state;\n};\n\nRTC.prototype.set_state = function(state)\n{\n    this.cmos_index = state[0];\n    this.cmos_data = state[1];\n    this.rtc_time = state[2];\n    this.last_update = state[3];\n    this.next_interrupt = state[4];\n\n    this.periodic_interrupt = state[6];\n    this.periodic_interrupt_time = state[7];\n    this.cmos_a = state[8];\n    this.cmos_b = state[9];\n    this.cmos_c = state[10];\n    this.nmi_disabled = state[11];\n};\n\nRTC.prototype.timer = function(time, legacy_mode)\n{\n    time = Date.now(); // XXX\n    this.rtc_time += time - this.last_update;\n    this.last_update = time;\n\n    if(this.periodic_interrupt && this.next_interrupt < time)\n    {\n        this.cpu.device_raise_irq(8);\n        this.cmos_c |= 1 << 6 | 1 << 7;\n\n        this.next_interrupt += this.periodic_interrupt_time *\n                Math.ceil((time - this.next_interrupt) / this.periodic_interrupt_time);\n\n        return Math.max(0, time - this.next_interrupt);\n    }\n\n    return 100;\n};\n\nRTC.prototype.bcd_pack = function(n)\n{\n    var i = 0,\n        result = 0,\n        digit;\n\n    while(n)\n    {\n        digit = n % 10;\n\n        result |= digit << (4 * i);\n        i++;\n        n = (n - digit) / 10;\n    }\n\n    return result;\n};\n\nRTC.prototype.encode_time = function(t)\n{\n    if(this.cmos_b & 4)\n    {\n        // binary mode\n        return t;\n    }\n    else\n    {\n        return this.bcd_pack(t);\n    }\n};\n\n// TODO\n// - interrupt on update\n// - countdown\n// - letting bios/os set values\n// (none of these are used by seabios or the OSes we're\n// currently testing)\nRTC.prototype.cmos_port_read = function()\n{\n    var index = this.cmos_index;\n\n    //this.cmos_index = 0xD;\n\n    switch(index)\n    {\n        case CMOS_RTC_SECONDS:\n            return this.encode_time(new Date(this.rtc_time).getUTCSeconds());\n        case CMOS_RTC_MINUTES:\n            return this.encode_time(new Date(this.rtc_time).getUTCMinutes());\n        case CMOS_RTC_HOURS:\n            // TODO: 12 hour mode\n            return this.encode_time(new Date(this.rtc_time).getUTCHours());\n        case CMOS_RTC_DAY_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCDate());\n        case CMOS_RTC_MONTH:\n            return this.encode_time(new Date(this.rtc_time).getUTCMonth() + 1);\n        case CMOS_RTC_YEAR:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() % 100);\n\n        case CMOS_STATUS_A:\n            return this.cmos_a;\n        case CMOS_STATUS_B:\n            //dbg_log(\"cmos read from index \" + h(index));\n            return this.cmos_b;\n\n        case CMOS_STATUS_C:\n            // It is important to know that upon a IRQ 8, Status Register C\n            // will contain a bitmask telling which interrupt happened.\n            // What is important is that if register C is not read after an\n            // IRQ 8, then the interrupt will not happen again.\n            this.cpu.device_lower_irq(8);\n\n            dbg_log(\"cmos reg C read\", LOG_RTC);\n            // Missing IRQF flag\n            //return cmos_b & 0x70;\n            var c = this.cmos_c;\n\n            this.cmos_c &= ~0xF0;\n\n            return c;\n\n        case CMOS_STATUS_D:\n            return 0xFF;\n\n        case CMOS_CENTURY:\n            return this.encode_time(new Date(this.rtc_time).getUTCFullYear() / 100 | 0);\n\n        default:\n            dbg_log(\"cmos read from index \" + h(index), LOG_RTC);\n            return this.cmos_data[this.cmos_index];\n    }\n};\n\nRTC.prototype.cmos_port_write = function(data_byte)\n{\n    switch(this.cmos_index)\n    {\n        case 0xA:\n            this.cmos_a = data_byte & 0x7F;\n            this.periodic_interrupt_time = 1000 / (32768 >> (this.cmos_a & 0xF) - 1);\n\n            dbg_log(\"Periodic interrupt, a=\" + h(this.cmos_a, 2) + \" t=\" + this.periodic_interrupt_time , LOG_RTC);\n            break;\n        case 0xB:\n            this.cmos_b = data_byte;\n            if(this.cmos_b & 0x40)\n            {\n                this.next_interrupt = Date.now();\n            }\n\n            if(this.cmos_b & 0x20) dbg_log(\"Unimplemented: alarm interrupt\", LOG_RTC);\n            if(this.cmos_b & 0x10) dbg_log(\"Unimplemented: updated interrupt\", LOG_RTC);\n\n            dbg_log(\"cmos b=\" + h(this.cmos_b, 2), LOG_RTC);\n            break;\n        default:\n            dbg_log(\"cmos write index \" + h(this.cmos_index) + \": \" + h(data_byte), LOG_RTC);\n    }\n\n    this.periodic_interrupt = (this.cmos_b & 0x40) === 0x40 && (this.cmos_a & 0xF) > 0;\n};\n\n/**\n * @param {number} index\n */\nRTC.prototype.cmos_read = function(index)\n{\n    dbg_assert(index < 128);\n    return this.cmos_data[index];\n};\n\n/**\n * @param {number} index\n * @param {number} value\n */\nRTC.prototype.cmos_write = function(index, value)\n{\n    dbg_log(\"cmos \" + h(index) + \" <- \" + h(value), LOG_RTC);\n    dbg_assert(index < 128);\n    this.cmos_data[index] = value;\n};\n","\"use strict\";\n\n/** @const */\nvar A20_MASK = ~(1 << 20);\n/** @const */\nvar A20_MASK16 = ~(1 << 20 - 1);\n/** @const */\nvar A20_MASK32 = ~(1 << 20 - 2);\n\n/** @const */\nvar USE_A20 = false;\n\n\n// called by all memory writes\nCPU.prototype.debug_write = function(addr, size, value)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof value === \"number\" && !isNaN(value));\n    dbg_assert(value >= -0x80000000 && addr < 0x80000000);\n\n    this.debug_read(addr, size, true);\n}\n\n/**\n * @param {boolean=} is_write\n */\nCPU.prototype.debug_read = function(addr, size, is_write)\n{\n    if(!DEBUG)\n    {\n        return;\n    }\n\n    dbg_assert(typeof addr === \"number\");\n    dbg_assert(!isNaN(addr));\n};\n\n\nCPU.prototype.mmap_read8 = function(addr)\n{\n    return this.memory_map_read8[addr >>> MMAP_BLOCK_BITS](addr);\n};\n\nCPU.prototype.mmap_write8 = function(addr, value)\n{\n    this.memory_map_write8[addr >>> MMAP_BLOCK_BITS](addr, value);\n};\n\nCPU.prototype.mmap_read16 = function(addr)\n{\n    var fn = this.memory_map_read8[addr >>> MMAP_BLOCK_BITS];\n\n    return fn(addr) | fn(addr + 1 | 0) << 8;\n};\n\nCPU.prototype.mmap_write16 = function(addr, value)\n{\n    var fn = this.memory_map_write8[addr >>> MMAP_BLOCK_BITS];\n\n    fn(addr, value & 0xFF);\n    fn(addr + 1 | 0, value >> 8 & 0xFF);\n};\n\nCPU.prototype.mmap_read32 = function(addr)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    return this.memory_map_read32[aligned_addr](addr);\n}\n\nCPU.prototype.mmap_write32 = function(addr, value)\n{\n    var aligned_addr = addr >>> MMAP_BLOCK_BITS;\n\n    this.memory_map_write32[aligned_addr](addr, value);\n}\n\nCPU.prototype.in_mapped_range = function(addr)\n{\n    return (addr | 0) >= 0xA0000 && (addr | 0) < 0xC0000 || (addr >>> 0) >= (this.memory_size >>> 0);\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read8 = function(addr)\n{\n    this.debug_read(addr, 1);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read8(addr);\n    }\n    else\n    {\n        return this.mem8[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read16 = function(addr)\n{\n    this.debug_read(addr, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read16(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned16 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_read(addr << 1, 2);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        return this.mmap_read16(addr << 1);\n    }\n    else\n    {\n        return this.mem16[addr];\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read32s = function(addr)\n{\n    this.debug_read(addr, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        return this.mmap_read32(addr);\n    }\n    else\n    {\n        return this.mem8[addr] | this.mem8[addr + 1 | 0] << 8 |\n            this.mem8[addr + 2 | 0] << 16 | this.mem8[addr + 3 | 0] << 24;\n    }\n};\n\n/**\n * @param {number} addr\n */\nCPU.prototype.read_aligned32 = function(addr)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_read(addr << 2, 4);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        return this.mmap_read32(addr << 2);\n    }\n    else\n    {\n        return this.mem32s[addr];\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write8 = function(addr, value)\n{\n    this.debug_write(addr, 1, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write8(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write16 = function(addr, value)\n{\n    this.debug_write(addr, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write16(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write_aligned16 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x80000000);\n    this.debug_write(addr << 1, 2, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK16;\n\n    if(this.in_mapped_range(addr << 1))\n    {\n        this.mmap_write16(addr << 1, value);\n    }\n    else\n    {\n        this.mem16[addr] = value;\n    }\n};\n\n/**\n * @param {number} addr\n * @param {number} value\n */\nCPU.prototype.write32 = function(addr, value)\n{\n    this.debug_write(addr, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK;\n\n    if(this.in_mapped_range(addr))\n    {\n        this.mmap_write32(addr, value);\n    }\n    else\n    {\n        this.mem8[addr] = value;\n        this.mem8[addr + 1 | 0] = value >> 8;\n        this.mem8[addr + 2 | 0] = value >> 16;\n        this.mem8[addr + 3 | 0] = value >> 24;\n    }\n};\n\nCPU.prototype.write_aligned32 = function(addr, value)\n{\n    dbg_assert(addr >= 0 && addr < 0x40000000);\n    this.debug_write(addr << 2, 4, value);\n    if(USE_A20 && !this.a20_enabled) addr &= A20_MASK32;\n\n    if(this.in_mapped_range(addr << 2))\n    {\n        this.mmap_write32(addr << 2, value);\n    }\n    else\n    {\n        this.mem32s[addr] = value;\n    }\n};\n\n/**\n * @param {Array.<number>|Uint8Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob = function(blob, offset)\n{\n    this.debug_write(offset, blob.length, 0)\n    dbg_assert(blob && blob.length >= 0);\n\n    this.mem8.set(blob, offset);\n};\n\n/**\n * @param {Array.<number>|Int32Array} blob\n * @param {number} offset\n */\nCPU.prototype.write_blob32 = function(blob, offset)\n{\n    dbg_assert(blob && blob.length);\n    this.debug_write(offset, blob.length << 2, 0);\n    this.mem32s.set(blob, offset);\n};\n","\"use strict\";\n\n// http://wiki.osdev.org/PCI\n\nvar\n/** @const */ PCI_CONFIG_ADDRESS = 0xCF8,\n/** @const */ PCI_CONFIG_DATA = 0xCFC;\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction PCI(cpu)\n{\n    this.pci_addr = new Uint8Array(4);\n    this.pci_value = new Uint8Array(4);\n    this.pci_response = new Uint8Array(4);\n    this.pci_status = new Uint8Array(4);\n\n    this.pci_addr32 = new Int32Array(this.pci_addr.buffer);\n    this.pci_value32 = new Int32Array(this.pci_value.buffer);\n    this.pci_response32 = new Int32Array(this.pci_response.buffer);\n    this.pci_status32 = new Int32Array(this.pci_status.buffer);\n\n    this.device_spaces = [];\n    this.devices = [];\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    for(var i = 0; i < 256; i++)\n    {\n        this.device_spaces[i] = undefined;\n        this.devices[i] = undefined;\n    }\n\n    this.io = cpu.io;\n\n    cpu.io.register_write(PCI_CONFIG_DATA, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0], value);\n        },\n        function(value)\n        {\n            this.pci_write32(this.pci_addr32[0], value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 1, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 1 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 2, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 2 | 0, value);\n        },\n        function(value)\n        {\n            this.pci_write16(this.pci_addr32[0] + 2 | 0, value);\n        });\n\n    cpu.io.register_write(PCI_CONFIG_DATA + 3, this,\n        function(value)\n        {\n            this.pci_write8(this.pci_addr32[0] + 3 | 0, value);\n        });\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_DATA, this,\n        function()\n        {\n            return this.pci_response[0];\n        },\n        function()\n        {\n            return this.pci_response[1];\n        },\n        function()\n        {\n            return this.pci_response[2];\n        },\n        function()\n        {\n            return this.pci_response[3];\n        }\n    );\n\n    cpu.io.register_read_consecutive(PCI_CONFIG_ADDRESS, this,\n        function()\n        {\n            return this.pci_status[0];\n        },\n        function()\n        {\n            return this.pci_status[1];\n        },\n        function()\n        {\n            return this.pci_status[2];\n        },\n        function()\n        {\n            return this.pci_status[3];\n        }\n    );\n\n    cpu.io.register_write_consecutive(PCI_CONFIG_ADDRESS, this,\n        function(out_byte)\n        {\n            this.pci_addr[0] = out_byte & 0xFC;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[1] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[2] = out_byte;\n        },\n        function(out_byte)\n        {\n            this.pci_addr[3] = out_byte;\n            this.pci_query();\n        }\n    );\n\n\n    // Some experimental PCI devices taken from my PC:\n\n    // 00:00.0 Host bridge: Intel Corporation 4 Series Chipset DRAM Controller (rev 02)\n    //var host_bridge = {\n    //    pci_id: 0,\n    //    pci_space: [\n    //        0x86, 0x80, 0x20, 0x2e, 0x06, 0x00, 0x90, 0x20, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x10, 0xd3, 0x82,\n    //        0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    ],\n    //    pci_bars: [],\n    //};\n\n    var host_bridge = {\n        pci_id: 0,\n        pci_space: [\n            // 00:00.0 Host bridge: Intel Corporation 440FX - 82441FX PMC [Natoma] (rev 02)\n            0x86, 0x80, 0x37, 0x12, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82441FX PMC\",\n    };\n    this.register_device(host_bridge);\n\n    this.isa_bridge = {\n        pci_id: 1 << 3,\n        pci_space: [\n            // 00:01.0 ISA bridge: Intel Corporation 82371SB PIIX3 ISA [Natoma/Triton II]\n            0x86, 0x80, 0x00, 0x70, 0x07, 0x00, 0x00, 0x02, 0x00, 0x00, 0x01, 0x06, 0x00, 0x00, 0x80, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        ],\n        pci_bars: [],\n        name: \"82371SB PIIX3 ISA\",\n    };\n    this.isa_bridge_space = this.register_device(this.isa_bridge);\n    this.isa_bridge_space8 = new Uint8Array(this.isa_bridge_space.buffer);\n\n    // 00:1e.0 PCI bridge: Intel Corporation 82801 PCI Bridge (rev 90)\n    //this.register_device([\n    //    0x86, 0x80, 0x4e, 0x24, 0x07, 0x01, 0x10, 0x00, 0x90, 0x01, 0x04, 0x06, 0x00, 0x00, 0x01, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x20, 0xe0, 0xe0, 0x80, 0x22,\n    //    0xb0, 0xfe, 0xb0, 0xfe, 0xf1, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n    //    0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x02, 0x00,\n    //], 0x1e << 3);\n}\n\nPCI.prototype.get_state = function()\n{\n    var state = [];\n\n    for(var i = 0; i < 256; i++)\n    {\n        state[i] = this.device_spaces[i];\n    }\n\n    state[256] = this.pci_addr;\n    state[257] = this.pci_value;\n    state[258] = this.pci_response;\n    state[259] = this.pci_status;\n\n    return state;\n};\n\nPCI.prototype.set_state = function(state)\n{\n    for(var i = 0; i < 256; i++)\n    {\n        var device = this.devices[i];\n        var space = state[i];\n\n        if(!device || !space)\n        {\n            if(device)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device exists in current \" +\n                        \"configuration but not in snapshot (\" + device.name + \")\");\n            }\n            if(space)\n            {\n                dbg_log(\"Warning: While restoring PCI device: Device doesn't exist in current \" +\n                        \"configuration but does in snapshot (device \" + h(i, 2) + \")\");\n            }\n            continue;\n        }\n\n        for(var bar_nr = 0; bar_nr < device.pci_bars.length; bar_nr++)\n        {\n            var value = space[(0x10 >> 2) + bar_nr];\n\n            if(value & 1)\n            {\n                var bar = device.pci_bars[bar_nr];\n                var from = bar.original_bar & ~1 & 0xFFFF;\n                var to = value & ~1 & 0xFFFF;\n                this.set_io_bars(bar, from, to);\n            }\n            else\n            {\n                // memory, cannot be changed\n            }\n        }\n\n        this.device_spaces[i].set(space);\n    }\n\n    this.pci_addr.set(state[256]);\n    this.pci_value.set(state[257]);\n    this.pci_response.set(state[258]);\n    this.pci_status.set(state[259]);\n};\n\nPCI.prototype.pci_query = function()\n{\n    var dbg_line = \"query\";\n\n    // Bit | .31                     .0\n    // Fmt | EBBBBBBBBDDDDDFFFRRRRRR00\n\n    var bdf = this.pci_addr[2] << 8 | this.pci_addr[1],\n        addr = this.pci_addr[0] & 0xFC,\n        //devfn = bdf & 0xFF,\n        //bus = bdf >> 8,\n        dev = bdf >> 3 & 0x1F,\n        //fn = bdf & 7,\n        enabled = this.pci_addr[3] >> 7;\n\n    dbg_line += \" enabled=\" + enabled;\n    dbg_line += \" bdf=\" + h(bdf, 4);\n    dbg_line += \" dev=\" + h(dev, 2);\n    dbg_line += \" addr=\" + h(addr, 2);\n\n    var device = this.device_spaces[bdf];\n\n    if(device !== undefined)\n    {\n        this.pci_status32[0] = 0x80000000 | 0;\n\n        if(addr < device.byteLength)\n        {\n            this.pci_response32[0] = device[addr >> 2];\n        }\n        else\n        {\n            // required by freebsd-9.1\n            this.pci_response32[0] = 0;\n        }\n\n        dbg_line += \" \" + h(this.pci_addr32[0] >>> 0, 8) + \" -> \" + h(this.pci_response32[0] >>> 0, 8);\n\n        if(addr >= device.byteLength)\n        {\n            dbg_line += \" (undef)\";\n        }\n\n        dbg_line += \" (\" + this.devices[bdf].name + \")\";\n\n        dbg_log(dbg_line, LOG_PCI);\n    }\n    else\n    {\n        this.pci_response32[0] = -1;\n        this.pci_status32[0] = 0;\n    }\n};\n\nPCI.prototype.pci_write8 = function(address, written)\n{\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint8Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI write8 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 2), LOG_PCI);\n\n    space[addr] = written;\n};\n\nPCI.prototype.pci_write16 = function(address, written)\n{\n    dbg_assert((address & 1) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = new Uint16Array(this.device_spaces[bdf].buffer);\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    dbg_assert(!(addr >= 0x10 && addr < 0x2C || addr >= 0x30 && addr < 0x34),\n               \"PCI: Expected 32-bit write\");\n\n    dbg_log(\"PCI writ16 dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n            \" value=\" + h(written, 4), LOG_PCI);\n\n    space[addr >>> 1] = written;\n};\n\nPCI.prototype.pci_write32 = function(address, written)\n{\n    dbg_assert((address & 3) === 0);\n\n    var bdf = address >> 8 & 0xFFFF;\n    var addr = address & 0xFF;\n\n    var space = this.device_spaces[bdf];\n    var device = this.devices[bdf];\n\n    if(!space)\n    {\n        return;\n    }\n\n    if(addr >= 0x10 && addr < 0x28)\n    {\n        var bar_nr = addr - 0x10 >> 2;\n        var bar = device.pci_bars[bar_nr];\n\n        dbg_log(\"BAR\" + bar_nr + \" exists=\" + (bar ? \"y\" : \"n\") + \" changed to \" +\n                h(written >>> 0) + \" dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") \", LOG_PCI);\n\n        if(bar)\n        {\n            dbg_assert(!(bar.size & bar.size - 1), \"bar size should be power of 2\");\n\n            var space_addr = addr >> 2;\n            var type = space[space_addr] & 1;\n\n            if((written | 3 | bar.size - 1)  === -1) // size check\n            {\n                written = ~(bar.size - 1) | type;\n\n                if(type === 0)\n                {\n                    space[space_addr] = written;\n                }\n            }\n            else\n            {\n                if(type === 0)\n                {\n                    // memory\n                    var original_bar = bar.original_bar;\n\n                    if((written & ~0xF) !== (original_bar & ~0xF))\n                    {\n                        // seabios\n                        dbg_log(\"Warning: Changing memory bar not supported, ignored\", LOG_PCI);\n                    }\n\n                    // changing isn't supported yet, reset to default\n                    space[space_addr] = original_bar;\n                }\n            }\n\n            if(type === 1)\n            {\n                // io\n                dbg_assert(type === 1);\n\n                var from = space[space_addr] & ~1 & 0xFFFF;\n                var to = written & ~1 & 0xFFFF;\n                dbg_log(\"io bar changed from \" + h(from >>> 0, 8) +\n                        \" to \" + h(to >>> 0, 8) + \" size=\" + bar.size, LOG_PCI);\n                this.set_io_bars(bar, from, to);\n                space[space_addr] = written | 1;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n\n        dbg_log(\"BAR effective value: \" + h(space[addr >> 2] >>> 0), LOG_PCI);\n    }\n    else if(addr === 0x30)\n    {\n        dbg_log(\"PCI write rom address dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \")\" +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n\n        if(device.pci_rom_size)\n        {\n            if((written | 0x7FF) === (0xFFFFFFFF|0))\n            {\n                space[addr >> 2] = -device.pci_rom_size | 0;\n            }\n            else\n            {\n                space[addr >> 2] = device.pci_rom_address | 0;\n            }\n        }\n        else\n        {\n            space[addr >> 2] = 0;\n        }\n    }\n    else\n    {\n        dbg_log(\"PCI write dev=\" + h(bdf >> 3, 2) + \" (\" + device.name + \") addr=\" + h(addr, 4) +\n                \" value=\" + h(written >>> 0, 8), LOG_PCI);\n        space[addr >>> 2] = written;\n    }\n};\n\nPCI.prototype.register_device = function(device)\n{\n    dbg_assert(device.pci_id !== undefined);\n    dbg_assert(device.pci_space !== undefined);\n    dbg_assert(device.pci_bars !== undefined);\n\n    var device_id = device.pci_id;\n\n    dbg_log(\"PCI register bdf=\" + h(device_id) + \" (\" + device.name + \")\", LOG_PCI);\n\n    dbg_assert(!this.devices[device_id]);\n    dbg_assert(device.pci_space.length >= 64);\n    dbg_assert(device_id < this.devices.length);\n\n    // convert bytewise notation from lspci to double words\n    var space = new Int32Array(64);\n    space.set(new Int32Array(new Uint8Array(device.pci_space).buffer));\n    this.device_spaces[device_id] = space;\n    this.devices[device_id] = device;\n\n    var bar_space = space.slice(4, 10);\n\n    for(var i = 0; i < device.pci_bars.length; i++)\n    {\n        var bar = device.pci_bars[i];\n\n        if(!bar)\n        {\n            continue;\n        }\n\n        var bar_base = bar_space[i];\n        var type = bar_base & 1;\n\n        bar.original_bar = bar_base;\n        bar.entries = [];\n\n        if(type === 0)\n        {\n            // memory, not needed currently\n        }\n        else\n        {\n            dbg_assert(type === 1);\n            var port = bar_base & ~1;\n\n            for(var j = 0; j < bar.size; j++)\n            {\n                bar.entries[j] = this.io.ports[port + j];\n            }\n        }\n    }\n\n    return space;\n};\n\nPCI.prototype.set_io_bars = function(bar, from, to)\n{\n    var count = bar.size;\n    dbg_log(\"Move io bars: from=\" + h(from) + \" to=\" + h(to) + \" count=\" + count, LOG_PCI);\n\n    var ports = this.io.ports;\n\n    for(var i = 0; i < count; i++)\n    {\n        var old_entry = ports[from + i];\n        ports[from + i] = this.io.create_empty_entry();\n\n        if(old_entry.read8 === this.io.empty_port_read8 &&\n           old_entry.read16 === this.io.empty_port_read16 &&\n           old_entry.read32 === this.io.empty_port_read32 &&\n           old_entry.write8 === this.io.empty_port_write &&\n           old_entry.write16 === this.io.empty_port_write &&\n           old_entry.write32 === this.io.empty_port_write)\n        {\n            dbg_log(\"Move IO bar: Source not mapped, port=\" + h(from + i, 4), LOG_PCI);\n        }\n\n        var entry = bar.entries[i];\n        var empty_entry = ports[to + i];\n        dbg_assert(entry && empty_entry);\n\n        ports[to + i] = entry;\n\n        // these can fail if the os maps an io port in multiple bars (indicating a bug)\n        dbg_assert(empty_entry.read8 === this.io.empty_port_read8, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read16 === this.io.empty_port_read16, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.read32 === this.io.empty_port_read32, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write8 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write16 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n        dbg_assert(empty_entry.write32 === this.io.empty_port_write, \"Bad IO bar: Target already mapped\");\n    }\n};\n\nPCI.prototype.raise_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = (space[0x3C >>> 2] >> 8 & 0xFF) - 1;\n    var device = (pci_id >> 3) - 1 & 0xFF;\n    var parent_pin = pin + device & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI raise irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_raise_irq(irq);\n};\n\nPCI.prototype.lower_irq = function(pci_id)\n{\n    var space = this.device_spaces[pci_id];\n    dbg_assert(space);\n\n    var pin = space[0x3C >>> 2] >> 8 & 0xFF;\n    var device = pci_id >> 3 & 0xFF;\n    var parent_pin = pin + device - 2 & 3;\n    var irq = this.isa_bridge_space8[0x60 + parent_pin];\n\n    //dbg_log(\"PCI lower irq \" + h(irq) + \" dev=\" + h(device, 2) +\n    //        \" (\" + this.devices[pci_id].name + \")\", LOG_PCI);\n    this.cpu.device_lower_irq(irq);\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {CPU} cpu\n */\nfunction FloppyController(cpu, fda_image, fdb_image)\n{\n    /** @const @type {IO|undefined} */\n    this.io = cpu.io;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {DMA} */\n    this.dma = cpu.devices.dma;\n\n    this.bytes_expecting = 0;\n    this.receiving_command = new Uint8Array(10);\n    this.receiving_index = 0;\n    this.next_command = null;\n\n    this.response_data = new Uint8Array(10);\n    this.response_index = 0;\n    this.response_length = 0;\n\n    this.floppy_size = 0;\n\n    /* const */\n    this.fda_image = fda_image;\n\n    /* const */\n    this.fdb_image = fdb_image;\n\n\n    this.status_reg0 = 0;\n    this.status_reg1 = 0;\n    this.status_reg2 = 0;\n    this.drive = 0;\n\n    this.last_cylinder = 0;\n    this.last_head = 0;\n    this.last_sector = 1;\n\n    // this should actually be write-only ... but people read it anyway\n    this.dor = 0;\n\n    if(!fda_image)\n    {\n        // Needed for CD emulation provided by seabios\n        cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, 4 << 4);\n\n        this.sectors_per_track = 0;\n        this.number_of_heads = 0;\n        this.number_of_cylinders = 0;\n\n        this.floppy_size = 0;\n    }\n    else\n    {\n        this.floppy_size = fda_image.byteLength;\n\n        var floppy_types = {\n            160  : { type: 1, tracks: 40, sectors: 8 , heads: 1 },\n            180  : { type: 1, tracks: 40, sectors: 9 , heads: 1 },\n            200  : { type: 1, tracks: 40, sectors: 10, heads: 1 },\n            320  : { type: 1, tracks: 40, sectors: 8 , heads: 2 },\n            360  : { type: 1, tracks: 40, sectors: 9 , heads: 2 },\n            400  : { type: 1, tracks: 40, sectors: 10, heads: 2 },\n            720  : { type: 3, tracks: 80, sectors: 9 , heads: 2 },\n            1200 : { type: 2, tracks: 80, sectors: 15, heads: 2 },\n            1440 : { type: 4, tracks: 80, sectors: 18, heads: 2 },\n            1722 : { type: 5, tracks: 82, sectors: 21, heads: 2 },\n            2880 : { type: 5, tracks: 80, sectors: 36, heads: 2 },\n        };\n\n        var number_of_cylinders,\n            sectors_per_track,\n            number_of_heads,\n            floppy_type = floppy_types[this.floppy_size >> 10];\n\n        if(floppy_type && (this.floppy_size & 0x3FF) === 0)\n        {\n            cpu.devices.rtc.cmos_write(CMOS_FLOPPY_DRIVE_TYPE, floppy_type.type << 4);\n\n            sectors_per_track = floppy_type.sectors;\n            number_of_heads = floppy_type.heads;\n            number_of_cylinders = floppy_type.tracks;\n        }\n        else\n        {\n            throw \"Unknown floppy size: \" + h(fda_image.byteLength);\n        }\n\n        this.sectors_per_track = sectors_per_track;\n        this.number_of_heads = number_of_heads;\n        this.number_of_cylinders = number_of_cylinders;\n    }\n\n    this.io.register_read(0x3F0, this, this.port3F0_read);\n    this.io.register_read(0x3F2, this, this.port3F2_read);\n    this.io.register_read(0x3F4, this, this.port3F4_read);\n    this.io.register_read(0x3F5, this, this.port3F5_read);\n    this.io.register_read(0x3F7, this, this.port3F7_read);\n\n    this.io.register_write(0x3F2, this, this.port3F2_write);\n    this.io.register_write(0x3F5, this, this.port3F5_write);\n}\n\nFloppyController.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.bytes_expecting;\n    state[1] = this.receiving_command;\n    state[2] = this.receiving_index;\n    //state[3] = this.next_command;\n    state[4] = this.response_data;\n    state[5] = this.response_index;\n    state[6] = this.response_length;\n    state[7] = this.floppy_size;\n    state[8] = this.status_reg0;\n    state[9] = this.status_reg1;\n    state[10] = this.status_reg2;\n    state[11] = this.drive;\n    state[12] = this.last_cylinder;\n    state[13] = this.last_head;\n    state[14] = this.last_sector;\n    state[15] = this.dor;\n    state[16] = this.sectors_per_track;\n    state[17] = this.number_of_heads;\n    state[18] = this.number_of_cylinders;\n\n    return state;\n};\n\nFloppyController.prototype.set_state = function(state)\n{\n    this.bytes_expecting = state[0];\n    this.receiving_command = state[1];\n    this.receiving_index = state[2];\n    this.next_command = state[3];\n    this.response_data = state[4];\n    this.response_index = state[5];\n    this.response_length = state[6];\n    this.floppy_size = state[7];\n    this.status_reg0 = state[8];\n    this.status_reg1 = state[9];\n    this.status_reg2 = state[10];\n    this.drive = state[11];\n    this.last_cylinder = state[12];\n    this.last_head = state[13];\n    this.last_sector = state[14];\n    this.dor = state[15];\n    this.sectors_per_track = state[16];\n    this.number_of_heads = state[17];\n    this.number_of_cylinders = state[18];\n};\n\nFloppyController.prototype.port3F0_read = function()\n{\n    dbg_log(\"3F0 read\", LOG_FLOPPY);\n\n    return 0;\n};\n\n\nFloppyController.prototype.port3F4_read = function()\n{\n    dbg_log(\"3F4 read\", LOG_FLOPPY);\n\n    var return_byte = 0x80;\n\n    if(this.response_index < this.response_length)\n    {\n        return_byte |= 0x40 | 0x10;\n    }\n\n    if((this.dor & 8) === 0)\n    {\n        return_byte |= 0x20;\n    }\n\n    return return_byte;\n};\n\nFloppyController.prototype.port3F7_read = function()\n{\n    dbg_log(\"3F7 read\", LOG_FLOPPY);\n    return 0x00;\n}\n\nFloppyController.prototype.port3F5_read = function()\n{\n    if(this.response_index < this.response_length)\n    {\n        dbg_log(\"3F5 read: \" + this.response_data[this.response_index], LOG_FLOPPY);\n        this.cpu.device_lower_irq(6);\n        return this.response_data[this.response_index++];\n    }\n    else\n    {\n        dbg_log(\"3F5 read, empty\", LOG_FLOPPY);\n        return 0xFF;\n    }\n};\n\nFloppyController.prototype.port3F5_write = function(reg_byte)\n{\n    if(!this.fda_image) return;\n\n    dbg_log(\"3F5 write \" + h(reg_byte), LOG_FLOPPY);\n\n    if(this.bytes_expecting > 0)\n    {\n        this.receiving_command[this.receiving_index++] = reg_byte;\n\n        this.bytes_expecting--;\n\n        if(this.bytes_expecting === 0)\n        {\n            if(DEBUG)\n            {\n                var log = \"3F5 command received: \";\n                for(var i = 0; i < this.receiving_index; i++)\n                    log += h(this.receiving_command[i]) + \" \";\n                dbg_log(log, LOG_FLOPPY);\n            }\n\n            this.next_command.call(this, this.receiving_command);\n        }\n    }\n    else\n    {\n        switch(reg_byte)\n        {\n            // TODO\n            //case 2:\n                //this.next_command = read_complete_track;\n                //this.bytes_expecting = 8;\n                //break;\n            case 0x03:\n                this.next_command = this.fix_drive_data;\n                this.bytes_expecting = 2;\n                break;\n            case 0x04:\n                this.next_command = this.check_drive_status;\n                this.bytes_expecting = 1;\n                break;\n            case 0x05:\n            case 0xC5:\n                this.next_command = function(args) { this.do_sector(true, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0xE6:\n                this.next_command = function(args) { this.do_sector(false, args); };\n                this.bytes_expecting = 8;\n                break;\n            case 0x07:\n                this.next_command = this.calibrate;\n                this.bytes_expecting = 1;\n                break;\n            case 0x08:\n                this.check_interrupt_status();\n                break;\n            case 0x4A:\n                this.next_command = this.read_sector_id;\n                this.bytes_expecting = 1;\n                break;\n            case 0x0F:\n                this.bytes_expecting = 2;\n                this.next_command = this.seek;\n                break;\n            case 0x0E:\n                // dump regs\n                dbg_log(\"dump registers\", LOG_FLOPPY);\n                this.response_data[0] = 0x80;\n                this.response_index = 0;\n                this.response_length = 1;\n\n                this.bytes_expecting = 0;\n                break;\n\n            default:\n                dbg_assert(false, \"Unimplemented floppy command call \" + h(reg_byte));\n        }\n\n        this.receiving_index = 0;\n    }\n};\n\nFloppyController.prototype.port3F2_read = function()\n{\n    dbg_log(\"read 3F2: DOR\", LOG_FLOPPY);\n    return this.dor;\n}\n\nFloppyController.prototype.port3F2_write = function(value)\n{\n    if((value & 4) === 4 && (this.dor & 4) === 0)\n    {\n        // reset\n        this.cpu.device_raise_irq(6);\n    }\n\n    dbg_log(\"start motors: \" + h(value >> 4), LOG_FLOPPY);\n    dbg_log(\"enable dma: \" + !!(value & 8), LOG_FLOPPY);\n    dbg_log(\"reset fdc: \" + !!(value & 4), LOG_FLOPPY);\n    dbg_log(\"drive select: \" + (value & 3), LOG_FLOPPY);\n    dbg_log(\"DOR = \" + h(value), LOG_FLOPPY);\n\n    this.dor = value;\n}\n\nFloppyController.prototype.check_drive_status = function(args)\n{\n    dbg_log(\"check drive status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 1;\n    this.response_data[0] = 1 << 5;\n}\n\nFloppyController.prototype.seek = function(args)\n{\n    dbg_log(\"seek\", LOG_FLOPPY);\n    dbg_assert((args[0] & 3) === 0, \"Unhandled seek drive\");\n\n    this.last_cylinder = args[1];\n    this.last_head = args[0] >> 2 & 1;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.calibrate = function(args)\n{\n    dbg_log(\"floppy calibrate\", LOG_FLOPPY);\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.check_interrupt_status = function()\n{\n    // do not trigger an interrupt here\n    dbg_log(\"floppy check interrupt status\", LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 2;\n\n    this.response_data[0] = 1 << 5;\n    this.response_data[1] = this.last_cylinder;\n}\n\nFloppyController.prototype.do_sector = function(is_write, args)\n{\n    var head = args[2],\n        cylinder = args[1],\n        sector = args[3],\n        sector_size = 128 << args[4],\n        read_count = args[5] - args[3] + 1,\n\n        read_offset = ((head + this.number_of_heads * cylinder) * this.sectors_per_track + sector - 1) * sector_size;\n\n    dbg_log(\"Floppy \" + (is_write ? \"Write\" : \"Read\"), LOG_FLOPPY);\n    dbg_log(\"from \" + h(read_offset) + \" length \" + h(read_count * sector_size), LOG_FLOPPY);\n    dbg_log(cylinder + \" / \" + head + \" / \" + sector, LOG_FLOPPY);\n\n    if(!args[4])\n    {\n        dbg_log(\"FDC: sector count is zero, use data length instead\", LOG_FLOPPY);\n    }\n\n    if(!this.fda_image)\n    {\n        return;\n    }\n\n    if(is_write)\n    {\n        this.dma.do_write(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n    else\n    {\n        this.dma.do_read(this.fda_image, read_offset, read_count * sector_size, 2, this.done.bind(this, args, cylinder, head, sector));\n    }\n};\n\nFloppyController.prototype.done = function(args, cylinder, head, sector, error)\n{\n    if(error)\n    {\n        // TODO: Set appropriate bits\n        return;\n    }\n\n    sector++;\n\n    if(sector > this.sectors_per_track)\n    {\n        sector = 1;\n        head++;\n\n        if(head >= this.number_of_heads)\n        {\n            head = 0;\n            cylinder++;\n        }\n    }\n\n    this.last_cylinder = cylinder;\n    this.last_head = head;\n    this.last_sector = sector;\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = head << 2 | 0x20;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = cylinder;\n    this.response_data[4] = head;\n    this.response_data[5] = sector;\n    this.response_data[6] = args[4];\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.fix_drive_data = function(args)\n{\n    dbg_log(\"floppy fix drive data \" + args, LOG_FLOPPY);\n}\n\nFloppyController.prototype.read_sector_id = function(args)\n{\n    dbg_log(\"floppy read sector id \" + args, LOG_FLOPPY);\n\n    this.response_index = 0;\n    this.response_length = 7;\n\n    this.response_data[0] = 0;\n    this.response_data[1] = 0;\n    this.response_data[2] = 0;\n    this.response_data[3] = 0;\n    this.response_data[4] = 0;\n    this.response_data[5] = 0;\n    this.response_data[6] = 0;\n\n    this.raise_irq();\n}\n\nFloppyController.prototype.raise_irq = function()\n{\n    if(this.dor & 8)\n    {\n        this.cpu.device_raise_irq(6);\n    }\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n */\nfunction DMA(cpu)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.channel_page = new Uint8Array(8);\n    this.channel_pagehi = new Uint8Array(8);\n    this.channel_addr = new Uint16Array(8);\n    this.channel_addr_init = new Uint16Array(8);\n    this.channel_count = new Uint16Array(8);\n    this.channel_count_init = new Uint16Array(8);\n    this.channel_mask = new Uint8Array(8);\n    this.channel_mode = new Uint8Array(8);\n    this.unmask_listeners = [];\n\n    this.lsb_msb_flipflop = 0;\n\n    var io = cpu.io;\n\n    io.register_write(0x00, this, this.port_addr_write.bind(this, 0));\n    io.register_write(0x02, this, this.port_addr_write.bind(this, 1));\n    io.register_write(0x04, this, this.port_addr_write.bind(this, 2));\n    io.register_write(0x06, this, this.port_addr_write.bind(this, 3));\n    io.register_write(0x01, this, this.port_count_write.bind(this, 0));\n    io.register_write(0x03, this, this.port_count_write.bind(this, 1));\n    io.register_write(0x05, this, this.port_count_write.bind(this, 2));\n    io.register_write(0x07, this, this.port_count_write.bind(this, 3));\n\n    io.register_read(0x00, this, this.port_addr_read.bind(this, 0));\n    io.register_read(0x02, this, this.port_addr_read.bind(this, 1));\n    io.register_read(0x04, this, this.port_addr_read.bind(this, 2));\n    io.register_read(0x06, this, this.port_addr_read.bind(this, 3));\n    io.register_read(0x01, this, this.port_count_read.bind(this, 0));\n    io.register_read(0x03, this, this.port_count_read.bind(this, 1));\n    io.register_read(0x05, this, this.port_count_read.bind(this, 2));\n    io.register_read(0x07, this, this.port_count_read.bind(this, 3));\n\n    io.register_write(0xC0, this, this.port_addr_write.bind(this, 4));\n    io.register_write(0xC4, this, this.port_addr_write.bind(this, 5));\n    io.register_write(0xC8, this, this.port_addr_write.bind(this, 6));\n    io.register_write(0xCC, this, this.port_addr_write.bind(this, 7));\n    io.register_write(0xC2, this, this.port_count_write.bind(this, 4));\n    io.register_write(0xC6, this, this.port_count_write.bind(this, 5));\n    io.register_write(0xCA, this, this.port_count_write.bind(this, 6));\n    io.register_write(0xCE, this, this.port_count_write.bind(this, 7));\n\n    io.register_read(0xC0, this, this.port_addr_read.bind(this, 4));\n    io.register_read(0xC4, this, this.port_addr_read.bind(this, 5));\n    io.register_read(0xC8, this, this.port_addr_read.bind(this, 6));\n    io.register_read(0xCC, this, this.port_addr_read.bind(this, 7));\n    io.register_read(0xC2, this, this.port_count_read.bind(this, 4));\n    io.register_read(0xC6, this, this.port_count_read.bind(this, 5));\n    io.register_read(0xCA, this, this.port_count_read.bind(this, 6));\n    io.register_read(0xCE, this, this.port_count_read.bind(this, 7));\n\n    io.register_write(0x87, this, this.port_page_write.bind(this, 0));\n    io.register_write(0x83, this, this.port_page_write.bind(this, 1));\n    io.register_write(0x81, this, this.port_page_write.bind(this, 2));\n    io.register_write(0x82, this, this.port_page_write.bind(this, 3));\n    io.register_write(0x8F, this, this.port_page_write.bind(this, 4));\n    io.register_write(0x8B, this, this.port_page_write.bind(this, 5));\n    io.register_write(0x89, this, this.port_page_write.bind(this, 6));\n    io.register_write(0x8A, this, this.port_page_write.bind(this, 7));\n\n    io.register_read(0x87, this, this.port_page_read.bind(this, 0));\n    io.register_read(0x83, this, this.port_page_read.bind(this, 1));\n    io.register_read(0x81, this, this.port_page_read.bind(this, 2));\n    io.register_read(0x82, this, this.port_page_read.bind(this, 3));\n    io.register_read(0x8F, this, this.port_page_read.bind(this, 4));\n    io.register_read(0x8B, this, this.port_page_read.bind(this, 5));\n    io.register_read(0x89, this, this.port_page_read.bind(this, 6));\n    io.register_read(0x8A, this, this.port_page_read.bind(this, 7));\n\n    io.register_write(0x487, this, this.port_pagehi_write.bind(this, 0));\n    io.register_write(0x483, this, this.port_pagehi_write.bind(this, 1));\n    io.register_write(0x481, this, this.port_pagehi_write.bind(this, 2));\n    io.register_write(0x482, this, this.port_pagehi_write.bind(this, 3));\n    io.register_write(0x48B, this, this.port_pagehi_write.bind(this, 5));\n    io.register_write(0x489, this, this.port_pagehi_write.bind(this, 6));\n    io.register_write(0x48A, this, this.port_pagehi_write.bind(this, 7));\n\n    io.register_read(0x487, this, this.port_pagehi_read.bind(this, 0));\n    io.register_read(0x483, this, this.port_pagehi_read.bind(this, 1));\n    io.register_read(0x481, this, this.port_pagehi_read.bind(this, 2));\n    io.register_read(0x482, this, this.port_pagehi_read.bind(this, 3));\n    io.register_read(0x48B, this, this.port_pagehi_read.bind(this, 5));\n    io.register_read(0x489, this, this.port_pagehi_read.bind(this, 6));\n    io.register_read(0x48A, this, this.port_pagehi_read.bind(this, 7));\n\n    io.register_write(0x0A, this, this.port_singlemask_write.bind(this, 0));\n    io.register_write(0xD4, this, this.port_singlemask_write.bind(this, 4));\n    io.register_write(0x0F, this, this.port_multimask_write.bind(this, 0));\n    io.register_write(0xDE, this, this.port_multimask_write.bind(this, 4));\n\n    io.register_read(0x0F, this, this.port_multimask_read.bind(this, 0));\n    io.register_read(0xDE, this, this.port_multimask_read.bind(this, 4));\n\n    io.register_write(0x0B, this, this.port_mode_write.bind(this, 0));\n    io.register_write(0xD6, this, this.port_mode_write.bind(this, 4));\n\n    io.register_write(0x0C, this, this.portC_write);\n    io.register_write(0xD8, this, this.portC_write);\n}\n\nDMA.prototype.get_state = function()\n{\n    return [\n        this.channel_page,\n        this.channel_pagehi,\n        this.channel_addr,\n        this.channel_addr_init,\n        this.channel_count,\n        this.channel_count_init,\n        this.channel_mask,\n        this.channel_mode,\n        this.lsb_msb_flipflop,\n    ];\n};\n\nDMA.prototype.set_state = function(state)\n{\n    this.channel_page = state[0];\n    this.channel_pagehi = state[1];\n    this.channel_addr = state[2];\n    this.channel_addr_init = state[3];\n    this.channel_count = state[4];\n    this.channel_count_init = state[5];\n    this.channel_mask = state[6];\n    this.channel_mode = state[7];\n    this.lsb_msb_flipflop = state[8];\n};\n\nDMA.prototype.port_count_write = function(channel, data_byte)\n{\n    dbg_log(\"count write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_count[channel] =\n        this.flipflop_get(this.channel_count[channel], data_byte, false);\n\n    this.channel_count_init[channel] =\n        this.flipflop_get(this.channel_count_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_count_read = function(channel)\n{\n    dbg_log(\"count read [\" + channel + \"] -> \" + h(this.channel_count[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_count[channel]);\n};\n\nDMA.prototype.port_addr_write = function(channel, data_byte)\n{\n    dbg_log(\"addr write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n\n    this.channel_addr[channel] =\n        this.flipflop_get(this.channel_addr[channel], data_byte, false);\n\n    this.channel_addr_init[channel] =\n        this.flipflop_get(this.channel_addr_init[channel], data_byte, true);\n};\n\nDMA.prototype.port_addr_read = function(channel)\n{\n    dbg_log(\"addr read [\" + channel + \"] -> \" + h(this.channel_addr[channel]), LOG_DMA);\n    return this.flipflop_read(this.channel_addr[channel]);\n};\n\nDMA.prototype.port_pagehi_write = function(channel, data_byte)\n{\n    dbg_log(\"pagehi write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_pagehi[channel] = data_byte;\n};\n\nDMA.prototype.port_pagehi_read = function(channel)\n{\n    dbg_log(\"pagehi read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_pagehi[channel];\n};\n\nDMA.prototype.port_page_write = function(channel, data_byte)\n{\n    dbg_log(\"page write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_page[channel] = data_byte;\n};\n\nDMA.prototype.port_page_read = function(channel)\n{\n    dbg_log(\"page read [\" + channel + \"]\", LOG_DMA);\n    return this.channel_page[channel];\n};\n\nDMA.prototype.port_singlemask_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    var value = data_byte & 0x4 ? 1 : 0;\n    dbg_log(\"singlechannel mask write [\" + channel + \"] = \" + value, LOG_DMA);\n    this.update_mask(channel, value);\n};\n\nDMA.prototype.port_multimask_write = function(channel_offset, data_byte)\n{\n    dbg_log(\"multichannel mask write: \" + h(data_byte), LOG_DMA);\n    for(var i = 0; i < 4; i++)\n    {\n        this.update_mask(channel_offset + i, data_byte & (1 << i));\n    }\n};\n\nDMA.prototype.port_multimask_read = function(channel_offset)\n{\n    var value = 0;\n    value |= this.channel_mask[channel_offset + 0];\n    value |= this.channel_mask[channel_offset + 1] << 1;\n    value |= this.channel_mask[channel_offset + 2] << 2;\n    value |= this.channel_mask[channel_offset + 3] << 3;\n    dbg_log(\"multichannel mask read: \" + h(value), LOG_DMA);\n    return value;\n};\n\nDMA.prototype.port_mode_write = function(channel_offset, data_byte)\n{\n    var channel = (data_byte & 0x3) + channel_offset;\n    dbg_log(\"mode write [\" + channel + \"] = \" + h(data_byte), LOG_DMA);\n    this.channel_mode[channel] = data_byte;\n};\n\nDMA.prototype.portC_write = function(data_byte)\n{\n    dbg_log(\"flipflop reset\", LOG_DMA);\n    this.lsb_msb_flipflop = 0;\n};\n\nDMA.prototype.on_unmask = function(fn, this_value)\n{\n    this.unmask_listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\nDMA.prototype.update_mask = function(channel, value)\n{\n    if(this.channel_mask[channel] !== value)\n    {\n        this.channel_mask[channel] = value;\n\n        if(!value)\n        {\n            dbg_log(\"firing on_unmask(\" + channel + \")\", LOG_DMA);\n            for(var i = 0; i < this.unmask_listeners.length; i++)\n            {\n                this.unmask_listeners[i].fn.call(\n                    this.unmask_listeners[i].this_value,\n                    channel\n                );\n            }\n        }\n    }\n};\n\n// read data, write to memory\nDMA.prototype.do_read = function(buffer, start, len, channel, fn)\n{\n    var read_count = this.count_get_8bit(channel),\n        addr = this.address_get_8bit(channel);\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_count), LOG_DMA);\n\n    if(len < read_count)\n    {\n        dbg_log(\"DMA should read more than provided: \" + h(len) + \" \" + h(read_count), LOG_DMA);\n    }\n\n    if(start + read_count > buffer.byteLength)\n    {\n        dbg_log(\"DMA read outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        var cpu = this.cpu;\n        this.channel_addr[channel] += read_count;\n\n        buffer.get(start, read_count, function(data)\n        {\n            cpu.write_blob(data, addr);\n            fn(false);\n        });\n    }\n};\n\n// write data, read memory\n// start and len in bytes\nDMA.prototype.do_write = function(buffer, start, len, channel, fn)\n{\n    var read_count = (this.channel_count[channel] + 1) & 0xFFFF,\n        bytes_per_count = channel >= 5 ? 2 : 1,\n        read_bytes = read_count * bytes_per_count,\n        addr = this.address_get_8bit(channel),\n        unfinished = false,\n        want_more = false,\n        autoinit = this.channel_mode[channel] & 0x10;\n\n    dbg_log(\"DMA write channel \" + channel, LOG_DMA);\n    dbg_log(\"to \" + h(addr) + \" len \" + h(read_bytes), LOG_DMA);\n\n    if(len < read_bytes)\n    {\n        dbg_log(\"DMA should read more than provided\", LOG_DMA);\n        read_count = Math.floor(len / bytes_per_count);\n        read_bytes = read_count * bytes_per_count;\n        unfinished = true;\n    }\n    else if(len > read_bytes)\n    {\n        dbg_log(\"DMA attempted to read more than provided\", LOG_DMA);\n        want_more = true;\n    }\n\n    if(start + read_bytes > buffer.byteLength)\n    {\n        dbg_log(\"DMA write outside of buffer\", LOG_DMA);\n        fn(true);\n    }\n    else\n    {\n        this.channel_addr[channel] += read_count;\n        this.channel_count[channel] -= read_count;\n        // when complete, counter should underflow to 0xFFFF\n\n        if(!unfinished && autoinit)\n        {\n            dbg_log(\"DMA autoinit\", LOG_DMA);\n            this.channel_addr[channel] = this.channel_addr_init[channel];\n            this.channel_count[channel] = this.channel_count_init[channel];\n        }\n\n        buffer.set(start,\n                this.cpu.mem8.subarray(addr, addr + read_bytes),\n                () =>\n                {\n                    if(want_more && autoinit)\n                    {\n                        dbg_log(\"DMA continuing from start\", LOG_DMA);\n                        this.do_write(buffer, start + read_bytes, len - read_bytes, channel, fn);\n                    }\n                    else\n                    {\n                        fn(false);\n                    }\n                }\n            );\n    }\n};\n\nDMA.prototype.address_get_8bit = function(channel)\n{\n    var addr = this.channel_addr[channel];\n\n    // http://wiki.osdev.org/ISA_DMA#16_bit_issues\n    if(channel >= 5)\n    {\n        addr = (addr << 1);\n    }\n\n    addr &= 0xFFFF;\n    addr |= this.channel_page[channel] << 16;\n    addr |= this.channel_pagehi[channel] << 24;\n\n    return addr;\n};\n\nDMA.prototype.count_get_8bit = function(channel)\n{\n    var count = this.channel_count[channel] + 1;\n\n    if(channel >= 5)\n    {\n        count *= 2;\n    }\n\n    return count;\n};\n\nDMA.prototype.flipflop_get = function(old_dword, new_byte, continuing)\n{\n    if(!continuing)\n    {\n        this.lsb_msb_flipflop ^= 1;\n    }\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return old_dword & ~0xFF | new_byte;\n    }\n    else\n    {\n        // high byte\n        return old_dword & ~0xFF00 | new_byte << 8;\n    }\n};\n\nDMA.prototype.flipflop_read = function(dword)\n{\n    this.lsb_msb_flipflop ^= 1;\n\n    if(this.lsb_msb_flipflop)\n    {\n        // low byte\n        return dword & 0xFF;\n    }\n    else\n    {\n        // high byte\n        return (dword >> 8) & 0xFF;\n    }\n};\n","\"use strict\";\n\n/**\n * @const\n * In kHz\n */\nvar OSCILLATOR_FREQ = 1193.1816666; // 1.193182 MHz\n\n/**\n * @constructor\n *\n * Programmable Interval Timer\n */\nfunction PIT(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.bus = bus;\n\n    this.counter_start_time = new Float64Array(3);\n    this.counter_start_value = new Uint16Array(3);\n\n    this.counter_next_low = new Uint8Array(4);\n    this.counter_enabled = new Uint8Array(4);\n    this.counter_mode = new Uint8Array(4);\n    this.counter_read_mode = new Uint8Array(4);\n\n    // 2 = latch low, 1 = latch high, 0 = no latch\n    this.counter_latch = new Uint8Array(4);\n    this.counter_latch_value = new Uint16Array(3);\n\n    this.counter_reload = new Uint16Array(3);\n\n    // TODO:\n    // - counter2 can be controlled by an input\n\n    cpu.io.register_read(0x61, this, function()\n    {\n        var now = v86.microtick();\n\n        var ref_toggle = (now * (1000 * 1000 / 15000)) & 1;\n        var counter2_out = this.did_rollover(2, now);\n\n        return ref_toggle << 4 | counter2_out << 5;\n    });\n    cpu.io.register_write(0x61, this, function(data)\n    {\n        if(data & 1)\n        {\n            this.bus.send(\"pcspeaker-enable\");\n        }\n        else\n        {\n            this.bus.send(\"pcspeaker-disable\");\n        }\n    });\n\n    cpu.io.register_read(0x40, this, function() { return this.counter_read(0); });\n    cpu.io.register_read(0x41, this, function() { return this.counter_read(1); });\n    cpu.io.register_read(0x42, this, function() { return this.counter_read(2); });\n\n    cpu.io.register_write(0x40, this, function(data) { this.counter_write(0, data); });\n    cpu.io.register_write(0x41, this, function(data) { this.counter_write(1, data); });\n    cpu.io.register_write(0x42, this, function(data) { this.counter_write(2, data); });\n\n    cpu.io.register_write(0x43, this, this.port43_write);\n}\n\nPIT.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.counter_next_low;\n    state[1] = this.counter_enabled;\n    state[2] = this.counter_mode;\n    state[3] = this.counter_read_mode;\n    state[4] = this.counter_latch;\n    state[5] = this.counter_latch_value;\n    state[6] = this.counter_reload;\n    state[7] = this.counter_start_time;\n    state[8] = this.counter_start_value;\n\n    return state;\n};\n\nPIT.prototype.set_state = function(state)\n{\n    this.counter_next_low = state[0];\n    this.counter_enabled = state[1];\n    this.counter_mode = state[2];\n    this.counter_read_mode = state[3];\n    this.counter_latch = state[4];\n    this.counter_latch_value = state[5];\n    this.counter_reload = state[6];\n    this.counter_start_time = state[7];\n    this.counter_start_value = state[8];\n};\n\nPIT.prototype.timer = function(now, no_irq)\n{\n    var time_to_next_interrupt = 100;\n\n    // counter 0 produces interrupts\n    if(!no_irq)\n    {\n        if(this.counter_enabled[0] && this.did_rollover(0, now))\n        {\n            time_to_next_interrupt = 0;\n\n            this.counter_start_value[0] = this.get_counter_value(0, now);\n            this.counter_start_time[0] = now;\n\n            dbg_log(\"pit interrupt. new value: \" + this.counter_start_value[0], LOG_PIT);\n\n            this.cpu.device_raise_irq(0);\n            var mode = this.counter_mode[0];\n\n            if(mode === 0)\n            {\n                this.counter_enabled[0] = 0;\n            }\n        }\n        else\n        {\n            this.cpu.device_lower_irq(0);\n        }\n    }\n    time_to_next_interrupt = 0;\n\n    return time_to_next_interrupt;\n};\n\nPIT.prototype.get_counter_value = function(i, now)\n{\n    if(!this.counter_enabled[i])\n    {\n        return 0;\n    }\n\n    var diff = now - this.counter_start_time[i];\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n\n    var value = this.counter_start_value[i] - diff_in_ticks;\n\n    dbg_log(\"diff=\" + diff + \" dticks=\" + diff_in_ticks + \" value=\" + value + \" reload=\" + this.counter_reload[i], LOG_PIT);\n\n    var reload = this.counter_reload[i];\n\n    if(value >= reload)\n    {\n        dbg_log(\"Warning: Counter\" + i + \" value \" + value  + \" is larger than reload \" + reload, LOG_PIT);\n        value %= reload;\n    }\n    else if(value < 0)\n    {\n        value = value % reload + reload;\n    }\n\n    return value;\n};\n\nPIT.prototype.did_rollover = function(i, now)\n{\n    var diff = now - this.counter_start_time[i];\n\n    if(diff < 0)\n    {\n        // should only happen after restore_state\n        dbg_log(\"Warning: PIT timer difference is negative, resetting\");\n        return true;\n    }\n    var diff_in_ticks = Math.floor(diff * OSCILLATOR_FREQ);\n    //dbg_log(i + \": diff=\" + diff + \" start_time=\" + this.counter_start_time[i] + \" diff_in_ticks=\" + diff_in_ticks + \" (\" + diff * OSCILLATOR_FREQ + \") start_value=\" + this.counter_start_value[i] + \" did_rollover=\" + (this.counter_start_value[i] < diff_in_ticks), LOG_PIT);\n\n    return this.counter_start_value[i] < diff_in_ticks;\n};\n\nPIT.prototype.counter_read = function(i)\n{\n    var latch = this.counter_latch[i];\n\n    if(latch)\n    {\n        this.counter_latch[i]--;\n\n        if(latch === 2)\n        {\n            return this.counter_latch_value[i] & 0xFF;\n        }\n        else\n        {\n            return this.counter_latch_value[i] >> 8;\n        }\n    }\n    else\n    {\n        var next_low = this.counter_next_low[i];\n\n        if(this.counter_mode[i] === 3)\n        {\n            this.counter_next_low[i] ^= 1;\n        }\n\n        var value = this.get_counter_value(i, v86.microtick());\n\n        if(next_low)\n        {\n            return value & 0xFF;\n        }\n        else\n        {\n            return value >> 8;\n        }\n    }\n};\n\nPIT.prototype.counter_write = function(i, value)\n{\n    if(this.counter_next_low[i])\n    {\n        this.counter_reload[i] = this.counter_reload[i] & ~0xFF | value;\n    }\n    else\n    {\n        this.counter_reload[i] = this.counter_reload[i] & 0xFF | value << 8;\n    }\n\n    if(this.counter_read_mode[i] !== 3 || !this.counter_next_low[i])\n    {\n        if(!this.counter_reload[i])\n        {\n            this.counter_reload[i] = 0xFFFF;\n        }\n\n        // depends on the mode, should actually\n        // happen on the first tick\n        this.counter_start_value[i] = this.counter_reload[i];\n\n        this.counter_enabled[i] = true;\n\n        this.counter_start_time[i] = v86.microtick();\n\n        dbg_log(\"counter\" + i + \" reload=\" + h(this.counter_reload[i]) +\n                \" tick=\" + (this.counter_reload[i] || 0x10000) / OSCILLATOR_FREQ + \"ms\", LOG_PIT);\n    }\n\n    if(this.counter_read_mode[i] === 3)\n    {\n        this.counter_next_low[i] ^= 1;\n    }\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n\nPIT.prototype.port43_write = function(reg_byte)\n{\n    var mode = reg_byte >> 1 & 7,\n        binary_mode = reg_byte & 1,\n        i = reg_byte >> 6 & 3,\n        read_mode = reg_byte >> 4 & 3;\n\n    if(i === 1)\n    {\n        dbg_log(\"Unimplemented timer1\", LOG_PIT);\n    }\n\n    if(i === 3)\n    {\n        dbg_log(\"Unimplemented read back\", LOG_PIT);\n        return;\n    }\n\n    if(read_mode === 0)\n    {\n        // latch\n        this.counter_latch[i] = 2;\n        var value = this.get_counter_value(i, v86.microtick());\n        dbg_log(\"latch: \" + value, LOG_PIT);\n        this.counter_latch_value[i] = value ? value - 1 : 0\n\n        return;\n    }\n\n    if(mode >= 6)\n    {\n        // 6 and 7 are aliased to 2 and 3\n        mode &= ~4;\n    }\n\n    dbg_log(\"Control: mode=\" + mode + \" ctr=\" + i +\n            \" read_mode=\" + read_mode + \" bcd=\" + binary_mode, LOG_PIT);\n\n    if(read_mode === 1)\n    {\n        // msb\n        this.counter_next_low[i] = 0;\n    }\n    else if(read_mode === 2)\n    {\n        // lsb\n        this.counter_next_low[i] = 1;\n    }\n    else\n    {\n        // first lsb then msb\n        this.counter_next_low[i] = 1;\n    }\n\n    if(i === 0)\n    {\n        this.cpu.device_lower_irq(0);\n    }\n\n    if(mode === 0)\n    {\n    }\n    else if(mode === 3 || mode === 2)\n    {\n        // what is the difference\n    }\n    else\n    {\n        dbg_log(\"Unimplemented counter mode: \" + h(mode), LOG_PIT);\n    }\n\n    this.counter_mode[i] = mode;\n    this.counter_read_mode[i] = read_mode;\n\n    this.bus.send(\"pcspeaker-update\", [this.counter_mode[2], this.counter_reload[2]]);\n};\n","\"use strict\";\n\n\nvar\n    /**\n     * Always 64k\n     * @const\n     */\n    VGA_BANK_SIZE = 64 * 1024,\n\n    /** @const */\n    MAX_XRES = 2560,\n\n    /** @const */\n    MAX_YRES = 1600,\n\n    /** @const */\n    MAX_BPP = 32;\n\n/** @const */\n//var VGA_LFB_ADDRESS = 0xFE000000; // set by seabios\nvar VGA_LFB_ADDRESS = 0xE0000000;\n\n/** @const */\nvar VGA_PIXEL_BUFFER_START = 4 * VGA_BANK_SIZE;\n\n/**\n * @const\n * Equals the maximum number of pixels for non svga.\n * 8 pixels per byte.\n */\nvar VGA_PIXEL_BUFFER_SIZE = 8 * VGA_BANK_SIZE;\n\n/** @const */\nvar VGA_MIN_MEMORY_SIZE = VGA_PIXEL_BUFFER_START + VGA_PIXEL_BUFFER_SIZE;\n\n/**\n * @const\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\n */\nvar VGA_HOST_MEMORY_SPACE_START = Uint32Array.from([\n    0xA0000,\n    0xA0000,\n    0xB0000,\n    0xB8000,\n]);\n\n/**\n * @const\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#06}\n */\nvar VGA_HOST_MEMORY_SPACE_SIZE = Uint32Array.from([\n    0x20000, // 128K\n    0x10000, // 64K\n    0x8000, // 32K\n    0x8000, // 32K\n]);\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {number} vga_memory_size\n */\nfunction VGAScreen(cpu, bus, vga_memory_size)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.vga_memory_size = vga_memory_size;\n\n    /** @type {number} */\n    this.cursor_address = 0;\n\n    /** @type {number} */\n    this.cursor_scanline_start = 0xE;\n\n    /** @type {number} */\n    this.cursor_scanline_end = 0xF;\n\n    /**\n     * Number of columns in text mode\n     * @type {number}\n     */\n    this.max_cols = 80;\n\n    /**\n     * Number of rows in text mode\n     * @type {number}\n     */\n    this.max_rows = 25;\n\n    /**\n     * Width in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_width = 0;\n\n    /**\n     * Height in pixels in graphical mode\n     * @type {number}\n     */\n    this.screen_height = 0;\n\n    /**\n     * Logical width in pixels of virtual buffer available for panning\n     * @type {number}\n     */\n    this.virtual_width = 0;\n\n    /**\n     * Logical height in pixels of virtual buffer available for panning\n     * @type {number}\n     */\n    this.virtual_height = 0;\n\n    /**\n     * The rectangular fragments of the image buffer, and their destination\n     * locations, to be drawn every screen_fill_buffer during VGA modes.\n     * @type {Array<Object<string, number>>}\n     */\n    this.layers = [];\n\n    /**\n     * video memory start address\n     * @type {number}\n     */\n    this.start_address = 0;\n\n    /**\n     * Start address - a copy of start_address that only gets updated\n     * during VSync, used for panning and page flipping\n     * @type {number}\n     */\n    this.start_address_latched = 0;\n\n    /**\n     * Unimplemented CRTC registers go here\n     */\n    this.crtc = new Uint8Array(0x19);\n\n    // Implemented CRTC registers:\n\n    /** @type {number} */\n    this.crtc_mode = 0;\n\n    /** @type {number} */\n    this.horizontal_display_enable_end = 0;\n\n    /** @type {number} */\n    this.horizontal_blank_start = 0;\n\n    /** @type {number} */\n    this.vertical_display_enable_end = 0;\n\n    /** @type {number} */\n    this.vertical_blank_start = 0;\n\n    /** @type {number} */\n    this.underline_location_register = 0;\n\n    /** @type {number} */\n    this.preset_row_scan = 0;\n\n    /** @type {number} */\n    this.offset_register = 0;\n\n    /** @type {number} */\n    this.line_compare = 0;\n\n    // End of CRTC registers\n\n    /**\n     * Used for svga, e.g. banked modes\n     * @type{boolean}\n     */\n    this.graphical_mode_is_linear = true;\n\n    /** @type {boolean} */\n    this.graphical_mode = false;\n    setTimeout(() => { bus.send(\"screen-set-mode\", this.graphical_mode); }, 0);\n\n    /*\n     * VGA palette containing 256 colors for video mode 13, svga 8bpp, etc.\n     * Needs to be initialised by the BIOS\n     */\n    this.vga256_palette = new Int32Array(256);\n\n    /**\n     * VGA read latches\n     * @type{number}\n     */\n    this.latch_dword = 0;\n\n    /** @type {number} */\n    this.svga_width = 0;\n\n    /** @type {number} */\n    this.svga_height = 0;\n\n    this.svga_enabled = false;\n\n    /** @type {number} */\n    this.svga_bpp = 32;\n\n    /** @type {number} */\n    this.svga_bank_offset = 0;\n\n    /**\n     * The video buffer offset created by VBE_DISPI_INDEX_Y_OFFSET\n     * In bytes\n     * @type {number}\n     */\n    this.svga_offset = 0;\n\n    // Experimental, could probably need some changes\n    // 01:00.0 VGA compatible controller: NVIDIA Corporation GT216 [GeForce GT 220] (rev a2)\n    this.pci_space = [\n        0xde, 0x10, 0x20, 0x0a, 0x07, 0x00, 0x00, 0x00,  0xa2, 0x00, 0x00, 0x03, 0x00, 0x00, 0x80, 0x00,\n        0x08, VGA_LFB_ADDRESS >>> 8, VGA_LFB_ADDRESS >>> 16, VGA_LFB_ADDRESS >>> 24,\n                                0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x12 << 3;\n    this.pci_bars = [\n        {\n            size: vga_memory_size,\n        },\n    ];\n\n    // TODO: Should be matched with vga bios size and mapping address\n    // Seabios config for this device:\n    // CONFIG_VGA_PCI=y\n    // CONFIG_OVERRIDE_PCI_ID=y\n    // CONFIG_VGA_VID=0x10de\n    // CONFIG_VGA_DID=0x0a20\n\n    this.pci_rom_size = 0x10000;\n    this.pci_rom_address = 0xFEB00000;\n\n    this.name = \"vga\";\n\n    this.stats = {\n        is_graphical: false,\n        res_x: 0,\n        res_y: 0,\n        bpp: 0,\n    };\n\n    this.index_crtc = 0;\n\n    // index for setting colors through port 3C9h\n    this.dac_color_index_write = 0;\n    this.dac_color_index_read = 0;\n    this.dac_state = 0;\n\n    this.dac_map = new Uint8Array(0x10);\n\n    this.attribute_controller_index = -1;\n    this.palette_source = 0x20;\n    this.attribute_mode = 0;\n    this.color_plane_enable = 0;\n    this.horizontal_panning = 0;\n    this.color_select = 0;\n\n    this.sequencer_index = -1;\n\n    // bitmap of planes 0-3\n    this.plane_write_bm = 0xF;\n    this.sequencer_memory_mode = 0;\n    this.clocking_mode = 0;\n    this.graphics_index = -1;\n\n    this.plane_read = 0, // value 0-3, which plane to read\n    this.planar_mode = 0;\n    this.planar_rotate_reg = 0;\n    this.planar_bitmap = 0xFF;\n    this.planar_setreset = 0;\n    this.planar_setreset_enable = 0;\n    this.miscellaneous_graphics_register = 0;\n\n    this.color_compare = 0;\n    this.color_dont_care = 0;\n\n    this.max_scan_line = 0;\n\n    this.miscellaneous_output_register = 0xff;\n    this.port_3DA_value = 0xFF;\n\n\n    var io = cpu.io;\n\n    io.register_write(0x3C0, this, this.port3C0_write);\n    io.register_read(0x3C0, this, this.port3C0_read, this.port3C0_read16);\n\n    io.register_read(0x3C1, this, this.port3C1_read);\n    io.register_write(0x3C2, this, this.port3C2_write);\n\n    io.register_write_consecutive(0x3C4, this, this.port3C4_write, this.port3C5_write);\n\n    io.register_read(0x3C4, this, this.port3C4_read);\n    io.register_read(0x3C5, this, this.port3C5_read);\n\n    io.register_write_consecutive(0x3CE, this, this.port3CE_write, this.port3CF_write);\n\n    io.register_read(0x3CE, this, this.port3CE_read);\n    io.register_read(0x3CF, this, this.port3CF_read);\n\n    io.register_write(0x3C7, this, this.port3C7_write);\n    io.register_read(0x3C7, this, this.port3C7_read);\n    io.register_write(0x3C8, this, this.port3C8_write);\n    io.register_read(0x3C8, this, this.port3C8_read);\n    io.register_write(0x3C9, this, this.port3C9_write);\n    io.register_read(0x3C9, this, this.port3C9_read);\n\n    io.register_read(0x3CC, this, this.port3CC_read);\n\n    io.register_write_consecutive(0x3D4, this, this.port3D4_write, this.port3D5_write);\n    io.register_read(0x3D4, this, this.port3D4_read);\n    io.register_read(0x3D5, this, this.port3D5_read);\n\n    io.register_read(0x3CA, this, function() { dbg_log(\"3CA read\", LOG_VGA); return 0; });\n\n    io.register_read(0x3DA, this, this.port3DA_read);\n    io.register_read(0x3BA, this, this.port3DA_read);\n\n\n    // Bochs VBE Extensions\n    // http://wiki.osdev.org/Bochs_VBE_Extensions\n    this.dispi_index = -1;\n    this.dispi_enable_value = 0;\n\n    io.register_write(0x1CE, this, undefined, this.port1CE_write);\n\n    io.register_write(0x1CF, this, undefined, this.port1CF_write);\n    io.register_read(0x1CF, this, undefined, this.port1CF_read);\n\n    if(this.vga_memory_size === undefined || this.vga_memory_size < VGA_MIN_MEMORY_SIZE)\n    {\n        this.vga_memory_size = VGA_MIN_MEMORY_SIZE;\n        dbg_log(\"vga memory size rounded up to \" + this.vga_memory_size, LOG_VGA);\n    }\n    else if(this.vga_memory_size & (VGA_BANK_SIZE - 1))\n    {\n        // round up to next 64k\n        this.vga_memory_size |= VGA_BANK_SIZE - 1;\n        this.vga_memory_size++;\n    }\n\n    this.svga_memory = new Uint8Array(this.vga_memory_size);\n\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n    this.diff_plot_min = this.vga_memory_size;\n    this.diff_plot_max = 0;\n\n    this.dest_buffer = undefined;\n\n    bus.register(\"screen-tell-buffer\", function(data)\n    {\n        if(this.dest_buffer && data[0])\n        {\n            data[0].set(this.dest_buffer.subarray(0, data[0].length));\n        }\n        this.dest_buffer = data[0];\n    }, this);\n\n    bus.register(\"screen-fill-buffer\", function()\n    {\n        this.screen_fill_buffer();\n    }, this);\n\n\n    this.svga_memory16 = new Uint16Array(this.svga_memory.buffer);\n    this.svga_memory32 = new Int32Array(this.svga_memory.buffer);\n    this.vga_memory = new Uint8Array(this.svga_memory.buffer, 0, 4 * VGA_BANK_SIZE);\n    this.plane0 = new Uint8Array(this.svga_memory.buffer, 0 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane1 = new Uint8Array(this.svga_memory.buffer, 1 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane2 = new Uint8Array(this.svga_memory.buffer, 2 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.plane3 = new Uint8Array(this.svga_memory.buffer, 3 * VGA_BANK_SIZE, VGA_BANK_SIZE);\n    this.pixel_buffer = new Uint8Array(this.svga_memory.buffer,\n        VGA_PIXEL_BUFFER_START, VGA_PIXEL_BUFFER_SIZE);\n\n    var me = this;\n    io.mmap_register(0xA0000, 0x20000,\n        function(addr) { return me.vga_memory_read(addr); },\n        function(addr, value) { me.vga_memory_write(addr, value); }\n    );\n    io.mmap_register(VGA_LFB_ADDRESS, this.vga_memory_size,\n        function(addr) { return me.svga_memory_read8(addr); },\n        function(addr, value) { me.svga_memory_write8(addr, value); },\n        function(addr) { return me.svga_memory_read32(addr); },\n        function(addr, value) { me.svga_memory_write32(addr, value); }\n    );\n\n    cpu.devices.pci.register_device(this);\n}\n\nVGAScreen.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.vga_memory_size;\n    state[1] = this.cursor_address;\n    state[2] = this.cursor_scanline_start;\n    state[3] = this.cursor_scanline_end;\n    state[4] = this.max_cols;\n    state[5] = this.max_rows;\n    state[6] = this.layers;\n    state[7] = this.dac_state;\n    state[8] = this.start_address;\n    state[9] = this.graphical_mode;\n    state[10] = this.vga256_palette;\n    state[11] = this.latch_dword;\n    state[12] = this.color_compare;\n    state[13] = this.color_dont_care;\n    state[14] = this.miscellaneous_graphics_register;\n    state[15] = this.svga_width;\n    state[16] = this.svga_height;\n    state[17] = this.crtc_mode;\n    state[18] = this.svga_enabled;\n    state[19] = this.svga_bpp;\n    state[20] = this.svga_bank_offset;\n    state[21] = this.svga_offset;\n    state[22] = this.index_crtc;\n    state[23] = this.dac_color_index_write;\n    state[24] = this.dac_color_index_read;\n    state[25] = this.dac_map;\n    state[26] = this.sequencer_index;\n    state[27] = this.plane_write_bm;\n    state[28] = this.sequencer_memory_mode;\n    state[29] = this.graphics_index;\n    state[30] = this.plane_read;\n    state[31] = this.planar_mode;\n    state[32] = this.planar_rotate_reg;\n    state[33] = this.planar_bitmap;\n    state[34] = this.max_scan_line;\n    state[35] = this.miscellaneous_output_register;\n    state[36] = this.port_3DA_value;\n    state[37] = this.dispi_index;\n    state[38] = this.dispi_enable_value;\n    state[39] = this.svga_memory;\n    state[40] = this.graphical_mode_is_linear;\n    state[41] = this.attribute_controller_index;\n    state[42] = this.offset_register;\n    state[43] = this.planar_setreset;\n    state[44] = this.planar_setreset_enable;\n    state[45] = this.start_address_latched;\n    state[46] = this.crtc;\n    state[47] = this.horizontal_display_enable_end;\n    state[48] = this.horizontal_blank_start;\n    state[49] = this.vertical_display_enable_end;\n    state[50] = this.vertical_blank_start;\n    state[51] = this.underline_location_register;\n    state[52] = this.preset_row_scan;\n    state[53] = this.offset_register;\n    state[54] = this.palette_source;\n    state[55] = this.attribute_mode;\n    state[56] = this.color_plane_enable;\n    state[57] = this.horizontal_panning;\n    state[58] = this.color_select;\n    state[59] = this.clocking_mode;\n    state[60] = this.line_compare;\n\n    return state;\n};\n\nVGAScreen.prototype.set_state = function(state)\n{\n    this.vga_memory_size = state[0];\n    this.cursor_address = state[1];\n    this.cursor_scanline_start = state[2];\n    this.cursor_scanline_end = state[3];\n    this.max_cols = state[4];\n    this.max_rows = state[5];\n    this.layers = state[6];\n    this.dac_state = state[7];\n    this.start_address = state[8];\n    this.graphical_mode = state[9];\n    this.vga256_palette = state[10];\n    this.latch_dword = state[11];\n    this.color_compare = state[12];\n    this.color_dont_care = state[13];\n    this.miscellaneous_graphics_register = state[14];\n    this.svga_width = state[15];\n    this.svga_height = state[16];\n    this.crtc_mode = state[17];\n    this.svga_enabled = state[18];\n    this.svga_bpp = state[19];\n    this.svga_bank_offset = state[20];\n    this.svga_offset = state[21];\n    this.index_crtc = state[22];\n    this.dac_color_index_write = state[23];\n    this.dac_color_index_read = state[24];\n    this.dac_map = state[25];\n    this.sequencer_index = state[26];\n    this.plane_write_bm = state[27];\n    this.sequencer_memory_mode = state[28];\n    this.graphics_index = state[29];\n    this.plane_read = state[30];\n    this.planar_mode = state[31];\n    this.planar_rotate_reg = state[32];\n    this.planar_bitmap = state[33];\n    this.max_scan_line = state[34];\n    this.miscellaneous_output_register = state[35];\n    this.port_3DA_value = state[36];\n    this.dispi_index = state[37];\n    this.dispi_enable_value = state[38];\n    this.svga_memory.set(state[39]);\n    this.graphical_mode_is_linear = state[40];\n    this.attribute_controller_index = state[41];\n    this.offset_register = state[42];\n    this.planar_setreset = state[43];\n    this.planar_setreset_enable = state[44];\n    this.start_address_latched = state[45];\n    this.crtc.set(state[46]);\n    this.horizontal_display_enable_end = state[47];\n    this.horizontal_blank_start = state[48];\n    this.vertical_display_enable_end = state[49];\n    this.vertical_blank_start = state[50];\n    this.underline_location_register = state[51];\n    this.preset_row_scan = state[52];\n    this.offset_register = state[53];\n    this.palette_source = state[54];\n    this.attribute_mode = state[55];\n    this.color_plane_enable = state[56];\n    this.horizontal_panning = state[57];\n    this.color_select = state[58];\n    this.clocking_mode = state[59];\n    this.line_compare = state[60];\n\n    this.bus.send(\"screen-set-mode\", this.graphical_mode);\n\n    if(this.graphical_mode)\n    {\n        // Ensure set_size_graphical will update\n        this.screen_width = 0;\n        this.screen_height = 0;\n\n        if(this.svga_enabled)\n        {\n            this.set_size_graphical(this.svga_width, this.svga_height,\n                this.svga_bpp, this.svga_width, this.svga_height);\n            this.update_layers();\n        }\n        else\n        {\n            this.update_vga_size();\n            this.complete_replot();\n        }\n    }\n    else\n    {\n        this.set_size_text(this.max_cols, this.max_rows);\n        this.update_cursor_scanline();\n        this.update_cursor();\n    }\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.vga_memory_read = function(addr)\n{\n    if(this.svga_enabled && this.graphical_mode_is_linear)\n    {\n        addr -= 0xA0000;\n        addr |= this.svga_bank_offset;\n\n        return this.svga_memory[addr];\n    }\n\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\n\n    // VGA chip only decodes addresses within the selected memory space.\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\n    {\n        dbg_log(\"vga read outside memory space: addr:\" + h(addr), LOG_VGA);\n        return 0;\n    }\n\n    this.latch_dword = this.plane0[addr];\n    this.latch_dword |= this.plane1[addr] << 8;\n    this.latch_dword |= this.plane2[addr] << 16;\n    this.latch_dword |= this.plane3[addr] << 24;\n\n    if(this.planar_mode & 0x08)\n    {\n        // read mode 1\n        var reading = 0xFF;\n\n        if(this.color_dont_care & 0x1)\n        {\n            reading &= this.plane0[addr] ^ ~(this.color_compare & 0x1 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x2)\n        {\n            reading &= this.plane1[addr] ^ ~(this.color_compare & 0x2 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x4)\n        {\n            reading &= this.plane2[addr] ^ ~(this.color_compare & 0x4 ? 0xFF : 0x00);\n        }\n        if(this.color_dont_care & 0x8)\n        {\n            reading &= this.plane3[addr] ^ ~(this.color_compare & 0x8 ? 0xFF : 0x00);\n        }\n\n        return reading;\n    }\n    else\n    {\n        // read mode 0\n\n        var plane = this.plane_read;\n        if(!this.graphical_mode)\n        {\n            // We currently put all text data linearly\n            plane = 0;\n        }\n        else if(this.sequencer_memory_mode & 0x8)\n        {\n            // Chain 4\n            plane = addr & 0x3;\n            addr &= ~0x3;\n        }\n        else if(this.planar_mode & 0x10)\n        {\n            // Odd/Even host read\n            plane = addr & 0x1;\n            addr &= ~0x1;\n        }\n        return this.vga_memory[plane << 16 | addr];\n    }\n};\n\nVGAScreen.prototype.vga_memory_write = function(addr, value)\n{\n    if(this.svga_enabled && this.graphical_mode && this.graphical_mode_is_linear)\n    {\n        // vbe banked mode\n        addr -= 0xA0000;\n        this.vga_memory_write_graphical_linear(addr, value);\n        return;\n    }\n\n    var memory_space_select = this.miscellaneous_graphics_register >> 2 & 0x3;\n    addr -= VGA_HOST_MEMORY_SPACE_START[memory_space_select];\n\n    if(addr < 0 || addr >= VGA_HOST_MEMORY_SPACE_SIZE[memory_space_select])\n    {\n        dbg_log(\"vga write outside memory space: addr:\" + h(addr) + \", value:\" + h(value), LOG_VGA);\n        return;\n    }\n\n    if(this.graphical_mode)\n    {\n        this.vga_memory_write_graphical(addr, value);\n    }\n    else\n    {\n        if(!(this.plane_write_bm & 0x3))\n        {\n            // Ignore writes to font planes.\n            return;\n        }\n        this.vga_memory_write_text_mode(addr, value);\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_graphical_linear = function(addr, value)\n{\n    addr |= this.svga_bank_offset;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n};\n\nVGAScreen.prototype.vga_memory_write_graphical = function(addr, value)\n{\n    var plane_dword;\n    var write_mode = this.planar_mode & 3;\n    var bitmask = this.apply_feed(this.planar_bitmap);\n    var setreset_dword = this.apply_expand(this.planar_setreset);\n    var setreset_enable_dword = this.apply_expand(this.planar_setreset_enable);\n\n    // Write modes - see http://www.osdever.net/FreeVGA/vga/graphreg.htm#05\n    switch(write_mode)\n    {\n        case 0:\n            value = this.apply_rotate(value);\n            plane_dword = this.apply_feed(value);\n            plane_dword = this.apply_setreset(plane_dword, setreset_enable_dword);\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n        case 1:\n            plane_dword = this.latch_dword;\n            break;\n        case 2:\n            plane_dword = this.apply_expand(value);\n            plane_dword = this.apply_logical(plane_dword, this.latch_dword);\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n        case 3:\n            value = this.apply_rotate(value);\n            bitmask &= this.apply_feed(value);\n            plane_dword = setreset_dword;\n            plane_dword = this.apply_bitmask(plane_dword, bitmask);\n            break;\n    }\n\n    var plane_select = 0xF;\n\n    switch(this.sequencer_memory_mode & 0xC)\n    {\n        // Odd/Even (aka chain 2)\n        case 0x0:\n            plane_select = 0x5 << (addr & 0x1);\n            addr &= ~0x1;\n            break;\n\n        // Chain 4\n        // Note: FreeVGA may have mistakenly stated that this bit field is\n        // for system read only, yet the IBM Open Source Graphics Programmer's\n        // Reference Manual explicitly states \"both read and write\".\n        case 0x8:\n        case 0xC:\n            plane_select = 1 << (addr & 0x3);\n            addr &= ~0x3;\n            break;\n    }\n\n    // Plane masks take precedence\n    // See: http://www.osdever.net/FreeVGA/vga/seqreg.htm#02\n    plane_select &= this.plane_write_bm;\n\n    if(plane_select & 0x1) this.plane0[addr] = (plane_dword >> 0) & 0xFF;\n    if(plane_select & 0x2) this.plane1[addr] = (plane_dword >> 8) & 0xFF;\n    if(plane_select & 0x4) this.plane2[addr] = (plane_dword >> 16) & 0xFF;\n    if(plane_select & 0x8) this.plane3[addr] = (plane_dword >> 24) & 0xFF;\n\n    var pixel_addr = this.vga_addr_to_pixel(addr);\n    this.partial_replot(pixel_addr, pixel_addr + 7);\n};\n\n/**\n * Copies data_byte into the four planes, with each plane\n * represented by an 8-bit field inside the dword.\n * @param {number} data_byte\n * @return {number} 32-bit number representing the bytes for each plane.\n */\nVGAScreen.prototype.apply_feed = function(data_byte)\n{\n    var dword = data_byte;\n    dword |= data_byte << 8;\n    dword |= data_byte << 16;\n    dword |= data_byte << 24;\n    return dword;\n};\n\n/**\n * Expands bits 0 to 3 to ocupy bits 0 to 31. Each\n * bit is expanded to 0xFF if set or 0x00 if clear.\n * @param {number} data_byte\n * @return {number} 32-bit number representing the bytes for each plane.\n */\nVGAScreen.prototype.apply_expand = function(data_byte)\n{\n    var dword = data_byte & 0x1 ? 0xFF : 0x00;\n    dword |= (data_byte & 0x2 ? 0xFF : 0x00) << 8;\n    dword |= (data_byte & 0x4 ? 0xFF : 0x00) << 16;\n    dword |= (data_byte & 0x8 ? 0xFF : 0x00) << 24;\n    return dword;\n};\n\n/**\n * Planar Write - Barrel Shifter\n * @param {number} data_byte\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading3}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\n */\nVGAScreen.prototype.apply_rotate = function(data_byte)\n{\n    var wrapped = data_byte | (data_byte << 8);\n    var count = this.planar_rotate_reg & 0x7;\n    var shifted = wrapped >>> count;\n    return shifted & 0xFF;\n};\n\n/**\n * Planar Write - Set / Reset Circuitry\n * @param {number} data_dword\n * @param {number} enable_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-03.html#Heading5}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#00}\n */\nVGAScreen.prototype.apply_setreset = function(data_dword, enable_dword)\n{\n    var setreset_dword = this.apply_expand(this.planar_setreset);\n    data_dword |= enable_dword & setreset_dword;\n    data_dword &= ~enable_dword | setreset_dword;\n    return data_dword;\n};\n\n/**\n * Planar Write - ALU Unit\n * @param {number} data_dword\n * @param {number} latch_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch24/24-01.html#Heading3}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#03}\n */\nVGAScreen.prototype.apply_logical = function(data_dword, latch_dword)\n{\n    switch(this.planar_rotate_reg & 0x18)\n    {\n        case 0x08:\n            return data_dword & latch_dword;\n        case 0x10:\n            return data_dword | latch_dword;\n        case 0x18:\n            return data_dword ^ latch_dword;\n    }\n    return data_dword;\n};\n\n/**\n * Planar Write - Bitmask Unit\n * @param {number} data_dword\n * @param {number} bitmask_dword\n * @return {number}\n * @see {@link http://www.phatcode.net/res/224/files/html/ch25/25-01.html#Heading2}\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm#08}\n */\nVGAScreen.prototype.apply_bitmask = function(data_dword, bitmask_dword)\n{\n    var plane_dword = bitmask_dword & data_dword;\n    plane_dword |= ~bitmask_dword & this.latch_dword;\n    return plane_dword;\n};\n\nVGAScreen.prototype.text_mode_redraw = function()\n{\n    var addr = this.start_address << 1,\n        chr,\n        color;\n\n    for(var row = 0; row < this.max_rows; row++)\n    {\n        for(var col = 0; col < this.max_cols; col++)\n        {\n            chr = this.vga_memory[addr];\n            color = this.vga_memory[addr | 1];\n\n            this.bus.send(\"screen-put-char\", [row, col, chr,\n                this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n            addr += 2;\n        }\n    }\n};\n\nVGAScreen.prototype.vga_memory_write_text_mode = function(addr, value)\n{\n    var memory_start = (addr >> 1) - this.start_address,\n        row = memory_start / this.max_cols | 0,\n        col = memory_start % this.max_cols,\n        chr,\n        color;\n\n    // XXX: Should handle 16 bit write if possible\n    if(addr & 1)\n    {\n        color = value;\n        chr = this.vga_memory[addr & ~1];\n    }\n    else\n    {\n        chr = value;\n        color = this.vga_memory[addr | 1];\n    }\n\n    this.bus.send(\"screen-put-char\", [row, col, chr,\n            this.vga256_palette[color >> 4 & 0xF], this.vga256_palette[color & 0xF]]);\n\n    this.vga_memory[addr] = value;\n};\n\nVGAScreen.prototype.update_cursor = function()\n{\n    var row = (this.cursor_address - this.start_address) / this.max_cols | 0,\n        col = (this.cursor_address - this.start_address) % this.max_cols;\n\n    row = Math.min(this.max_rows - 1, row);\n\n    this.bus.send(\"screen-update-cursor\", [row, col]);\n};\n\nVGAScreen.prototype.svga_memory_read8 = function(addr)\n{\n    return this.svga_memory[addr & 0xFFFFFFF];\n};\n\nVGAScreen.prototype.svga_memory_read32 = function(addr)\n{\n    addr &= 0xFFFFFFF;\n\n    if(addr & 3)\n    {\n        return this.svga_memory[addr] | this.svga_memory[addr + 1] << 8 |\n               this.svga_memory[addr + 2] << 16 | this.svga_memory[addr + 3] << 24;\n    }\n    else\n    {\n        return this.svga_memory32[addr >> 2];\n    }\n};\n\nVGAScreen.prototype.svga_memory_write8 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n    this.svga_memory[addr] = value;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr > this.diff_addr_max ? addr : this.diff_addr_max;\n};\n\nVGAScreen.prototype.svga_memory_write32 = function(addr, value)\n{\n    addr &= 0xFFFFFFF;\n\n    this.diff_addr_min = addr < this.diff_addr_min ? addr : this.diff_addr_min;\n    this.diff_addr_max = addr + 3 > this.diff_addr_max ? addr + 3 : this.diff_addr_max;\n\n    this.svga_memory[addr] = value;\n    this.svga_memory[addr + 1] = value >> 8;\n    this.svga_memory[addr + 2] = value >> 16;\n    this.svga_memory[addr + 3] = value >> 24;\n};\n\nVGAScreen.prototype.complete_redraw = function()\n{\n    dbg_log(\"complete redraw\", LOG_VGA);\n\n    if(this.graphical_mode)\n    {\n        this.diff_addr_min = 0;\n\n        if(this.svga_enabled)\n        {\n            this.diff_addr_max = this.vga_memory_size;\n        }\n        else\n        {\n            this.diff_addr_max = VGA_PIXEL_BUFFER_SIZE;\n        }\n    }\n    else\n    {\n        this.text_mode_redraw();\n    }\n};\n\nVGAScreen.prototype.complete_replot = function()\n{\n    dbg_log(\"complete replot\", LOG_VGA);\n\n    if(!this.graphical_mode || this.svga_enabled)\n    {\n        return;\n    }\n\n    this.diff_plot_min = 0;\n    this.diff_plot_max = VGA_PIXEL_BUFFER_SIZE;\n\n    this.complete_redraw();\n};\n\nVGAScreen.prototype.partial_redraw = function(min, max)\n{\n    if(min < this.diff_addr_min) this.diff_addr_min = min;\n    if(max > this.diff_addr_max) this.diff_addr_max = max;\n};\n\nVGAScreen.prototype.partial_replot = function(min, max)\n{\n    if(min < this.diff_plot_min) this.diff_plot_min = min;\n    if(max > this.diff_plot_max) this.diff_plot_max = max;\n\n    this.partial_redraw(min, max);\n};\n\nVGAScreen.prototype.reset_diffs = function()\n{\n    this.diff_addr_min = this.vga_memory_size;\n    this.diff_addr_max = 0;\n    this.diff_plot_min = this.vga_memory_size;\n    this.diff_plot_max = 0;\n};\n\nVGAScreen.prototype.destroy = function()\n{\n\n};\n\nVGAScreen.prototype.vga_bytes_per_line = function()\n{\n    var bytes_per_line = this.offset_register << 2;\n    if(this.underline_location_register & 0x40) bytes_per_line <<= 1;\n    else if(this.crtc_mode & 0x40) bytes_per_line >>>= 1;\n    return bytes_per_line;\n};\n\nVGAScreen.prototype.vga_addr_shift_count = function()\n{\n    // Count in multiples of 0x40 for convenience\n    // Left shift 2 for word mode - 2 bytes per dot clock\n    var shift_count = 0x80;\n\n    // Left shift 3 for byte mode - 1 byte per dot clock\n    shift_count += ~this.underline_location_register & this.crtc_mode & 0x40;\n\n    // Left shift 1 for doubleword mode - 4 bytes per dot clock\n    shift_count -= this.underline_location_register & 0x40;\n\n    // But shift one less if PEL width mode - 2 dot clocks per pixel\n    shift_count -= this.attribute_mode & 0x40;\n\n    return shift_count >>> 6;\n};\n\nVGAScreen.prototype.vga_addr_to_pixel = function(addr)\n{\n    var shift_count = this.vga_addr_shift_count();\n\n    // Undo effects of substituted bits 13 and 14\n    // Assumptions:\n    //  - max_scan_line register is set to the values shown below\n    //  - Each scan line stays within the offset alignment\n    //  - No panning and no page flipping after drawing\n    if(~this.crtc_mode & 0x3)\n    {\n        var pixel_addr = addr - this.start_address;\n\n        // Remove substituted bits\n        pixel_addr &= this.crtc_mode << 13 | ~0x6000;\n\n        // Convert to 1 pixel per address\n        pixel_addr <<= shift_count;\n\n        // Decompose address\n        var row = pixel_addr / this.virtual_width | 0;\n        var col = pixel_addr % this.virtual_width;\n\n        switch(this.crtc_mode & 0x3)\n        {\n            case 0x2:\n                // Alternating rows using bit 13\n                // Assumes max scan line = 1\n                row = row << 1 | (addr >> 13 & 0x1);\n                break;\n            case 0x1:\n                // Alternating rows using bit 14\n                // Assumes max scan line = 3\n                row = row << 1 | (addr >> 14 & 0x1);\n                break;\n            case 0x0:\n                // Cycling through rows using bit 13 and 14\n                // Assumes max scan line = 3\n                row = row << 2 | (addr >> 13 & 0x3);\n                break;\n        }\n\n        // Reassemble address\n        return row * this.virtual_width + col + (this.start_address << shift_count);\n    }\n    else\n    {\n        // Convert to 1 pixel per address\n        return addr << shift_count;\n    }\n};\n\nVGAScreen.prototype.scan_line_to_screen_row = function(scan_line)\n{\n    // Double scanning. The clock to the row scan counter is halved\n    // so it is not affected by the memory address bit substitutions below\n    if(this.max_scan_line & 0x80)\n    {\n        scan_line >>>= 1;\n    }\n\n    // Maximum scan line, aka scan lines per character row\n    // This is the number of repeats - 1 for graphic modes\n    var repeat_factor = 1 + (this.max_scan_line & 0x1F);\n    scan_line = Math.ceil(scan_line / repeat_factor);\n\n    // Odd and Even Row Scan Counter\n    // Despite repeated address counter values, because bit 13 of the shifted\n    // address is substituted with bit 0 of the row scan counter, a different\n    // display buffer address is generated instead of repeated\n    // Assumes maximum scan line register is set to 2 or 4.\n    // Note: can't assert this as register values may not be fully programmed.\n    if(!(this.crtc_mode & 0x1))\n    {\n        scan_line <<= 1;\n    }\n\n    // Undo effects of substituted bit 14\n    // Assumes maximum scan line register is set to 2 or 4\n    // Note: can't assert this as register values may not be fully programmed.\n    // Other maximum scan line register values would result in weird addressing\n    // anyway\n    if(!(this.crtc_mode & 0x2))\n    {\n        scan_line <<= 1;\n    }\n\n    return scan_line;\n};\n\n/**\n * @param {number} cols_count\n * @param {number} rows_count\n */\nVGAScreen.prototype.set_size_text = function(cols_count, rows_count)\n{\n    this.max_cols = cols_count;\n    this.max_rows = rows_count;\n\n    this.bus.send(\"screen-set-size-text\", [cols_count, rows_count]);\n};\n\nVGAScreen.prototype.set_size_graphical = function(width, height, bpp, virtual_width, virtual_height)\n{\n    var needs_update = !this.stats.is_graphical ||\n        this.stats.bpp !== bpp ||\n        this.screen_width !== width ||\n        this.screen_height !== height ||\n        this.virtual_width !== virtual_width ||\n        this.virtual_height !== virtual_height;\n\n    if(needs_update)\n    {\n        this.screen_width = width;\n        this.screen_height = height;\n        this.virtual_width = virtual_width;\n        this.virtual_height = virtual_height;\n\n        this.stats.bpp = bpp;\n        this.stats.is_graphical = true;\n        this.stats.res_x = width;\n        this.stats.res_y = height;\n\n        this.bus.send(\"screen-set-size-graphical\", [width, height, virtual_width, virtual_height, bpp]);\n    }\n};\n\nVGAScreen.prototype.update_vga_size = function()\n{\n    if(this.svga_enabled)\n    {\n        return;\n    }\n\n    var horizontal_characters = Math.min(1 + this.horizontal_display_enable_end,\n        this.horizontal_blank_start);\n    var vertical_scans = Math.min(1 + this.vertical_display_enable_end,\n        this.vertical_blank_start);\n\n    if(!horizontal_characters || !vertical_scans)\n    {\n        // Don't update if width or height is zero.\n        // These happen when registers are not fully configured yet.\n        return;\n    }\n\n    if(this.graphical_mode)\n    {\n        var screen_width = horizontal_characters << 3;\n\n        // Offset is half the number of bytes/words/dwords (depending on clocking mode)\n        // of display memory that each logical line occupies.\n        // However, the number of pixels latched, regardless of addressing mode,\n        // should always 8 pixels per character clock (except for 8 bit PEL width, in which\n        // case 4 pixels).\n        var virtual_width = this.offset_register << 4;\n\n        // Pixel Width / PEL Width / Clock Select\n        if(this.attribute_mode & 0x40)\n        {\n            screen_width >>>= 1;\n            virtual_width >>>= 1;\n        }\n\n        var screen_height = this.scan_line_to_screen_row(vertical_scans);\n\n        // The virtual buffer height is however many rows of data that can fit.\n        // Previously drawn graphics outside of current memory address space can\n        // still be drawn by setting start_address. The address at\n        // VGA_HOST_MEMORY_SPACE_START[memory_space_select] is mapped to the first\n        // byte of the frame buffer. Verified on some hardware.\n        // Depended on by: Windows 98 start screen\n        var available_bytes = VGA_HOST_MEMORY_SPACE_SIZE[0];\n\n        var virtual_height = Math.ceil(available_bytes / this.vga_bytes_per_line());\n\n        this.set_size_graphical(screen_width, screen_height, 8,\n            virtual_width, virtual_height);\n\n        this.update_vertical_retrace();\n        this.update_layers();\n    }\n    else\n    {\n        if(this.max_scan_line & 0x80)\n        {\n            // Double scanning means that half of those scan lines\n            // are just repeats\n            vertical_scans >>>= 1;\n        }\n\n        var height = vertical_scans / (1 + (this.max_scan_line & 0x1F)) | 0;\n\n        if(horizontal_characters && height)\n        {\n            this.set_size_text(horizontal_characters, height);\n        }\n    }\n};\n\nVGAScreen.prototype.update_layers = function()\n{\n    if(!this.graphical_mode)\n    {\n        this.text_mode_redraw();\n    }\n\n    if(this.svga_enabled)\n    {\n        this.layers = [];\n        return;\n    }\n\n    if(!this.virtual_width || !this.screen_width)\n    {\n        // Avoid division by zero\n        return;\n    }\n\n    if(!this.palette_source || (this.clocking_mode & 0x20))\n    {\n        // Palette source and screen disable bits = draw nothing\n        // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\n        // and http://www.osdever.net/FreeVGA/vga/seqreg.htm#01\n        this.layers = [];\n        this.bus.send(\"screen-clear\");\n        return;\n    }\n\n    var start_addr = this.start_address_latched;\n\n    var pixel_panning = this.horizontal_panning;\n    if(this.attribute_mode & 0x40)\n    {\n        pixel_panning >>>= 1;\n    }\n\n    var byte_panning = this.preset_row_scan >> 5 & 0x3;\n    var pixel_addr_start = this.vga_addr_to_pixel(start_addr + byte_panning);\n\n    var start_buffer_row = pixel_addr_start / this.virtual_width | 0;\n    var start_buffer_col = pixel_addr_start % this.virtual_width + pixel_panning;\n\n    var split_screen_row = this.scan_line_to_screen_row(1 + this.line_compare);\n    split_screen_row = Math.min(split_screen_row, this.screen_height);\n\n    var split_buffer_height = this.screen_height - split_screen_row;\n\n    this.layers = [];\n\n    for(var x = -start_buffer_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\n    {\n        this.layers.push({\n            screen_x: x,\n            screen_y: 0,\n            buffer_x: 0,\n            buffer_y: start_buffer_row + y,\n            buffer_width: this.virtual_width,\n            buffer_height: split_screen_row,\n        });\n    }\n\n    var start_split_col = 0;\n    if(!(this.attribute_mode & 0x20))\n    {\n        // Pixel panning mode. Allow panning for the lower split screen\n        start_split_col = this.vga_addr_to_pixel(byte_panning) + pixel_panning;\n    }\n\n    for(var x = -start_split_col, y = 0; x < this.screen_width; x += this.virtual_width, y++)\n    {\n        this.layers.push({\n            screen_x: x,\n            screen_y: split_screen_row,\n            buffer_x: 0,\n            buffer_y: y,\n            buffer_width: this.virtual_width,\n            buffer_height: split_buffer_height,\n        });\n    }\n};\n\nVGAScreen.prototype.update_vertical_retrace = function()\n{\n    // Emulate behaviour during VSync/VRetrace\n    this.port_3DA_value |= 0x8;\n    if(this.start_address_latched !== this.start_address)\n    {\n        this.start_address_latched = this.start_address;\n        this.update_layers();\n    }\n};\n\nVGAScreen.prototype.update_cursor_scanline = function()\n{\n    this.bus.send(\"screen-update-cursor-scanline\", [this.cursor_scanline_start, this.cursor_scanline_end]);\n};\n\n/**\n * Attribute controller register / index write\n * @see {@link http://www.osdever.net/FreeVGA/vga/attrreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 89\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 48\n */\nVGAScreen.prototype.port3C0_write = function(value)\n{\n    if(this.attribute_controller_index === -1)\n    {\n        dbg_log(\"attribute controller index register: \" + h(value), LOG_VGA);\n        this.attribute_controller_index = value & 0x1F;\n        dbg_log(\"attribute actual index: \" + h(this.attribute_controller_index), LOG_VGA);\n\n        if(this.palette_source !== (value & 0x20))\n        {\n            // A method of blanking the screen.\n            // See http://www.phatcode.net/res/224/files/html/ch29/29-05.html#Heading6\n            this.palette_source = value & 0x20;\n            this.update_layers();\n        }\n    }\n    else\n    {\n        if(this.attribute_controller_index < 0x10)\n        {\n            dbg_log(\"internal palette: \" + h(this.attribute_controller_index) + \" -> \" + h(value), LOG_VGA);\n            this.dac_map[this.attribute_controller_index] = value;\n\n            if(!(this.attribute_mode & 0x40))\n            {\n                this.complete_redraw();\n            }\n        }\n        else\n        switch(this.attribute_controller_index)\n        {\n            case 0x10:\n                dbg_log(\"3C0 / attribute mode control: \" + h(value), LOG_VGA);\n                if(this.attribute_mode !== value)\n                {\n                    var previous_mode = this.attribute_mode;\n                    this.attribute_mode = value;\n\n                    var is_graphical = (value & 0x1) > 0;\n                    if(!this.svga_enabled && this.graphical_mode !== is_graphical)\n                    {\n                        this.graphical_mode = is_graphical;\n                        this.bus.send(\"screen-set-mode\", this.graphical_mode);\n                    }\n\n                    if((previous_mode ^ value) & 0x40)\n                    {\n                        // PEL width changed. Pixel Buffer now invalidated\n                        this.complete_replot();\n                    }\n\n                    this.update_vga_size();\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            case 0x12:\n                dbg_log(\"3C0 / color plane enable: \" + h(value), LOG_VGA);\n                if(this.color_plane_enable !== value)\n                {\n                    this.color_plane_enable = value;\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            case 0x13:\n                dbg_log(\"3C0 / horizontal panning: \" + h(value), LOG_VGA);\n                if(this.horizontal_panning !== value)\n                {\n                    this.horizontal_panning = value & 0xF;\n                    this.update_layers();\n                }\n                break;\n            case 0x14:\n                dbg_log(\"3C0 / color select: \" + h(value), LOG_VGA);\n                if(this.color_select !== value)\n                {\n                    this.color_select = value;\n\n                    // Data stored in image buffer are invalidated\n                    this.complete_redraw();\n                }\n                break;\n            default:\n                dbg_log(\"3C0 / attribute controller write \" + h(this.attribute_controller_index) + \": \" + h(value), LOG_VGA);\n        }\n\n        this.attribute_controller_index = -1;\n    }\n};\n\nVGAScreen.prototype.port3C0_read = function()\n{\n    dbg_log(\"3C0 read\", LOG_VGA);\n    var result = this.attribute_controller_index | this.palette_source;\n    return result;\n};\n\nVGAScreen.prototype.port3C0_read16 = function()\n{\n    dbg_log(\"3C0 read16\", LOG_VGA);\n    return this.port3C0_read() & 0xFF | this.port3C1_read() << 8 & 0xFF00;\n};\n\nVGAScreen.prototype.port3C1_read = function()\n{\n    if(this.attribute_controller_index < 0x10)\n    {\n        dbg_log(\"3C1 / internal palette read: \" + h(this.attribute_controller_index) +\n            \" -> \" + h(this.dac_map[this.attribute_controller_index]), LOG_VGA);\n        return this.dac_map[this.attribute_controller_index];\n    }\n\n    switch(this.attribute_controller_index)\n    {\n        case 0x10:\n            dbg_log(\"3C1 / attribute mode read: \" + h(this.attribute_mode), LOG_VGA);\n            return this.attribute_mode;\n        case 0x12:\n            dbg_log(\"3C1 / color plane enable read: \" + h(this.color_plane_enable), LOG_VGA);\n            return this.color_plane_enable;\n        case 0x13:\n            dbg_log(\"3C1 / horizontal panning read: \" + h(this.horizontal_panning), LOG_VGA);\n            return this.horizontal_panning;\n        case 0x14:\n            dbg_log(\"3C1 / color select read: \" + h(this.color_select), LOG_VGA);\n            return this.color_select;\n        default:\n            dbg_log(\"3C1 / attribute controller read \" + h(this.attribute_controller_index), LOG_VGA);\n    }\n    return -1;\n\n};\n\nVGAScreen.prototype.port3C2_write = function(value)\n{\n    dbg_log(\"3C2 / miscellaneous output register = \" + h(value), LOG_VGA);\n    this.miscellaneous_output_register = value;\n};\n\nVGAScreen.prototype.port3C4_write = function(value)\n{\n    this.sequencer_index = value;\n};\n\nVGAScreen.prototype.port3C4_read = function()\n{\n    return this.sequencer_index;\n};\n\n/**\n * Sequencer register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/seqreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 47\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 19\n */\nVGAScreen.prototype.port3C5_write = function(value)\n{\n    switch(this.sequencer_index)\n    {\n        case 0x01:\n            dbg_log(\"clocking mode: \" + h(value), LOG_VGA);\n            var previous_clocking_mode = this.clocking_mode;\n            this.clocking_mode = value;\n            if((previous_clocking_mode ^ value) & 0x20)\n            {\n                // Screen disable bit modified\n                this.update_layers();\n            }\n            break;\n        case 0x02:\n            dbg_log(\"plane write mask: \" + h(value), LOG_VGA);\n            this.plane_write_bm = value;\n            break;\n        case 0x04:\n            dbg_log(\"sequencer memory mode: \" + h(value), LOG_VGA);\n            this.sequencer_memory_mode = value;\n            break;\n        default:\n            dbg_log(\"3C5 / sequencer write \" + h(this.sequencer_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3C5_read = function()\n{\n    dbg_log(\"3C5 / sequencer read \" + h(this.sequencer_index), LOG_VGA);\n\n    switch(this.sequencer_index)\n    {\n        case 0x01:\n            return this.clocking_mode;\n        case 0x02:\n            return this.plane_write_bm;\n        case 0x04:\n            return this.sequencer_memory_mode;\n        case 0x06:\n            return 0x12;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3C7_write = function(index)\n{\n    // index for reading the DAC\n    dbg_log(\"3C7 write: \" + h(index), LOG_VGA);\n    this.dac_color_index_read = index * 3;\n    this.dac_state &= 0x0;\n};\n\nVGAScreen.prototype.port3C7_read = function()\n{\n    // prepared to accept reads or writes\n    return this.dac_state;\n};\n\nVGAScreen.prototype.port3C8_write = function(index)\n{\n    this.dac_color_index_write = index * 3;\n    this.dac_state |= 0x3;\n};\n\nVGAScreen.prototype.port3C8_read = function()\n{\n    return this.dac_color_index_write / 3 | 0;\n};\n\n/**\n * DAC color palette register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/colorreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 104\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 57\n */\nVGAScreen.prototype.port3C9_write = function(color_byte)\n{\n    var index = this.dac_color_index_write / 3 | 0,\n        offset = this.dac_color_index_write % 3,\n        color = this.vga256_palette[index];\n\n    color_byte = (color_byte & 0x3F) * 255 / 63 | 0;\n\n    if(offset === 0)\n    {\n        color = color & ~0xFF0000 | color_byte << 16;\n    }\n    else if(offset === 1)\n    {\n        color = color & ~0xFF00 | color_byte << 8;\n    }\n    else\n    {\n        color = color & ~0xFF | color_byte;\n        dbg_log(\"dac set color, index=\" + h(index) + \" value=\" + h(color), LOG_VGA);\n    }\n\n    if(this.vga256_palette[index] !== color)\n    {\n        this.vga256_palette[index] = color;\n        this.complete_redraw();\n    }\n    this.dac_color_index_write++;\n};\n\nVGAScreen.prototype.port3C9_read = function()\n{\n    dbg_log(\"3C9 read\", LOG_VGA);\n\n    var index = this.dac_color_index_read / 3 | 0;\n    var offset = this.dac_color_index_read % 3;\n    var color = this.vga256_palette[index];\n\n    this.dac_color_index_read++;\n    return (color >> (2 - offset) * 8 & 0xFF) / 255 * 63 | 0;\n};\n\nVGAScreen.prototype.port3CC_read = function()\n{\n    dbg_log(\"3CC read\", LOG_VGA);\n    return this.miscellaneous_output_register;\n};\n\nVGAScreen.prototype.port3CE_write = function(value)\n{\n    this.graphics_index = value;\n};\n\nVGAScreen.prototype.port3CE_read = function()\n{\n    return this.graphics_index;\n};\n\n/**\n * Graphics controller register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/graphreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 78\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 29\n */\nVGAScreen.prototype.port3CF_write = function(value)\n{\n    switch(this.graphics_index)\n    {\n        case 0:\n            this.planar_setreset = value;\n            dbg_log(\"plane set/reset: \" + h(value), LOG_VGA);\n            break;\n        case 1:\n            this.planar_setreset_enable = value;\n            dbg_log(\"plane set/reset enable: \" + h(value), LOG_VGA);\n            break;\n        case 2:\n            this.color_compare = value;\n            dbg_log(\"color compare: \" + h(value), LOG_VGA);\n            break;\n        case 3:\n            this.planar_rotate_reg = value;\n            dbg_log(\"plane rotate: \" + h(value), LOG_VGA);\n            break;\n        case 4:\n            this.plane_read = value;\n            dbg_log(\"plane read: \" + h(value), LOG_VGA);\n            break;\n        case 5:\n            var previous_planar_mode = this.planar_mode;\n            this.planar_mode = value;\n            dbg_log(\"planar mode: \" + h(value), LOG_VGA);\n            if((previous_planar_mode ^ value) & 0x60)\n            {\n                // Shift mode modified. Pixel buffer invalidated\n                this.complete_replot();\n            }\n            break;\n        case 6:\n            dbg_log(\"miscellaneous graphics register: \" + h(value), LOG_VGA);\n            if(this.miscellaneous_graphics_register !== value)\n            {\n                this.miscellaneous_graphics_register = value;\n                this.update_vga_size();\n            }\n            break;\n        case 7:\n            this.color_dont_care = value;\n            dbg_log(\"color don't care: \" + h(value), LOG_VGA);\n            break;\n        case 8:\n            this.planar_bitmap = value;\n            dbg_log(\"planar bitmap: \" + h(value), LOG_VGA);\n            break;\n        default:\n            dbg_log(\"3CF / graphics write \" + h(this.graphics_index) + \": \" + h(value), LOG_VGA);\n    }\n};\n\nVGAScreen.prototype.port3CF_read = function()\n{\n    dbg_log(\"3CF / graphics read \" + h(this.graphics_index), LOG_VGA);\n\n    switch(this.graphics_index)\n    {\n        case 0:\n            return this.planar_setreset;\n        case 1:\n            return this.planar_setreset_enable;\n        case 2:\n            return this.color_compare;\n        case 3:\n            return this.planar_rotate_reg;\n        case 4:\n            return this.plane_read;\n        case 5:\n            return this.planar_mode;\n        case 6:\n            return this.miscellaneous_graphics_register;\n        case 7:\n            return this.color_dont_care;\n        case 8:\n            return this.planar_bitmap;\n        default:\n    }\n    return 0;\n};\n\nVGAScreen.prototype.port3D4_write = function(register)\n{\n    dbg_log(\"3D4 / crtc index: \" + register, LOG_VGA);\n    this.index_crtc = register;\n};\n\nVGAScreen.prototype.port3D4_read = function()\n{\n    dbg_log(\"3D4 read / crtc index: \" + this.index_crtc, LOG_VGA);\n    return this.index_crtc;\n};\n\n/**\n * CRT controller register writes\n * @see {@link http://www.osdever.net/FreeVGA/vga/crtcreg.htm}\n * @see {@link http://www.mcamafia.de/pdf/ibm_vgaxga_trm2.pdf} page 55\n * @see {@link https://01.org/sites/default/files/documentation/intel-gfx-prm-osrc-hsw-display_0.pdf} page 63\n */\nVGAScreen.prototype.port3D5_write = function(value)\n{\n    switch(this.index_crtc)\n    {\n        case 0x1:\n            dbg_log(\"3D5 / hdisp enable end write: \" + h(value), LOG_VGA);\n            if(this.horizontal_display_enable_end !== value)\n            {\n                this.horizontal_display_enable_end = value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x2:\n            if(this.horizontal_blank_start !== value)\n            {\n                this.horizontal_blank_start = value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x7:\n            dbg_log(\"3D5 / overflow register write: \" + h(value), LOG_VGA);\n            var previous_vertical_display_enable_end = this.vertical_display_enable_end;\n            this.vertical_display_enable_end &= 0xFF;\n            this.vertical_display_enable_end |= (value << 3 & 0x200) | (value << 7 & 0x100);\n            if(previous_vertical_display_enable_end != this.vertical_display_enable_end)\n            {\n                this.update_vga_size();\n            }\n            this.line_compare = (this.line_compare & 0x2FF) | (value << 4 & 0x100);\n\n            var previous_vertical_blank_start = this.vertical_blank_start;\n            this.vertical_blank_start = (this.vertical_blank_start & 0x2FF) | (value << 5 & 0x100);\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\n            {\n                this.update_vga_size();\n            }\n            this.update_layers();\n            break;\n        case 0x8:\n            dbg_log(\"3D5 / preset row scan write: \" + h(value), LOG_VGA);\n            this.preset_row_scan = value;\n            this.update_layers();\n            break;\n        case 0x9:\n            dbg_log(\"3D5 / max scan line write: \" + h(value), LOG_VGA);\n            this.max_scan_line = value;\n            this.line_compare = (this.line_compare & 0x1FF) | (value << 3 & 0x200);\n\n            var previous_vertical_blank_start = this.vertical_blank_start;\n            this.vertical_blank_start = (this.vertical_blank_start & 0x1FF) | (value << 4 & 0x200);\n            if(previous_vertical_blank_start !== this.vertical_blank_start)\n            {\n                this.update_vga_size();\n            }\n\n            this.update_layers();\n            break;\n        case 0xA:\n            dbg_log(\"3D5 / cursor scanline start write: \" + h(value), LOG_VGA);\n            this.cursor_scanline_start = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xB:\n            dbg_log(\"3D5 / cursor scanline end write: \" + h(value), LOG_VGA);\n            this.cursor_scanline_end = value;\n            this.update_cursor_scanline();\n            break;\n        case 0xC:\n            if((this.start_address >> 8 & 0xFF) !== value)\n            {\n                this.start_address = this.start_address & 0xff | value << 8;\n                this.update_layers();\n                if(~this.crtc_mode &  0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // starting row and column, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            dbg_log(\"3D5 / start addr hi write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xD:\n            if((this.start_address & 0xFF) !== value)\n            {\n                this.start_address = this.start_address & 0xff00 | value;\n                this.update_layers();\n                if(~this.crtc_mode &  0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // starting row and column, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            dbg_log(\"3D5 / start addr lo write: \" + h(value) + \" -> \" + h(this.start_address, 4), LOG_VGA);\n            break;\n        case 0xE:\n            dbg_log(\"3D5 / cursor address hi write: \" + h(value), LOG_VGA);\n            this.cursor_address = this.cursor_address & 0xFF | value << 8;\n            this.update_cursor();\n            break;\n        case 0xF:\n            dbg_log(\"3D5 / cursor address lo write: \" + h(value), LOG_VGA);\n            this.cursor_address = this.cursor_address & 0xFF00 | value;\n            this.update_cursor();\n            break;\n        case 0x12:\n            dbg_log(\"3D5 / vdisp enable end write: \" + h(value), LOG_VGA);\n            if((this.vertical_display_enable_end & 0xFF) !== value)\n            {\n                this.vertical_display_enable_end = (this.vertical_display_enable_end & 0x300) | value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x13:\n            dbg_log(\"3D5 / offset register write: \" + h(value), LOG_VGA);\n            if(this.offset_register !== value)\n            {\n                this.offset_register = value;\n                this.update_vga_size();\n\n                if(~this.crtc_mode & 0x3)\n                {\n                    // Address substitution implementation depends on the\n                    // virtual width, so the pixel buffer is invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x14:\n            dbg_log(\"3D5 / underline location write: \" + h(value), LOG_VGA);\n            if(this.underline_location_register !== value)\n            {\n                var previous_underline = this.underline_location_register;\n\n                this.underline_location_register = value;\n                this.update_vga_size();\n\n                if((previous_underline ^ value) & 0x40)\n                {\n                    // Doubleword addressing changed. Pixel buffer invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x15:\n            dbg_log(\"3D5 / vertical blank start write: \" + h(value), LOG_VGA);\n            if((this.vertical_blank_start & 0xFF) !== value)\n            {\n                this.vertical_blank_start = (this.vertical_blank_start & 0x300) | value;\n                this.update_vga_size();\n            }\n            break;\n        case 0x17:\n            dbg_log(\"3D5 / crtc mode write: \" + h(value), LOG_VGA);\n            if(this.crtc_mode !== value)\n            {\n                var previous_mode = this.crtc_mode;\n\n                this.crtc_mode = value;\n                this.update_vga_size();\n\n                if((previous_mode ^ value) & 0x43)\n                {\n                    // Word/byte addressing changed or address substitution changed.\n                    // Pixel buffer invalidated.\n                    this.complete_replot();\n                }\n            }\n            break;\n        case 0x18:\n            dbg_log(\"3D5 / line compare write: \" + h(value), LOG_VGA);\n            this.line_compare = (this.line_compare & 0x300) | value;\n            this.update_layers();\n            break;\n        default:\n            if(this.index_crtc < this.crtc.length)\n            {\n                this.crtc[this.index_crtc] = value;\n            }\n            dbg_log(\"3D5 / CRTC write \" + h(this.index_crtc) + \": \" + h(value), LOG_VGA);\n    }\n\n};\n\nVGAScreen.prototype.port3D5_read = function()\n{\n    dbg_log(\"3D5 read \" + h(this.index_crtc), LOG_VGA);\n\n    switch(this.index_crtc)\n    {\n        case 0x1:\n            return this.horizontal_display_enable_end;\n        case 0x2:\n            return this.horizontal_blank_start;\n        case 0x7:\n            return (this.vertical_display_enable_end >> 7 & 0x2) |\n                (this.vertical_blank_start >> 5 & 0x8) |\n                (this.line_compare >> 4 & 0x10) |\n                (this.vertical_display_enable_end >> 3 & 0x40);\n        case 0x8:\n            return this.preset_row_scan;\n        case 0x9:\n            return this.max_scan_line;\n        case 0xA:\n            return this.cursor_scanline_start;\n        case 0xB:\n            return this.cursor_scanline_end;\n        case 0xC:\n            return this.start_address & 0xFF;\n        case 0xD:\n            return this.start_address >> 8;\n        case 0xE:\n            return this.cursor_address >> 8;\n        case 0xF:\n            return this.cursor_address & 0xFF;\n        case 0x12:\n            return this.vertical_display_enable_end & 0xFF;\n        case 0x13:\n            return this.offset_register;\n        case 0x14:\n            return this.underline_location_register;\n        case 0x15:\n            return this.vertical_blank_start & 0xFF;\n        case 0x17:\n            return this.crtc_mode;\n        case 0x18:\n            return this.line_compare & 0xFF;\n    }\n\n    if(this.index_crtc < this.crtc.length)\n    {\n        return this.crtc[this.index_crtc];\n    }\n    else\n    {\n        return 0;\n    }\n};\n\nVGAScreen.prototype.port3DA_read = function()\n{\n    dbg_log(\"3DA read - status 1 and clear attr index\", LOG_VGA);\n\n    var value = this.port_3DA_value;\n\n    // Status register, bit 3 set by update_vertical_retrace\n    // during screen-fill-buffer\n    if(!this.graphical_mode)\n    {\n        // But screen-fill-buffer may not get triggered in text mode\n        // so toggle it manually here\n        if(this.port_3DA_value & 1)\n        {\n            this.port_3DA_value ^= 8;\n        }\n        this.port_3DA_value ^= 1;\n    }\n    else\n    {\n        this.port_3DA_value ^= 1;\n        this.port_3DA_value &= 1;\n    }\n    this.attribute_controller_index = -1;\n    return value;\n};\n\nVGAScreen.prototype.svga_bytes_per_line = function()\n{\n    var bits = this.svga_bpp === 15 ? 16 : this.svga_bpp;\n\n    return this.svga_width * bits / 8;\n};\n\nVGAScreen.prototype.port1CE_write = function(value)\n{\n    this.dispi_index = value;\n};\n\nVGAScreen.prototype.port1CF_write = function(value)\n{\n    dbg_log(\"1CF / dispi write \" + h(this.dispi_index) + \": \" + h(value), LOG_VGA);\n\n    switch(this.dispi_index)\n    {\n        case 1:\n            this.svga_width = value;\n            if(this.svga_width > MAX_XRES)\n            {\n                dbg_log(\"svga_width reduced from \" + this.svga_width + \" to \" + MAX_XRES, LOG_VGA);\n                this.svga_width = MAX_XRES;\n            }\n            break;\n        case 2:\n            this.svga_height = value;\n            if(this.svga_height > MAX_YRES)\n            {\n                dbg_log(\"svga_height reduced from \" + this.svga_height + \" to \" + MAX_YRES, LOG_VGA);\n                this.svga_height = MAX_YRES;\n            }\n            break;\n        case 3:\n            this.svga_bpp = value;\n            break;\n        case 4:\n            // enable, options\n            this.svga_enabled = (value & 1) === 1;\n            this.dispi_enable_value = value;\n            break;\n        case 5:\n            this.svga_bank_offset = value << 16;\n            break;\n        case 9:\n            // y offset\n            this.svga_offset = value * this.svga_bytes_per_line();\n            dbg_log(\"SVGA offset: \" + h(this.svga_offset) + \" y=\" + h(value), LOG_VGA);\n            this.complete_redraw();\n            break;\n        default:\n    }\n\n    if(this.svga_enabled && (!this.svga_width || !this.svga_height))\n    {\n        dbg_log(\"SVGA: disabled because of invalid width/height: \" + this.svga_width + \"x\" + this.svga_height, LOG_VGA);\n        this.svga_enabled = false;\n    }\n\n    dbg_assert(this.svga_bpp !== 4, \"unimplemented svga bpp: 4\");\n    dbg_assert(this.svga_bpp !== 15, \"unimplemented svga bpp: 15\");\n    dbg_assert(this.svga_bpp === 4 || this.svga_bpp === 8 ||\n               this.svga_bpp === 15 || this.svga_bpp === 16 ||\n               this.svga_bpp === 24 || this.svga_bpp === 32,\n               \"unexpected svga bpp: \" + this.svga_bpp);\n\n    dbg_log(\"SVGA: enabled=\" + this.svga_enabled + \", \" + this.svga_width + \"x\" + this.svga_height + \"x\" + this.svga_bpp, LOG_VGA);\n\n    if(this.svga_enabled && this.dispi_index === 4)\n    {\n        this.set_size_graphical(this.svga_width, this.svga_height, this.svga_bpp, this.svga_width, this.svga_height);\n        this.bus.send(\"screen-set-mode\", true);\n        this.graphical_mode = true;\n        this.graphical_mode_is_linear = true;\n    }\n\n    if(!this.svga_enabled)\n    {\n        this.svga_bank_offset = 0;\n    }\n\n    this.update_layers();\n};\n\nVGAScreen.prototype.port1CF_read = function()\n{\n    dbg_log(\"1CF / dispi read \" + h(this.dispi_index), LOG_VGA);\n    return this.svga_register_read(this.dispi_index);\n};\n\nVGAScreen.prototype.svga_register_read = function(n)\n{\n    switch(n)\n    {\n        case 0:\n            // id\n            return 0xB0C0;\n        case 1:\n            return this.dispi_enable_value & 2 ? MAX_XRES : this.svga_width;\n        case 2:\n            return this.dispi_enable_value & 2 ? MAX_YRES : this.svga_height;\n        case 3:\n            return this.dispi_enable_value & 2 ? MAX_BPP : this.svga_bpp;\n        case 4:\n            return this.dispi_enable_value;\n        case 5:\n            return this.svga_bank_offset >>> 16;\n        case 6:\n            // virtual width\n            if(this.screen_width)\n            {\n                return this.screen_width;\n            }\n            else\n            {\n                return 1; // seabios/windows98 divide exception\n            }\n            break;\n\n        case 8:\n            // x offset\n            return 0;\n        case 0x0A:\n            // memory size in 64 kilobyte banks\n            return this.vga_memory_size / VGA_BANK_SIZE | 0;\n    }\n\n    return 0xFF;\n};\n\n/**\n * Transfers graphics from VGA Planes to the Pixel Buffer\n * VGA Planes represent data stored on actual hardware.\n * Pixel Buffer caches the 4-bit or 8-bit color indices for each pixel.\n */\nVGAScreen.prototype.vga_replot = function()\n{\n    // Round to multiple of 8 towards extreme\n    var start = this.diff_plot_min & ~0xF;\n    var end = Math.min((this.diff_plot_max | 0xF), VGA_PIXEL_BUFFER_SIZE - 1);\n\n    var addr_shift = this.vga_addr_shift_count();\n    var addr_substitution = ~this.crtc_mode & 0x3;\n\n    var shift_mode = this.planar_mode & 0x60\n    var pel_width = this.attribute_mode & 0x40;\n\n    for(var pixel_addr = start; pixel_addr <= end;)\n    {\n        var addr = pixel_addr >>> addr_shift;\n        if(addr_substitution)\n        {\n            var row = pixel_addr / this.virtual_width | 0;\n            var col = pixel_addr - this.virtual_width * row;\n\n            switch(addr_substitution)\n            {\n                case 0x1:\n                    // Alternating rows using bit 13\n                    // Assumes max scan line = 1\n                    addr = (row & 0x1) << 13;\n                    row >>>= 1;\n                    break;\n                case 0x2:\n                    // Alternating rows using bit 14\n                    // Assumes max scan line = 3\n                    addr = (row & 0x1) << 14;\n                    row >>>= 1;\n                    break;\n                case 0x3:\n                    // Cycling through rows using bit 13 and 14\n                    // Assumes max scan line = 3\n                    addr = (row & 0x3) << 13;\n                    row >>>= 2;\n                    break;\n            }\n\n            addr |= (row * this.virtual_width + col >>> addr_shift) + this.start_address;\n        }\n\n        var byte0 = this.plane0[addr];\n        var byte1 = this.plane1[addr];\n        var byte2 = this.plane2[addr];\n        var byte3 = this.plane3[addr];\n\n        var shift_loads = new Uint8Array(8);\n        switch(shift_mode)\n        {\n            // Planar Shift Mode\n            // See http://www.osdever.net/FreeVGA/vga/vgaseq.htm\n            case 0x00:\n                // Shift these, so that the bits for the color are in\n                // the correct position in the for loop\n                byte0 <<= 0;\n                byte1 <<= 1;\n                byte2 <<= 2;\n                byte3 <<= 3;\n\n                for(var i = 7; i >= 0; i--)\n                {\n                    shift_loads[7 - i] =\n                            byte0 >> i & 1 |\n                            byte1 >> i & 2 |\n                            byte2 >> i & 4 |\n                            byte3 >> i & 8;\n                }\n                break;\n\n            // Packed Shift Mode, aka Interleaved Shift Mode\n            // Video Modes 4h and 5h\n            case 0x20:\n                shift_loads[0] = (byte0 >> 6 & 0x3) | (byte2 >> 4 & 0xC);\n                shift_loads[1] = (byte0 >> 4 & 0x3) | (byte2 >> 2 & 0xC);\n                shift_loads[2] = (byte0 >> 2 & 0x3) | (byte2 >> 0 & 0xC);\n                shift_loads[3] = (byte0 >> 0 & 0x3) | (byte2 << 2 & 0xC);\n\n                shift_loads[4] = (byte1 >> 6 & 0x3) | (byte3 >> 4 & 0xC);\n                shift_loads[5] = (byte1 >> 4 & 0x3) | (byte3 >> 2 & 0xC);\n                shift_loads[6] = (byte1 >> 2 & 0x3) | (byte3 >> 0 & 0xC);\n                shift_loads[7] = (byte1 >> 0 & 0x3) | (byte3 << 2 & 0xC);\n                break;\n\n            // 256-Color Shift Mode\n            // Video Modes 13h and unchained 256 color\n            case 0x40:\n            case 0x60:\n                shift_loads[0] = byte0 >> 4 & 0xF;\n                shift_loads[1] = byte0 >> 0 & 0xF;\n                shift_loads[2] = byte1 >> 4 & 0xF;\n                shift_loads[3] = byte1 >> 0 & 0xF;\n                shift_loads[4] = byte2 >> 4 & 0xF;\n                shift_loads[5] = byte2 >> 0 & 0xF;\n                shift_loads[6] = byte3 >> 4 & 0xF;\n                shift_loads[7] = byte3 >> 0 & 0xF;\n                break;\n        }\n\n        if(pel_width)\n        {\n            // Assemble from two sets of 4 bits.\n            for(var i = 0, j = 0; i < 4; i++, pixel_addr++, j += 2)\n            {\n                this.pixel_buffer[pixel_addr] = (shift_loads[j] << 4) | shift_loads[j + 1];\n            }\n        }\n        else\n        {\n            for(var i = 0; i < 8; i++, pixel_addr++)\n            {\n                this.pixel_buffer[pixel_addr] = shift_loads[i];\n            }\n        }\n    }\n};\n\n/**\n * Transfers graphics from Pixel Buffer to Destination Image Buffer.\n * The 4-bit/8-bit color indices in the Pixel Buffer are passed through\n * the internal palette (dac_map) and the DAC palette (vga256_palette) to\n * obtain the final 32 bit color that the Canvas API uses.\n */\nVGAScreen.prototype.vga_redraw = function()\n{\n    var start = this.diff_addr_min;\n    var end = Math.min(this.diff_addr_max, VGA_PIXEL_BUFFER_SIZE - 1);\n    var buffer = this.dest_buffer;\n\n    // Closure compiler\n    if(!buffer) return;\n\n    var mask = 0xFF;\n    var colorset = 0x00;\n    if(this.attribute_mode & 0x80)\n    {\n        // Palette bits 5/4 select\n        mask &= 0xCF;\n        colorset |= this.color_select << 4 & 0x30;\n    }\n\n    if(this.attribute_mode & 0x40)\n    {\n        // 8 bit mode\n\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\n        {\n            var color256 = (this.pixel_buffer[pixel_addr] & mask) | colorset;\n            var color = this.vga256_palette[color256];\n\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n        }\n    }\n    else\n    {\n        // 4 bit mode\n\n        // Palette bits 7/6 select\n        mask &= 0x3F;\n        colorset |= this.color_select << 4 & 0xC0;\n\n        for(var pixel_addr = start; pixel_addr <= end; pixel_addr++)\n        {\n            var color16 = this.pixel_buffer[pixel_addr] & this.color_plane_enable;\n            var color256 = (this.dac_map[color16] & mask) | colorset;\n            var color = this.vga256_palette[color256];\n\n            buffer[pixel_addr] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n        }\n    }\n};\n\nVGAScreen.prototype.screen_fill_buffer = function()\n{\n    if(!this.graphical_mode)\n    {\n        // text mode\n        // Update retrace behaviour anyway - programs waiting for signal before\n        // changing to graphical mode\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(!this.dest_buffer)\n    {\n        dbg_log(\"Cannot fill buffer: No destination buffer\", LOG_VGA);\n        // Update retrace behaviour anyway\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(this.diff_addr_max < this.diff_addr_min && this.diff_plot_max < this.diff_plot_min)\n    {\n        // No pixels to update\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\n        this.update_vertical_retrace();\n        return;\n    }\n\n    if(this.svga_enabled)\n    {\n        var bpp = this.svga_bpp;\n\n        var buffer = this.dest_buffer;\n\n        var start = this.diff_addr_min;\n        var end = this.diff_addr_max;\n\n        switch(bpp)\n        {\n            case 32:\n                var start_pixel = start >> 2;\n                var end_pixel = (end >> 2) + 1;\n\n                for(var i = start_pixel; i < end_pixel; i++)\n                {\n                    var dword = this.svga_memory32[i];\n\n                    buffer[i] = dword << 16 | dword >> 16 & 0xFF | dword & 0xFF00 | 0xFF000000;\n                }\n                break;\n\n            case 24:\n                var start_pixel = start / 3 | 0;\n                var end_pixel = (end / 3 | 0) + 1;\n                var addr = start_pixel * 3;\n\n                for(var i = start_pixel; addr < end; i++)\n                {\n                    var red = this.svga_memory[addr++];\n                    var green = this.svga_memory[addr++];\n                    var blue = this.svga_memory[addr++];\n\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n                }\n                break;\n\n            case 16:\n                var start_pixel = start >> 1;\n                var end_pixel = (end >> 1) + 1;\n\n                for(var i = start_pixel; i < end_pixel; i++)\n                {\n                    var word = this.svga_memory16[i];\n\n                    var blue = (word >> 11) * 0xFF / 0x1F | 0;\n                    var green = (word >> 5 & 0x3F) * 0xFF / 0x3F | 0;\n                    var red = (word & 0x1F) * 0xFF / 0x1F | 0;\n\n                    buffer[i] = red << 16 | green << 8 | blue | 0xFF000000;\n                }\n                break;\n\n            case 8:\n                var start_pixel = start;\n                var end_pixel = end + 1;\n\n                for(var i = start; i <= end; i++)\n                {\n                    var color = this.vga256_palette[this.svga_memory[i]];\n                    buffer[i] = color & 0xFF00 | color << 16 | color >> 16 | 0xFF000000;\n                }\n                break;\n\n            default:\n                dbg_assert(false, \"Unsupported BPP: \" + bpp);\n        }\n\n        var min_y = start_pixel / this.svga_width | 0;\n        var max_y = end_pixel / this.svga_width | 0;\n\n        this.bus.send(\"screen-fill-buffer-end\", [{\n            screen_x: 0, screen_y: min_y,\n            buffer_x: 0, buffer_y: min_y,\n            buffer_width: this.svga_width,\n            buffer_height: max_y - min_y + 1,\n        }]);\n    }\n    else\n    {\n        this.vga_replot();\n        this.vga_redraw();\n        this.bus.send(\"screen-fill-buffer-end\", this.layers);\n    }\n\n    this.reset_diffs();\n    this.update_vertical_retrace();\n};\n","\"use strict\";\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction PS2(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @type {boolean} */\n    this.enable_mouse_stream = false;\n\n    /** @type {boolean} */\n    this.use_mouse = false;\n\n    /** @type {boolean} */\n    this.have_mouse = true;\n\n    /** @type {number} */\n    this.mouse_delta_x = 0;\n    /** @type {number} */\n    this.mouse_delta_y = 0;\n    /** @type {number} */\n    this.mouse_clicks = 0;\n\n    /** @type {boolean} */\n    this.have_keyboard = true;\n\n    /** @type {boolean} */\n    this.enable_keyboard_stream = false;\n\n    /** @type {boolean} */\n    this.next_is_mouse_command = false;\n\n    /** @type {boolean} */\n    this.next_read_sample = false;\n\n    /** @type {boolean} */\n    this.next_read_led = false;\n\n    /** @type {boolean} */\n    this.next_handle_scan_code_set = false;\n\n    /** @type {boolean} */\n    this.next_read_rate = false;\n\n    /** @type {boolean} */\n    this.next_read_resolution = false;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.kbd_buffer = new ByteQueue(1024);\n\n    this.last_port60_byte = 0;\n\n    /** @type {number} */\n    this.sample_rate = 100;\n\n    /** @type {number} */\n    this.resolution = 4;\n\n    /** @type {boolean} */\n    this.scaling2 = false;\n\n    /** @type {number} */\n    this.last_mouse_packet = -1;\n\n    /**\n     * @type {ByteQueue}\n     */\n    this.mouse_buffer = new ByteQueue(1024);\n\n    /**\n     * @type {boolean}\n     * Also known as DBBOUT OBF - Output Buffer Full flag\n     */\n    this.next_byte_is_ready = false;\n\n    /** @type {boolean} */\n    this.next_byte_is_aux = false;\n\n    this.bus.register(\"keyboard-code\", function(code)\n    {\n        this.kbd_send_code(code);\n    }, this);\n\n    this.bus.register(\"mouse-click\", function(data)\n    {\n        this.mouse_send_click(data[0], data[1], data[2]);\n    }, this);\n\n    this.bus.register(\"mouse-delta\", function(data)\n    {\n        this.mouse_send_delta(data[0], data[1]);\n    }, this);\n\n    this.bus.register(\"mouse-wheel\", function(data)\n    {\n        // TODO: Mouse Wheel\n        // http://www.computer-engineering.org/ps2mouse/\n    }, this);\n\n    this.command_register = 1 | 4;\n    this.read_output_register = false;\n    this.read_command_register = false;\n\n    cpu.io.register_read(0x60, this, this.port60_read);\n    cpu.io.register_read(0x64, this, this.port64_read);\n\n    cpu.io.register_write(0x60, this, this.port60_write);\n    cpu.io.register_write(0x64, this, this.port64_write);\n}\n\nPS2.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.enable_mouse_stream;\n    state[1] = this.use_mouse;\n    state[2] = this.have_mouse;\n    state[3] = this.mouse_delta_x;\n    state[4] = this.mouse_delta_y;\n    state[5] = this.mouse_clicks;\n    state[6] = this.have_keyboard;\n    state[7] = this.enable_keyboard_stream;\n    state[8] = this.next_is_mouse_command;\n    state[9] = this.next_read_sample;\n    state[10] = this.next_read_led;\n    state[11] = this.next_handle_scan_code_set;\n    state[12] = this.next_read_rate;\n    state[13] = this.next_read_resolution;\n    //state[14] = this.kbd_buffer;\n    state[15] = this.last_port60_byte;\n    state[16] = this.sample_rate;\n    state[17] = this.resolution;\n    state[18] = this.scaling2;\n    //state[19] = this.mouse_buffer;\n    state[20] = this.command_register;\n    state[21] = this.read_output_register;\n    state[22] = this.read_command_register;\n\n    return state;\n};\n\nPS2.prototype.set_state = function(state)\n{\n    this.enable_mouse_stream = state[0];\n    this.use_mouse = state[1];\n    this.have_mouse = state[2];\n    this.mouse_delta_x = state[3];\n    this.mouse_delta_y = state[4];\n    this.mouse_clicks = state[5];\n    this.have_keyboard = state[6];\n    this.enable_keyboard_stream = state[7];\n    this.next_is_mouse_command = state[8];\n    this.next_read_sample = state[9];\n    this.next_read_led = state[10];\n    this.next_handle_scan_code_set = state[11];\n    this.next_read_rate = state[12];\n    this.next_read_resolution = state[13];\n    //this.kbd_buffer = state[14];\n    this.last_port60_byte = state[15];\n    this.sample_rate = state[16];\n    this.resolution = state[17];\n    this.scaling2 = state[18];\n    //this.mouse_buffer = state[19];\n    this.command_register = state[20];\n    this.read_output_register = state[21];\n    this.read_command_register = state[22];\n\n    this.next_byte_is_ready = false;\n    this.next_byte_is_aux = false;\n    this.kbd_buffer.clear();\n    this.mouse_buffer.clear();\n\n    this.bus.send(\"mouse-enable\", this.use_mouse);\n};\n\nPS2.prototype.raise_irq = function()\n{\n    if(this.next_byte_is_ready)\n    {\n        // Wait until previous byte is read\n        // http://halicery.com/Hardware/8042/8042_1503033_TXT.htm\n        return;\n    }\n\n    // Kbd has priority over aux\n    if(this.kbd_buffer.length)\n    {\n        this.kbd_irq();\n    }\n    else if(this.mouse_buffer.length)\n    {\n        this.mouse_irq();\n    }\n};\n\nPS2.prototype.mouse_irq = function()\n{\n    this.next_byte_is_ready = true;\n    this.next_byte_is_aux = true;\n\n    if(this.command_register & 2)\n    {\n        dbg_log(\"Mouse irq\", LOG_PS2);\n\n        // Pulse the irq line\n        // Note: can't lower immediately after rising, so lower before rising\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\n        this.cpu.device_lower_irq(12);\n        this.cpu.device_raise_irq(12);\n    }\n};\n\nPS2.prototype.kbd_irq = function()\n{\n    this.next_byte_is_ready = true;\n    this.next_byte_is_aux = false;\n\n    if(this.command_register & 1)\n    {\n        dbg_log(\"Keyboard irq\", LOG_PS2);\n\n        // Pulse the irq line\n        // Note: can't lower immediately after rising, so lower before rising\n        // http://www.os2museum.com/wp/ibm-ps2-model-50-keyboard-controller/\n        this.cpu.device_lower_irq(1);\n        this.cpu.device_raise_irq(1);\n    }\n};\n\nPS2.prototype.kbd_send_code = function(code)\n{\n    if(this.enable_keyboard_stream)\n    {\n        dbg_log(\"adding kbd code: \" + h(code), LOG_PS2);\n        this.kbd_buffer.push(code);\n        this.raise_irq();\n    }\n};\n\nPS2.prototype.mouse_send_delta = function(delta_x, delta_y)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    // note: delta_x or delta_y can be floating point numbers\n\n    var factor = this.resolution * this.sample_rate / 80;\n\n    this.mouse_delta_x += delta_x * factor;\n    this.mouse_delta_y += delta_y * factor;\n\n    if(this.enable_mouse_stream)\n    {\n        var change_x = this.mouse_delta_x | 0,\n            change_y = this.mouse_delta_y | 0;\n\n        if(change_x || change_y)\n        {\n            var now = Date.now();\n\n            //if(now - this.last_mouse_packet < 1000 / this.sample_rate)\n            //{\n            //    // TODO: set timeout\n            //    return;\n            //}\n\n            this.mouse_delta_x -= change_x;\n            this.mouse_delta_y -= change_y;\n\n            this.send_mouse_packet(change_x, change_y);\n        }\n    }\n};\n\nPS2.prototype.mouse_send_click = function(left, middle, right)\n{\n    if(!this.have_mouse || !this.use_mouse)\n    {\n        return;\n    }\n\n    this.mouse_clicks = left | right << 1 | middle << 2;\n\n    if(this.enable_mouse_stream)\n    {\n        this.send_mouse_packet(0, 0);\n    }\n};\n\nPS2.prototype.send_mouse_packet = function(dx, dy)\n{\n    var info_byte =\n            (dy < 0) << 5 |\n            (dx < 0) << 4 |\n            1 << 3 |\n            this.mouse_clicks,\n        delta_x = dx,\n        delta_y = dy;\n\n    this.last_mouse_packet = Date.now();\n\n    //if(this.scaling2)\n    //{\n    //    // only in automatic packets, not 0xEB requests\n    //    delta_x = this.apply_scaling2(delta_x);\n    //    delta_y = this.apply_scaling2(delta_y);\n    //}\n\n    this.mouse_buffer.push(info_byte);\n    this.mouse_buffer.push(delta_x);\n    this.mouse_buffer.push(delta_y);\n\n    dbg_log(\"adding mouse packets: \" + [info_byte, dx, dy], LOG_PS2);\n\n    this.raise_irq();\n};\n\nPS2.prototype.apply_scaling2 = function(n)\n{\n    // http://www.computer-engineering.org/ps2mouse/#Inputs.2C_Resolution.2C_and_Scaling\n    var abs = Math.abs(n),\n        sign = n >> 31;\n\n    switch(abs)\n    {\n        case 0:\n        case 1:\n        case 3:\n            return n;\n        case 2:\n            return sign;\n        case 4:\n            return 6 * sign;\n        case 5:\n            return 9 * sign;\n        default:\n            return n << 1;\n    }\n};\n\nPS2.prototype.port60_read = function()\n{\n    //dbg_log(\"port 60 read: \" + (buffer[0] || \"(none)\"));\n\n    this.next_byte_is_ready = false;\n\n    if(!this.kbd_buffer.length && !this.mouse_buffer.length)\n    {\n        // should not happen\n        dbg_log(\"Port 60 read: Empty\", LOG_PS2);\n        return this.last_port60_byte;\n    }\n\n    if(this.next_byte_is_aux)\n    {\n        this.cpu.device_lower_irq(12);\n        this.last_port60_byte = this.mouse_buffer.shift();\n        dbg_log(\"Port 60 read (mouse): \" + h(this.last_port60_byte), LOG_PS2);\n    }\n    else\n    {\n        this.cpu.device_lower_irq(1);\n        this.last_port60_byte = this.kbd_buffer.shift();\n        dbg_log(\"Port 60 read (kbd)  : \" + h(this.last_port60_byte), LOG_PS2);\n    }\n\n    if(this.kbd_buffer.length || this.mouse_buffer.length)\n    {\n        this.raise_irq();\n    }\n\n    return this.last_port60_byte;\n};\n\nPS2.prototype.port64_read = function()\n{\n    // status port\n\n    var status_byte = 0x10;\n\n    if(this.next_byte_is_ready)\n    {\n        status_byte |= 0x1;\n    }\n    if(this.next_byte_is_aux)\n    {\n        status_byte |= 0x20;\n    }\n\n    dbg_log(\"port 64 read: \" + h(status_byte), LOG_PS2);\n\n    return status_byte;\n};\n\nPS2.prototype.port60_write = function(write_byte)\n{\n    dbg_log(\"port 60 write: \" + h(write_byte), LOG_PS2);\n\n    if(this.read_command_register)\n    {\n        this.command_register = write_byte;\n        this.read_command_register = false;\n\n        // not sure, causes \"spurious ack\" in Linux\n        //this.kbd_buffer.push(0xFA);\n        //this.kbd_irq();\n\n        dbg_log(\"Keyboard command register = \" + h(this.command_register), LOG_PS2);\n    }\n    else if(this.read_output_register)\n    {\n        this.read_output_register = false;\n\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(write_byte);\n        this.mouse_irq();\n    }\n    else if(this.next_read_sample)\n    {\n        this.next_read_sample = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        this.sample_rate = write_byte;\n        dbg_log(\"mouse sample rate: \" + h(write_byte), LOG_PS2);\n        if(!this.sample_rate)\n        {\n            dbg_log(\"invalid sample rate, reset to 100\", LOG_PS2);\n            this.sample_rate = 100;\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_resolution)\n    {\n        this.next_read_resolution = false;\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        if(write_byte > 3)\n        {\n            this.resolution = 4;\n            dbg_log(\"invalid resolution, resetting to 4\", LOG_PS2);\n        }\n        else\n        {\n            this.resolution = 1 << write_byte;\n            dbg_log(\"resolution: \" + this.resolution, LOG_PS2);\n        }\n        this.mouse_irq();\n    }\n    else if(this.next_read_led)\n    {\n        // nope\n        this.next_read_led = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_handle_scan_code_set)\n    {\n        this.next_handle_scan_code_set = false;\n\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n\n        if(write_byte)\n        {\n            // set scan code set\n        }\n        else\n        {\n            this.kbd_buffer.push(2);\n        }\n    }\n    else if(this.next_read_rate)\n    {\n        // nope\n        this.next_read_rate = false;\n        this.kbd_buffer.push(0xFA);\n        this.kbd_irq();\n    }\n    else if(this.next_is_mouse_command)\n    {\n        this.next_is_mouse_command = false;\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        if(!this.have_mouse)\n        {\n            return;\n        }\n\n        // send ack\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.mouse_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xE6:\n            // set scaling to 1:1\n            dbg_log(\"Scaling 1:1\", LOG_PS2);\n            this.scaling2 = false;\n            break;\n        case 0xE7:\n            // set scaling to 2:1\n            dbg_log(\"Scaling 2:1\", LOG_PS2);\n            this.scaling2 = true;\n            break;\n        case 0xE8:\n            // set mouse resolution\n            this.next_read_resolution = true;\n            break;\n        case 0xE9:\n            // status request - send one packet\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xEB:\n            // request single packet\n            dbg_log(\"unimplemented request single packet\", LOG_PS2);\n            this.send_mouse_packet(0, 0);\n            break;\n        case 0xF2:\n            //  MouseID Byte\n            this.mouse_buffer.push(0);\n            this.mouse_buffer.push(0);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF3:\n            // sample rate\n            this.next_read_sample = true;\n            break;\n        case 0xF4:\n            // enable streaming\n            this.enable_mouse_stream = true;\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n        case 0xF5:\n            // disable streaming\n            this.enable_mouse_stream = false;\n            break;\n        case 0xF6:\n            // set defaults\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n            break;\n        case 0xFF:\n            // reset, send completion code\n            dbg_log(\"Mouse reset\", LOG_PS2);\n            this.mouse_buffer.push(0xAA);\n            this.mouse_buffer.push(0);\n\n            this.use_mouse = true;\n            this.bus.send(\"mouse-enable\", true);\n\n            this.enable_mouse_stream = false;\n            this.sample_rate = 100;\n            this.scaling2 = false;\n            this.resolution = 4;\n\n            this.mouse_clicks = this.mouse_delta_x = this.mouse_delta_y = 0;\n            break;\n\n        default:\n            dbg_log(\"Unimplemented mouse command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.mouse_irq();\n    }\n    else\n    {\n        dbg_log(\"Port 60 data register write: \" + h(write_byte), LOG_PS2);\n\n        // send ack\n        this.mouse_buffer.clear();\n        this.kbd_buffer.clear();\n        this.kbd_buffer.push(0xFA);\n\n        switch(write_byte)\n        {\n        case 0xED:\n            this.next_read_led = true;\n            break;\n        case 0xF0:\n            // get/set scan code set\n            this.next_handle_scan_code_set = true;\n            break;\n        case 0xF2:\n            // identify\n            this.kbd_buffer.push(0xAB);\n            this.kbd_buffer.push(83);\n            break;\n        case 0xF3:\n            //  Set typematic rate and delay\n            this.next_read_rate = true;\n            break;\n        case 0xF4:\n            // enable scanning\n            dbg_log(\"kbd enable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = true;\n            break;\n        case 0xF5:\n            // disable scanning\n            dbg_log(\"kbd disable scanning\", LOG_PS2);\n            this.enable_keyboard_stream = false;\n            break;\n        case 0xF6:\n            // reset defaults\n            //this.enable_keyboard_stream = false;\n            break;\n        case 0xFF:\n            this.kbd_buffer.clear();\n            this.kbd_buffer.push(0xFA);\n            this.kbd_buffer.push(0xAA);\n            this.kbd_buffer.push(0);\n            break;\n        default:\n            dbg_log(\"Unimplemented keyboard command: \" + h(write_byte), LOG_PS2);\n        }\n\n        this.kbd_irq();\n    }\n};\n\nPS2.prototype.port64_write = function(write_byte)\n{\n    dbg_log(\"port 64 write: \" + h(write_byte), LOG_PS2);\n\n    switch(write_byte)\n    {\n    case 0x20:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(this.command_register);\n        this.kbd_irq();\n        break;\n    case 0x60:\n        this.read_command_register = true;\n        break;\n    case 0xD3:\n        this.read_output_register = true;\n        break;\n    case 0xD4:\n        this.next_is_mouse_command = true;\n        break;\n    case 0xA7:\n        // Disable second port\n        dbg_log(\"Disable second port\", LOG_PS2);\n        this.command_register |= 0x20;\n        break;\n    case 0xA8:\n        // Enable second port\n        dbg_log(\"Enable second port\", LOG_PS2);\n        this.command_register &= ~0x20;\n        break;\n    case 0xA9:\n        // test second ps/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        this.kbd_irq();\n        break;\n    case 0xAA:\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0x55);\n        this.kbd_irq();\n        break;\n    case 0xAB:\n        // Test first PS/2 port\n        this.kbd_buffer.clear();\n        this.mouse_buffer.clear();\n        this.kbd_buffer.push(0);\n        this.kbd_irq();\n        break;\n    case 0xAD:\n        // Disable Keyboard\n        dbg_log(\"Disable Keyboard\", LOG_PS2);\n        this.command_register |= 0x10;\n        break;\n    case 0xAE:\n        // Enable Keyboard\n        dbg_log(\"Enable Keyboard\", LOG_PS2);\n        this.command_register &= ~0x10;\n        break;\n    case 0xFE:\n        dbg_log(\"CPU reboot via PS2\");\n        this.cpu.reboot_internal();\n        break;\n    default:\n        dbg_log(\"port 64: Unimplemented command byte: \" + h(write_byte), LOG_PS2);\n    }\n};\n","\"use strict\";\n\n/** @const */\nvar PIC_LOG_VERBOSE = false;\n\n/**\n * Programmable Interrupt Controller\n * http://stanislavs.org/helppc/8259.html\n *\n * @constructor\n * @param {CPU} cpu\n * @param {PIC=} master\n */\nfunction PIC(cpu, master)\n{\n    /**\n     * all irqs off\n     * @type {number}\n     */\n    this.irq_mask = 0;\n\n    /**\n     * @type {number}\n     *\n     * Bogus default value (both master and slave mapped to 0).\n     * Will be initialized by the BIOS\n     */\n    this.irq_map = 0;\n\n    /**\n     * in-service register\n     * Holds interrupts that are currently being serviced\n     * @type {number}\n     */\n    this.isr = 0;\n\n    /**\n     * interrupt request register\n     * Holds interrupts that have been requested\n     * @type {number}\n     */\n    this.irr = 0;\n\n    this.irq_value = 0;\n\n    /**\n     * @type {number}\n     */\n    this.requested_irq = -1;\n\n    this.master = master;\n    this.is_master = this.master === undefined;\n    this.slave = undefined;\n\n    this.name = this.is_master ? \"master\" : \"slave \";\n\n    this.expect_icw4 = false;\n    this.state = 0;\n    this.read_isr = 0;\n    this.auto_eoi = 1;\n    this.special_mask_mode = 0;\n\n    this.elcr = 0;\n\n    this.cpu = cpu;\n\n    // Checking for callable interrupts:\n    // (cpu changes interrupt flag) -> cpu.handle_irqs -> pic.check_irqs -> cpu.pic_call_irq\n    // (pic changes isr/irr) -> cpu.handle_irqs -> ...\n\n    // triggering irqs:\n    // (io device has irq) -> cpu.device_raise_irq -> pic.set_irq -> cpu.handle_irqs -> (see above)\n\n\n    if(this.is_master)\n    {\n        this.slave = new PIC(this.cpu, this);\n\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"master> no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                dbg_log(\"master> higher prio: isr=\" + h(this.isr, 2) +\n                        \" mask=\" + h(this.irq_mask & 0xff, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> request irq \" + irq_number, LOG_PIC);\n\n            this.requested_irq = irq_number;\n            this.cpu.handle_irqs();\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"master> spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            PIC_LOG_VERBOSE && dbg_log(\"master> acknowledge \" + this.requested_irq, LOG_PIC);\n            if(this.requested_irq === 2)\n            {\n                this.slave.acknowledge_irq();\n            }\n            else\n            {\n                this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n            }\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n    else\n    {\n        // is slave\n        this.check_irqs = function()\n        {\n            if(this.requested_irq >= 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > Already requested irq: \" + this.requested_irq, LOG_PIC);\n                this.cpu.handle_irqs();\n                return;\n            }\n\n            var enabled_irr = this.irr & this.irq_mask;\n\n            if(!enabled_irr)\n            {\n                if(PIC_LOG_VERBOSE)\n                {\n                    dbg_log(\"slave > no unmasked irrs. irr=\" + h(this.irr, 2) +\n                            \" mask=\" + h(this.irq_mask & 0xff, 2) + \" isr=\" + h(this.isr, 2), LOG_PIC);\n                }\n                return;\n            }\n\n            var irq_mask = enabled_irr & -enabled_irr;\n            var special_mask = this.special_mask_mode ? this.irq_mask : -1;\n\n            if(this.isr && (this.isr & -this.isr & special_mask) <= irq_mask)\n            {\n                // wait for eoi of higher or same priority interrupt\n                PIC_LOG_VERBOSE && dbg_log(\"slave > higher prio: isr=\" + h(this.isr, 2) + \" irq=\" + h(irq_mask, 2), LOG_PIC);\n                return;\n            }\n\n            dbg_assert(irq_mask !== 0);\n            var irq_number = v86util.int_log2_byte(irq_mask);\n            dbg_assert(irq_mask === (1 << irq_number));\n\n            PIC_LOG_VERBOSE && dbg_log(\"slave > request irq \" + irq_number, LOG_PIC);\n            this.requested_irq = irq_number;\n            this.master.set_irq(2);\n        };\n\n        this.acknowledge_irq = function()\n        {\n            if(this.requested_irq === -1)\n            {\n                return;\n            }\n\n            if(this.irr === 0)\n            {\n                PIC_LOG_VERBOSE && dbg_log(\"slave > spurious requested=\" + this.requested_irq, LOG_PIC);\n                this.requested_irq = -1;\n                this.master.irq_value &= ~(1 << 2);\n                this.cpu.pic_call_irq(this.irq_map | 7);\n                return;\n            }\n\n            dbg_assert(this.irr); // spurious\n            dbg_assert(this.requested_irq >= 0);\n\n            var irq_mask = 1 << this.requested_irq;\n\n            if((this.elcr & irq_mask) === 0) // not in level mode\n            {\n                this.irr &= ~irq_mask;\n            }\n\n            if(!this.auto_eoi)\n            {\n                this.isr |= irq_mask;\n            }\n\n            this.master.irq_value &= ~(1 << 2);\n            PIC_LOG_VERBOSE && dbg_log(\"slave > acknowledge \" + this.requested_irq, LOG_PIC);\n            this.cpu.pic_call_irq(this.irq_map | this.requested_irq);\n\n            this.requested_irq = -1;\n            this.check_irqs();\n        };\n    }\n\n    this.dump = function()\n    {\n        dbg_log(\"mask: \" + h(this.irq_mask & 0xFF), LOG_PIC);\n        dbg_log(\"base: \" + h(this.irq_map), LOG_PIC);\n        dbg_log(\"requested: \" + h(this.irr), LOG_PIC);\n        dbg_log(\"serviced: \" + h(this.isr), LOG_PIC);\n\n        if(this.is_master)\n        {\n            this.slave.dump();\n        }\n    };\n\n    var io_base;\n    var iobase_high;\n    if(this.is_master)\n    {\n        io_base = 0x20;\n        iobase_high = 0x4D0;\n    }\n    else\n    {\n        io_base = 0xA0;\n        iobase_high = 0x4D1;\n    }\n\n    this.cpu.io.register_write(io_base, this, this.port20_write);\n    this.cpu.io.register_read(io_base, this, this.port20_read);\n\n    this.cpu.io.register_write(io_base | 1, this, this.port21_write);\n    this.cpu.io.register_read(io_base | 1, this, this.port21_read);\n\n    this.cpu.io.register_write(iobase_high, this, this.port4D0_write);\n    this.cpu.io.register_read(iobase_high, this, this.port4D0_read);\n\n\n    if(this.is_master)\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n\n            if(irq_number >= 8)\n            {\n                this.slave.set_irq(irq_number - 8);\n                return;\n            }\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 16);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"master> clear irq \" + irq_number, LOG_PIC);\n            }\n\n            if(irq_number >= 8)\n            {\n                this.slave.clear_irq(irq_number - 8);\n                return;\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n    else\n    {\n        this.set_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > set irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if((this.irq_value & irq_mask) === 0)\n            {\n                this.irr |= irq_mask;\n                this.irq_value |= irq_mask;\n                this.check_irqs();\n            }\n        };\n\n        this.clear_irq = function(irq_number)\n        {\n            dbg_assert(irq_number >= 0 && irq_number < 8);\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"slave > clear irq \" + irq_number, LOG_PIC);\n            }\n\n            var irq_mask = 1 << irq_number;\n            if(this.irq_value & irq_mask)\n            {\n                this.irq_value &= ~irq_mask;\n                this.irr &= ~irq_mask;\n                this.check_irqs();\n            }\n        };\n    }\n\n    this.get_isr = function()\n    {\n        return this.isr;\n    };\n}\n\nPIC.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.irq_mask;\n    state[1] = this.irq_map;\n    state[2] = this.isr;\n    state[3] = this.irr;\n    state[4] = this.is_master;\n    state[5] = this.slave;\n    state[6] = this.expect_icw4;\n    state[7] = this.state;\n    state[8] = this.read_isr;\n    state[9] = this.auto_eoi;\n    state[10] = this.elcr;\n\n    return state;\n};\n\nPIC.prototype.set_state = function(state)\n{\n    this.irq_mask = state[0];\n    this.irq_map = state[1];\n    this.isr = state[2];\n    this.irr = state[3];\n    this.is_master = state[4];\n    this.slave = state[5];\n    this.expect_icw4 = state[6];\n    this.state = state[7];\n    this.read_isr = state[8];\n    this.auto_eoi = state[9];\n    this.elcr = state[10];\n};\n\nPIC.prototype.port20_write = function(data_byte)\n{\n    //dbg_log(\"20 write: \" + h(data_byte), LOG_PIC);\n    if(data_byte & 0x10) // xxxx1xxx\n    {\n        // icw1\n        dbg_log(\"icw1 = \" + h(data_byte), LOG_PIC);\n        this.isr = 0;\n        this.irr = 0;\n        this.irq_mask = 0;\n        this.irq_value = 0;\n        this.auto_eoi = 1;\n        this.requested_irq = -1;\n\n        this.expect_icw4 = data_byte & 1;\n        this.state = 1;\n    }\n    else if(data_byte & 8) // xxx01xxx\n    {\n        // ocw3\n        dbg_log(\"ocw3: \" + h(data_byte), LOG_PIC);\n        if(data_byte & 2)\n        {\n            this.read_isr = data_byte & 1;\n        }\n        if(data_byte & 4)\n        {\n            dbg_assert(false, \"unimplemented: polling\", LOG_PIC);\n        }\n        if(data_byte & 0x40)\n        {\n            this.special_mask_mode = (data_byte & 0x20) === 0x20;\n            dbg_log(\"special mask mode: \" + this.special_mask_mode, LOG_PIC);\n        }\n    }\n    else // xxx00xxx\n    {\n        // ocw2\n        // end of interrupt\n        dbg_log(\"eoi: \" + h(data_byte) + \" (\" + this.name + \")\", LOG_PIC);\n\n        var eoi_type = data_byte >> 5;\n\n        if(eoi_type === 1)\n        {\n            // non-specific eoi\n            this.isr &= this.isr - 1;\n            dbg_log(\"new isr: \" + h(this.isr, 2), LOG_PIC);\n        }\n        else if(eoi_type === 3)\n        {\n            // specific eoi\n            this.isr &= ~(1 << (data_byte & 7));\n        }\n        else if((data_byte & 0xC8) === 0xC0)\n        {\n            // os2 v4\n            let priority = data_byte & 7;\n            dbg_log(\"lowest priority: \" + h(priority), LOG_PIC);\n        }\n        else\n        {\n            dbg_log(\"Unknown eoi: \" + h(data_byte), LOG_PIC);\n            dbg_assert(false);\n            this.isr &= this.isr - 1;\n        }\n\n        this.check_irqs();\n    }\n};\n\nPIC.prototype.port20_read = function()\n{\n    if(this.read_isr)\n    {\n        dbg_log(\"read port 20h (isr): \" + h(this.isr), LOG_PIC);\n        return this.isr;\n    }\n    else\n    {\n        dbg_log(\"read port 20h (irr): \" + h(this.irr), LOG_PIC);\n        return this.irr;\n    }\n};\n\nPIC.prototype.port21_write = function(data_byte)\n{\n    //dbg_log(\"21 write: \" + h(data_byte), LOG_PIC);\n    if(this.state === 0)\n    {\n        if(this.expect_icw4)\n        {\n            // icw4\n            this.expect_icw4 = false;\n            this.auto_eoi = data_byte & 2;\n            dbg_log(\"icw4: \" + h(data_byte) + \" autoeoi=\" + this.auto_eoi, LOG_PIC);\n\n            if((data_byte & 1) === 0)\n            {\n                dbg_assert(false, \"unimplemented: not 8086 mode\", LOG_PIC);\n            }\n        }\n        else\n        {\n            // ocw1\n            this.irq_mask = ~data_byte;\n\n            if(PIC_LOG_VERBOSE)\n            {\n                dbg_log(\"interrupt mask: \" + (this.irq_mask & 0xFF).toString(2) +\n                        \" (\" + this.name + \")\", LOG_PIC);\n            }\n\n            this.check_irqs();\n        }\n    }\n    else if(this.state === 1)\n    {\n        // icw2\n        this.irq_map = data_byte;\n        dbg_log(\"interrupts are mapped to \" + h(this.irq_map) +\n                \" (\" + this.name + \")\", LOG_PIC);\n        this.state++;\n    }\n    else if(this.state === 2)\n    {\n        // icw3\n        this.state = 0;\n        dbg_log(\"icw3: \" + h(data_byte), LOG_PIC);\n    }\n};\n\nPIC.prototype.port21_read = function()\n{\n    dbg_log(\"21h read \" + h(~this.irq_mask & 0xff), LOG_PIC);\n    return ~this.irq_mask & 0xFF;\n};\n\nPIC.prototype.port4D0_read = function()\n{\n    dbg_log(\"elcr read: \" + h(this.elcr, 2), LOG_PIC);\n    return this.elcr;\n};\n\nPIC.prototype.port4D0_write = function(value)\n{\n    dbg_log(\"elcr write: \" + h(value, 2), LOG_PIC);\n    // set by seabios to 00 0C (only set for pci interrupts)\n    this.elcr = value;\n};\n\n","\"use strict\";\n\n/*\n * Serial ports\n * http://wiki.osdev.org/UART\n * https://github.com/s-macke/jor1k/blob/master/js/worker/dev/uart.js\n * https://www.freebsd.org/doc/en/articles/serial-uart/\n */\n\n/** @const */\nvar DLAB = 0x80;\n\n\n/** @const */ var UART_IER_MSI  = 0x08; /* Modem Status Changed int. */\n/** @const */ var UART_IER_THRI = 0x02; /* Enable Transmitter holding register int. */\n/** @const */ var UART_IER_RDI = 0x01; /* Enable receiver data interrupt */\n\n/** @const */var UART_IIR_MSI = 0x00; /* Modem status interrupt (Low priority) */\n/** @const */var UART_IIR_NO_INT = 0x01;\n/** @const */var UART_IIR_THRI = 0x02; /* Transmitter holding register empty */\n/** @const */var UART_IIR_RDI = 0x04; /* Receiver data interrupt */\n/** @const */var UART_IIR_RLSI = 0x06; /* Receiver line status interrupt (High p.) */\n/** @const */var UART_IIR_CTI = 0x0c; /* Character timeout */\n\n/** @const */ var UART_LSR_DATA_READY        = 0x1;  // data available\n/** @const */ var UART_LSR_TX_EMPTY        = 0x20; // TX (THR) buffer is empty\n/** @const */ var UART_LSR_TRANSMITTER_EMPTY = 0x40; // TX empty and line is idle\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {number} port\n * @param {BusConnector} bus\n */\nfunction UART(cpu, port, bus)\n{\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    this.ints = 1 << UART_IIR_THRI;\n\n    this.baud_rate = 0;\n\n    this.line_control = 0;\n\n    // line status register\n    this.lsr = UART_LSR_TRANSMITTER_EMPTY | UART_LSR_TX_EMPTY;\n\n    this.fifo_control = 0;\n\n    // interrupts enable\n    this.ier = 0;\n\n    // interrupt identification register\n    this.iir = UART_IIR_NO_INT;\n\n    this.modem_control = 0;\n    this.modem_status = 0;\n\n    this.scratch_register = 0;\n\n    this.irq = 0;\n\n    this.input = new ByteQueue(4096);\n\n    this.current_line = [];\n\n    if(port === 0x3E8 || port === 0x3F8)\n    {\n        this.irq = 4;\n    }\n    else if(port === 0x3E8 || port === 0x3E8)\n    {\n        this.irq = 3;\n    }\n    else\n    {\n        dbg_log(\"Invalid port: \" + h(port), LOG_SERIAL);\n        return;\n    }\n\n    this.bus.register(\"serial0-input\", function(data)\n    {\n        this.data_received(data);\n    }, this);\n\n    var io = cpu.io;\n\n    io.register_write(port, this, function(out_byte)\n    {\n        this.write_data(out_byte);\n    }, function(out_word)\n    {\n        this.write_data(out_word & 0xFF);\n        this.write_data(out_word >> 8);\n    });\n\n    io.register_write(port | 1, this, function(out_byte)\n    {\n        if(this.line_control & DLAB)\n        {\n            this.baud_rate = this.baud_rate & 0xFF | out_byte << 8;\n            dbg_log(\"baud rate: \" + h(this.baud_rate), LOG_SERIAL);\n        }\n        else\n        {\n            this.ier = out_byte & 0xF;\n            dbg_log(\"interrupt enable: \" + h(out_byte), LOG_SERIAL);\n            this.CheckInterrupt();\n        }\n    });\n\n    io.register_read(port, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate & 0xFF;\n        }\n        else\n        {\n            var data = this.input.shift();\n\n            if(data === -1)\n            {\n                dbg_log(\"Read input empty\", LOG_SERIAL);\n            }\n            else\n            {\n                dbg_log(\"Read input: \" + h(data), LOG_SERIAL);\n            }\n\n            if(this.input.length === 0)\n            {\n                this.lsr &= ~UART_LSR_DATA_READY;\n                this.ClearInterrupt(UART_IIR_CTI);\n            }\n\n            return data;\n        }\n    });\n\n    io.register_read(port | 1, this, function()\n    {\n        if(this.line_control & DLAB)\n        {\n            return this.baud_rate >> 8;\n        }\n        else\n        {\n            return this.ier & 0xF;\n        }\n    });\n\n    io.register_read(port | 2, this, function()\n    {\n        var ret = this.iir & 0xF | 0xC0;\n        dbg_log(\"read interrupt identification: \" + h(this.iir), LOG_SERIAL);\n\n        if (this.iir == UART_IIR_THRI) {\n            this.ClearInterrupt(UART_IIR_THRI);\n        }\n\n        return ret;\n    });\n    io.register_write(port | 2, this, function(out_byte)\n    {\n        dbg_log(\"fifo control: \" + h(out_byte), LOG_SERIAL);\n        this.fifo_control = out_byte;\n    });\n\n    io.register_read(port | 3, this, function()\n    {\n        dbg_log(\"read line control: \" + h(this.line_control), LOG_SERIAL);\n        return this.line_control;\n    });\n    io.register_write(port | 3, this, function(out_byte)\n    {\n        dbg_log(\"line control: \" + h(out_byte), LOG_SERIAL);\n        this.line_control = out_byte;\n    });\n\n\n    io.register_read(port | 4, this, function()\n    {\n        return this.modem_control;\n    });\n    io.register_write(port | 4, this, function(out_byte)\n    {\n        dbg_log(\"modem control: \" + h(out_byte), LOG_SERIAL);\n        this.modem_control = out_byte;\n    });\n\n    io.register_read(port | 5, this, function()\n    {\n        dbg_log(\"read line status: \" + h(this.lsr), LOG_SERIAL);\n        return this.lsr;\n    });\n    io.register_write(port | 5, this, function(out_byte)\n    {\n        dbg_log(\"Factory test write\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 6, this, function()\n    {\n        dbg_log(\"read modem status: \" + h(this.modem_status), LOG_SERIAL);\n        return this.modem_status;\n    });\n    io.register_write(port | 6, this, function(out_byte)\n    {\n        dbg_log(\"Unkown register write (base+6)\", LOG_SERIAL);\n    });\n\n    io.register_read(port | 7, this, function()\n    {\n        return this.scratch_register;\n    });\n    io.register_write(port | 7, this, function(out_byte)\n    {\n        this.scratch_register = out_byte;\n    });\n}\n\nUART.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.ints;\n    state[1] = this.baud_rate;\n    state[2] = this.line_control;\n    state[3] = this.lsr;\n    state[4] = this.fifo_control;\n    state[5] = this.ier;\n    state[6] = this.iir;\n    state[7] = this.modem_control;\n    state[8] = this.modem_status;\n    state[9] = this.scratch_register;\n    state[10] = this.irq;\n\n    return state;\n};\n\nUART.prototype.set_state = function(state)\n{\n    this.ints = state[0];\n    this.baud_rate = state[1];\n    this.line_control = state[2];\n    this.lsr = state[3];\n    this.fifo_control = state[4];\n    this.ier = state[5];\n    this.iir = state[6];\n    this.modem_control = state[7];\n    this.modem_status = state[8];\n    this.scratch_register = state[9];\n    this.irq = state[10];\n};\n\nUART.prototype.CheckInterrupt = function() {\n    if ((this.ints & (1 << UART_IIR_CTI))  && (this.ier & UART_IER_RDI)) {\n        this.iir = UART_IIR_CTI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_THRI)) && (this.ier & UART_IER_THRI)) {\n        this.iir = UART_IIR_THRI;\n        this.cpu.device_raise_irq(this.irq);\n    } else\n    if ((this.ints & (1 << UART_IIR_MSI))  && (this.ier & UART_IER_MSI)) {\n        this.iir = UART_IIR_MSI;\n        this.cpu.device_raise_irq(this.irq);\n    } else {\n        this.iir = UART_IIR_NO_INT;\n        this.cpu.device_lower_irq(this.irq);\n    }\n};\n\nUART.prototype.ThrowInterrupt = function(line) {\n    this.ints |= (1 << line);\n    this.CheckInterrupt();\n};\n\nUART.prototype.ClearInterrupt = function(line) {\n    this.ints &= ~(1 << line);\n    this.CheckInterrupt();\n};\n\n/**\n * @param {number} data\n */\nUART.prototype.data_received = function(data)\n{\n    dbg_log(\"input: \" + h(data), LOG_SERIAL);\n    this.input.push(data);\n\n    this.lsr |= UART_LSR_DATA_READY;\n    this.ThrowInterrupt(UART_IIR_CTI);\n};\n\nUART.prototype.write_data = function(out_byte)\n{\n    if(this.line_control & DLAB)\n    {\n        this.baud_rate = this.baud_rate & ~0xFF | out_byte;\n        return;\n    }\n\n    dbg_log(\"data: \" + h(out_byte), LOG_SERIAL);\n\n    this.ThrowInterrupt(UART_IIR_THRI);\n\n    if(out_byte === 0xFF)\n    {\n        return;\n    }\n\n    var char = String.fromCharCode(out_byte);\n\n    this.bus.send(\"serial0-output-char\", char);\n\n    this.current_line.push(out_byte);\n\n    if(char === \"\\n\")\n    {\n        dbg_log(\"SERIAL: \" + String.fromCharCode.apply(\"\", this.current_line).trimRight());\n        this.bus.send(\"serial0-output-line\", String.fromCharCode.apply(\"\", this.current_line));\n        this.current_line = [];\n    }\n};\n\n","\"use strict\";\n\n/** @const */\nvar STATE_VERSION = 5;\n\n/** @const */\nvar STATE_MAGIC = 0x86768676|0;\n\n/** @const */\nvar STATE_INDEX_MAGIC = 0;\n\n/** @const */\nvar STATE_INDEX_VERSION = 1;\n\n/** @const */\nvar STATE_INDEX_TOTAL_LEN = 2;\n\n/** @const */\nvar STATE_INDEX_INFO_LEN = 3;\n\n/** @const */\nvar STATE_INFO_BLOCK_START = 16;\n\n\n/** @constructor */\nfunction StateLoadError(msg)\n{\n    this.message = msg;\n}\nStateLoadError.prototype = new Error;\n\n\nfunction save_object(obj, saved_buffers)\n{\n    if(typeof obj !== \"object\" || obj === null || obj instanceof Array)\n    {\n        return obj;\n    }\n\n    dbg_assert(obj.constructor !== Object);\n\n    if(obj.BYTES_PER_ELEMENT)\n    {\n        // Uint8Array, etc.\n        var buffer = new Uint8Array(obj.buffer, obj.byteOffset, obj.length * obj.BYTES_PER_ELEMENT);\n\n        return {\n            \"__state_type__\": obj.constructor.name,\n            \"buffer_id\": saved_buffers.push(buffer) - 1,\n        };\n    }\n\n    if(DEBUG && !obj.get_state)\n    {\n        console.log(\"Object without get_state: \", obj);\n    }\n\n    var state = obj.get_state();\n    var result = [];\n\n    for(var i = 0; i < state.length; i++)\n    {\n        var value = state[i];\n\n        dbg_assert(typeof value !== \"function\");\n\n        result[i] = save_object(value, saved_buffers);\n    }\n\n    return result;\n}\n\nfunction restore_object(base, obj, buffers)\n{\n    // recursively restore obj into base\n\n    if(typeof obj !== \"object\" || obj === null)\n    {\n        return obj;\n    }\n\n    if(base instanceof Array)\n    {\n        return obj;\n    }\n\n    var type = obj[\"__state_type__\"];\n\n    if(type === undefined)\n    {\n        if(DEBUG && base === undefined)\n        {\n            console.log(\"Cannot restore (base doesn't exist)\", obj);\n            dbg_assert(false);\n        }\n\n        if(DEBUG && !base.get_state)\n        {\n            console.log(\"No get_state:\", base);\n        }\n\n        var current = base.get_state();\n\n        dbg_assert(current.length === obj.length, \"Cannot restore: Different number of properties\");\n\n        for(var i = 0; i < obj.length; i++)\n        {\n            obj[i] = restore_object(current[i], obj[i], buffers);\n        }\n\n        base.set_state(obj);\n\n        return base;\n    }\n    else\n    {\n        var table = {\n            \"Uint8Array\": Uint8Array,\n            \"Int8Array\": Int8Array,\n            \"Uint16Array\": Uint16Array,\n            \"Int16Array\": Int16Array,\n            \"Uint32Array\": Uint32Array,\n            \"Int32Array\": Int32Array,\n            \"Float32Array\": Float32Array,\n            \"Float64Array\": Float64Array,\n        };\n\n        var constructor = table[type];\n        dbg_assert(constructor, \"Unkown type: \" + type);\n\n        var info = buffers.infos[obj[\"buffer_id\"]];\n\n        dbg_assert(base);\n        dbg_assert(base.constructor === constructor);\n\n        // restore large buffers by just returning a view on the state blob\n        if(info.length >= 1024 * 1024 && constructor === Uint8Array)\n        {\n            return new Uint8Array(buffers.full, info.offset, info.length);\n        }\n        // XXX: Disabled, unpredictable since it updates in-place, breaks pci\n        //      and possibly also breaks restore -> save -> restore again\n        // avoid a new allocation if possible\n        //else if(base &&\n        //        base.constructor === constructor &&\n        //        base.byteOffset === 0 &&\n        //        base.byteLength === info.length)\n        //{\n        //    new Uint8Array(base.buffer).set(\n        //        new Uint8Array(buffers.full, info.offset, info.length),\n        //        base.byteOffset\n        //    );\n        //    return base;\n        //}\n        else\n        {\n            var buf = buffers.full.slice(info.offset, info.offset + info.length);\n            return new constructor(buf);\n        }\n    }\n}\n\nCPU.prototype.save_state = function()\n{\n    var saved_buffers = [];\n    var state = save_object(this, saved_buffers);\n\n    var buffer_infos = [];\n    var total_buffer_size = 0;\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var len = saved_buffers[i].byteLength;\n\n        buffer_infos[i] = {\n            offset: total_buffer_size,\n            length: len,\n        };\n\n        total_buffer_size += len;\n\n        // align\n        total_buffer_size = total_buffer_size + 3 & ~3;\n    }\n\n    var info_object = JSON.stringify({\n        \"buffer_infos\": buffer_infos,\n        \"state\": state,\n    });\n\n    var buffer_block_start = STATE_INFO_BLOCK_START + 2 * info_object.length;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n    var total_size = buffer_block_start + total_buffer_size;\n\n    //console.log(\"State: json_size=\" + Math.ceil(buffer_block_start / 1024 / 1024) + \"MB \" +\n    //               \"buffer_size=\" + Math.ceil(total_buffer_size / 1024 / 1024) + \"MB\");\n\n    var result = new ArrayBuffer(total_size);\n\n    var header_block = new Int32Array(\n        result,\n        0,\n        STATE_INFO_BLOCK_START / 4\n    );\n    var info_block = new Uint16Array(\n        result,\n        STATE_INFO_BLOCK_START,\n        info_object.length\n    );\n    var buffer_block = new Uint8Array(\n        result,\n        buffer_block_start\n    );\n\n    header_block[STATE_INDEX_MAGIC] = STATE_MAGIC;\n    header_block[STATE_INDEX_VERSION] = STATE_VERSION;\n    header_block[STATE_INDEX_TOTAL_LEN] = total_size;\n    header_block[STATE_INDEX_INFO_LEN] = info_object.length * 2;\n\n    for(var i = 0; i < info_object.length; i++)\n    {\n        info_block[i] = info_object.charCodeAt(i);\n    }\n\n    for(var i = 0; i < saved_buffers.length; i++)\n    {\n        var buffer = saved_buffers[i];\n        dbg_assert(buffer.constructor === Uint8Array);\n        buffer_block.set(buffer, buffer_infos[i].offset);\n    }\n\n    return result;\n};\n\nCPU.prototype.restore_state = function(state)\n{\n    var len = state.byteLength;\n\n    if(len < STATE_INFO_BLOCK_START)\n    {\n        throw new StateLoadError(\"Invalid length: \" + len);\n    }\n\n    var header_block = new Int32Array(state, 0, 4);\n\n    if(header_block[STATE_INDEX_MAGIC] !== STATE_MAGIC)\n    {\n        throw new StateLoadError(\"Invalid header: \" + h(header_block[STATE_INDEX_MAGIC] >>> 0));\n    }\n\n    if(header_block[STATE_INDEX_VERSION] !== STATE_VERSION)\n    {\n        throw new StateLoadError(\n                \"Version mismatch: dump=\" + header_block[STATE_INDEX_VERSION] +\n                \" we=\" + STATE_VERSION);\n    }\n\n    if(header_block[STATE_INDEX_TOTAL_LEN] !== len)\n    {\n        throw new StateLoadError(\n                \"Length doesn't match header: \" +\n                \"real=\" + len + \" header=\" + header_block[STATE_INDEX_TOTAL_LEN]);\n    }\n\n    var info_block_len = header_block[STATE_INDEX_INFO_LEN];\n\n    if(info_block_len < 0 ||\n       info_block_len + 12 >= len ||\n       info_block_len % 2)\n    {\n        throw new StateLoadError(\"Invalid info block length: \" + info_block_len);\n    }\n\n    var info_block_str_len = info_block_len / 2;\n    var info_block_buffer = new Uint16Array(state, STATE_INFO_BLOCK_START, info_block_str_len);\n    var info_block = \"\";\n\n    for(var i = 0; i < info_block_str_len - 8; )\n    {\n        info_block += String.fromCharCode(\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++],\n            info_block_buffer[i++], info_block_buffer[i++]\n        );\n    }\n\n    for(; i < info_block_str_len; )\n    {\n        info_block += String.fromCharCode(info_block_buffer[i++]);\n    }\n\n    var info_block_obj = JSON.parse(info_block);\n    var state_object = info_block_obj[\"state\"];\n    var buffer_infos = info_block_obj[\"buffer_infos\"];\n    var buffer_block_start = STATE_INFO_BLOCK_START + info_block_len;\n    buffer_block_start = buffer_block_start + 3 & ~3;\n\n    for(var i = 0; i < buffer_infos.length; i++)\n    {\n        buffer_infos[i].offset += buffer_block_start;\n    }\n\n    var buffers = {\n        full: state,\n        infos: buffer_infos,\n    };\n\n    restore_object(this, state_object, buffers);\n};\n","\"use strict\";\n\n\n/** @const */ var E8390_CMD = 0x00 /* The command register (for all pages) */\n\n/* Page 0 register offsets. */\n/** @const */ var EN0_CLDALO = 0x01 /* Low byte of current local dma addr RD */\n/** @const */ var EN0_STARTPG = 0x01 /* Starting page of ring bfr WR */\n/** @const */ var EN0_CLDAHI = 0x02 /* High byte of current local dma addr RD */\n/** @const */ var EN0_STOPPG = 0x02 /* Ending page +1 of ring bfr WR */\n/** @const */ var EN0_BOUNDARY = 0x03 /* Boundary page of ring bfr RD WR */\n/** @const */ var EN0_TSR = 0x04 /* Transmit status reg RD */\n/** @const */ var EN0_TPSR = 0x04 /* Transmit starting page WR */\n/** @const */ var EN0_NCR = 0x05 /* Number of collision reg RD */\n/** @const */ var EN0_TCNTLO = 0x05 /* Low byte of tx byte count WR */\n/** @const */ var EN0_FIFO = 0x06 /* FIFO RD */\n/** @const */ var EN0_TCNTHI = 0x06 /* High byte of tx byte count WR */\n/** @const */ var EN0_ISR = 0x07 /* Interrupt status reg RD WR */\n/** @const */ var EN0_CRDALO = 0x08 /* low byte of current remote dma address RD */\n/** @const */ var EN0_RSARLO = 0x08 /* Remote start address reg 0 */\n/** @const */ var EN0_CRDAHI = 0x09 /* high byte, current remote dma address RD */\n/** @const */ var EN0_RSARHI = 0x09 /* Remote start address reg 1 */\n/** @const */ var EN0_RCNTLO = 0x0a /* Remote byte count reg WR */\n/** @const */ var EN0_RCNTHI = 0x0b /* Remote byte count reg WR */\n/** @const */ var EN0_RSR = 0x0c /* rx status reg RD */\n/** @const */ var EN0_RXCR = 0x0c /* RX configuration reg WR */\n/** @const */ var EN0_TXCR = 0x0d /* TX configuration reg WR */\n/** @const */ var EN0_COUNTER0 = 0x0d /* Rcv alignment error counter RD */\n/** @const */ var EN0_DCFG = 0x0e /* Data configuration reg WR */\n/** @const */ var EN0_COUNTER1 = 0x0e /* Rcv CRC error counter RD */\n/** @const */ var EN0_IMR = 0x0f /* Interrupt mask reg WR */\n/** @const */ var EN0_COUNTER2 = 0x0f /* Rcv missed frame error counter RD */\n\n/** @const */ var NE_DATAPORT = 0x10 /* NatSemi-defined port window offset. */\n/** @const */ var NE_RESET = 0x1f /* Issue a read to reset, a write to clear. */\n\n/* Bits in EN0_ISR - Interrupt status register */\n/** @const */ var ENISR_RX = 0x01 /* Receiver, no error */\n/** @const */ var ENISR_TX = 0x02 /* Transmitter, no error */\n/** @const */ var ENISR_RX_ERR = 0x04 /* Receiver, with error */\n/** @const */ var ENISR_TX_ERR = 0x08 /* Transmitter, with error */\n/** @const */ var ENISR_OVER = 0x10 /* Receiver overwrote the ring */\n/** @const */ var ENISR_COUNTERS = 0x20 /* Counters need emptying */\n/** @const */ var ENISR_RDC = 0x40 /* remote dma complete */\n/** @const */ var ENISR_RESET = 0x80 /* Reset completed */\n/** @const */ var ENISR_ALL = 0x3f /* Interrupts we will enable */\n\n/** @const */ var ENRSR_RXOK = 0x01 /* Received a good packet */\n\n/** @const */ var START_PAGE = 0x40;\n/** @const */ var START_RX_PAGE = 0x40 + 12;\n/** @const */ var STOP_PAGE = 0x80;\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n */\nfunction Ne2k(cpu, bus)\n{\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n    this.bus.register(\"net0-receive\", function(data)\n    {\n        this.receive(data);\n    }, this);\n\n    this.port = 0x300;\n\n    this.name = \"ne2k\";\n\n    /** @const */\n    var use_pci = true;\n\n    if(use_pci)\n    {\n        this.pci_space = [\n            0xec, 0x10, 0x29, 0x80, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,\n            this.port & 0xFF | 1, this.port >> 8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x00, 0x11,\n            0x00, 0x00, 0xb8, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n        ];\n        this.pci_id = 0x05 << 3;\n        this.pci_bars = [\n            {\n                size: 32,\n            },\n        ];\n    }\n\n    this.isr = 0;\n    this.imr = 0; // interrupt mask register\n\n    this.cr = 1;\n\n    this.dcfg = 0;\n\n    this.rcnt = 0;\n\n    this.tcnt = 0;\n    this.tpsr = 0;\n    this.memory = new Uint8Array(256 * 0x80);\n\n    this.rxcr = 0;\n    this.txcr = 0;\n    this.tsr = 1;\n\n    // mac address\n    var mac = [\n        0x00, 0x22, 0x15,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n        Math.random() * 255 | 0,\n    ];\n\n    for(var i = 0; i < 6; i++)\n    {\n        this.memory[i << 1] = this.memory[i << 1 | 1] = mac[i];\n    }\n\n    this.memory[14] = this.memory[15] = 0x57;\n\n    dbg_log(\"Mac: \" + h(mac[0], 2) + \":\" +\n                      h(mac[1], 2) + \":\" +\n                      h(mac[2], 2) + \":\" +\n                      h(mac[3], 2) + \":\" +\n                      h(mac[4], 2) + \":\" +\n                      h(mac[5], 2), LOG_NET);\n\n    this.rsar = 0;\n\n    this.pstart = START_PAGE;\n    this.pstop = STOP_PAGE;\n\n    this.curpg = START_RX_PAGE;\n    this.boundary = START_RX_PAGE;\n\n    var io = cpu.io;\n\n    io.register_read(this.port | E8390_CMD, this, function()\n    {\n        dbg_log(\"Read cmd\", LOG_NET);\n        return this.cr;\n    });\n\n    io.register_write(this.port | E8390_CMD, this, function(data_byte)\n    {\n        this.cr = data_byte & ~4;\n        dbg_log(\"Write command: \" + h(data_byte, 2) + \" newpg=\" + (this.cr >> 6) + \" txcr=\" + h(this.txcr, 2), LOG_NET);\n\n        if(this.cr & 1)\n        {\n            return;\n        }\n\n        if((data_byte | 0x18) && this.rcnt === 0)\n        {\n            this.do_interrupt(ENISR_RDC);\n        }\n\n        if(data_byte & 4)\n        {\n            var start = this.tpsr << 8;\n            var data = this.memory.subarray(start, start + this.tcnt);\n            this.bus.send(\"net0-send\", data);\n            this.bus.send(\"eth-transmit-end\", [data.length]);\n            this.do_interrupt(ENISR_TX);\n\n            dbg_log(\"Command: Transfer. length=\" + h(data.byteLength), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_COUNTER0, this, function()\n    {\n        dbg_log(\"Read counter0\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER1, this, function()\n    {\n        dbg_log(\"Read counter1\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | EN0_COUNTER2, this, function()\n    {\n        dbg_log(\"Read counter2\", LOG_NET);\n        return 0;\n    });\n\n    io.register_read(this.port | NE_RESET, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read reset\", LOG_NET);\n            this.do_interrupt(ENISR_RESET);\n        }\n        else\n        {\n            dbg_log(\"Read pg1/1f\", LOG_NET);\n        }\n        return 0;\n    });\n\n    io.register_write(this.port | NE_RESET, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write reset: \" + h(data_byte, 2), LOG_NET);\n            //this.isr &= ~ENISR_RESET;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/1f: \" + h(data_byte), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STARTPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"start page: \" + h(data_byte, 2), LOG_NET);\n            this.pstart = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/1: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_STOPPG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"stop page: \" + h(data_byte, 2), LOG_NET);\n            this.pstop = data_byte;\n        }\n        else\n        {\n            dbg_log(\"pg1/2: \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_ISR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read isr: \" + h(this.isr, 2), LOG_NET);\n            return this.isr;\n        }\n        else\n        {\n            dbg_log(\"Read curpg: \" + h(this.curpg, 2), LOG_NET);\n            return this.curpg;\n        }\n    });\n\n    io.register_write(this.port | EN0_ISR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            // acknoledge interrupts where bit is set\n            dbg_log(\"Write isr: \" + h(data_byte, 2), LOG_NET);\n            this.isr &= ~data_byte\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write curpg: \" + h(data_byte, 2), LOG_NET);\n            this.curpg = data_byte\n        }\n    });\n\n    io.register_write(this.port | EN0_TXCR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            this.txcr = data_byte;\n            dbg_log(\"Write tx config: \" + h(data_byte, 2), LOG_NET);\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0d \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_DCFG, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write data configuration: \" + h(data_byte, 2), LOG_NET);\n            this.dcfg = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0e \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count low: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0a \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote byte count high: \" + h(data_byte, 2), LOG_NET);\n            this.rcnt = this.rcnt & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0b \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write remote start address low: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF00 | data_byte & 0xFF;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x08 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_RSARHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write start addresse count high: \" + h(data_byte, 2), LOG_NET);\n            this.rsar = this.rsar & 0xFF | data_byte << 8 & 0xFF00;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x09 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_IMR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write interrupt mask register: \" + h(data_byte, 2) + \" isr=\" + h(this.isr, 2), LOG_NET);\n            this.imr = data_byte;\n            this.update_irq();\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x0f \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_BOUNDARY, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Read boundary: \" + h(this.boundary, 2), LOG_NET);\n            return this.boundary;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x03\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_BOUNDARY, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write boundary: \" + h(data_byte, 2), LOG_NET);\n            this.boundary = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x03 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_TSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return this.tsr;\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x04\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_TPSR, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tpsr: \" + h(data_byte, 2), LOG_NET);\n            this.tpsr = data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x04 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTLO, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt low: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & ~0xFF | data_byte;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x05 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_write(this.port | EN0_TCNTHI, this, function(data_byte)\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            dbg_log(\"Write tcnt high: \" + h(data_byte, 2), LOG_NET);\n            this.tcnt = this.tcnt & 0xFF | data_byte << 8;\n        }\n        else\n        {\n            dbg_log(\"Write pg1/0x06 \" + h(data_byte, 2), LOG_NET);\n        }\n    });\n\n    io.register_read(this.port | EN0_RSR, this, function()\n    {\n        var pg = this.get_page();\n        if(pg === 0)\n        {\n            return 1 | 1 << 3; // receive status ok\n        }\n        else\n        {\n            dbg_log(\"Read pg1/0x0c\", LOG_NET);\n            return 0;\n        }\n    });\n\n    io.register_write(this.port | EN0_RXCR, this, function(data_byte)\n    {\n        dbg_log(\"RX configuration reg write: \" + h(data_byte, 2), LOG_NET);\n        this.rxcr = data_byte;\n    });\n\n    io.register_read(this.port | NE_DATAPORT | 0, this,\n            this.data_port_read8,\n            this.data_port_read16,\n            this.data_port_read32);\n    io.register_write(this.port | NE_DATAPORT | 0, this,\n            this.data_port_write16,\n            this.data_port_write16,\n            this.data_port_write32);\n\n    if(use_pci)\n    {\n        cpu.devices.pci.register_device(this);\n    }\n}\n\nNe2k.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = this.isr;\n    state[1] = this.imr;\n    state[2] = this.cr;\n    state[3] = this.dcfg;\n    state[4] = this.rcnt;\n    state[5] = this.tcnt;\n    state[6] = this.tpsr;\n    state[7] = this.rsar;\n    state[8] = this.pstart;\n    state[9] = this.curpg;\n    state[10] = this.boundary;\n\n    return state;\n};\n\nNe2k.prototype.set_state = function(state)\n{\n    this.isr = state[0];\n    this.imr = state[1];\n    this.cr = state[2];\n    this.dcfg = state[3];\n    this.rcnt = state[4];\n    this.tcnt = state[5];\n    this.tpsr = state[6];\n    this.rsar = state[7];\n    this.pstart = state[8];\n    this.curpg = state[9];\n    this.boundary = state[10];\n};\n\nNe2k.prototype.do_interrupt = function(ir_mask)\n{\n    dbg_log(\"Do interrupt \" + h(ir_mask, 2), LOG_NET);\n    this.isr |= ir_mask;\n    this.update_irq();\n};\n\nNe2k.prototype.update_irq = function()\n{\n    if(this.imr & this.isr)\n    {\n        this.pci.raise_irq(this.pci_id);\n    }\n    else\n    {\n        this.pci.lower_irq(this.pci_id);\n    }\n};\n\nNe2k.prototype.data_port_write = function(data_byte)\n{\n    dbg_log(\"Write data port: data=\" + h(data_byte & 0xFF, 2) +\n                            \" rsar=\" + h(this.rsar, 4) +\n                            \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n\n    if(this.rsar > 0x10 && this.rsar < (START_PAGE << 8))\n    {\n        // unmapped\n        return;\n    }\n\n    this.rcnt--;\n    this.memory[this.rsar++] = data_byte;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n};\n\nNe2k.prototype.data_port_write16 = function(data)\n{\n    this.data_port_write(data);\n\n    if(this.dcfg & 1)\n    {\n        this.data_port_write(data >> 8);\n    }\n};\n\nNe2k.prototype.data_port_write32 = function(data)\n{\n    this.data_port_write(data);\n    this.data_port_write(data >> 8);\n    this.data_port_write(data >> 16);\n    this.data_port_write(data >> 24);\n};\n\nNe2k.prototype.data_port_read = function()\n{\n    var data = this.memory[this.rsar++];\n\n    dbg_log(\"Read data port: data=\" + h(data, 2) +\n                           \" rsar=\" + h(this.rsar - 1, 4) +\n                           \" rcnt=\" + h(this.rcnt, 4), LOG_NET);\n    this.rcnt--;\n\n    if(this.rsar >= (this.pstop << 8))\n    {\n        this.rsar += (this.pstart - this.pstop) << 8;\n    }\n\n    if(this.rcnt === 0)\n    {\n        this.do_interrupt(ENISR_RDC);\n    }\n\n    return data;\n};\n\nNe2k.prototype.data_port_read8 = function()\n{\n    return this.data_port_read16() & 0xFF;\n};\n\nNe2k.prototype.data_port_read16 = function()\n{\n    if(this.dcfg & 1)\n    {\n        return this.data_port_read() | this.data_port_read() << 8;\n    }\n    else\n    {\n        return this.data_port_read();\n    }\n};\n\nNe2k.prototype.data_port_read32 = function()\n{\n    return this.data_port_read() | this.data_port_read() << 8 |\n            this.data_port_read() << 16 | this.data_port_read() << 24;\n};\n\nNe2k.prototype.receive = function(data)\n{\n    // called from the adapter when data is received over the network\n\n    if(this.cr & 1)\n    {\n        // stop bit set\n        return;\n    }\n\n    this.bus.send(\"eth-receive-end\", [data.length]);\n\n    if(this.rxcr & 0x10)\n    {\n        // promiscuous\n    }\n    else if((this.rxcr & 4) &&\n            data[0] === 0xFF && data[1] === 0xFF && data[2] === 0xFF &&\n            data[3] === 0xFF && data[4] === 0xFF && data[5] === 0xFF)\n    {\n        // broadcast\n    }\n    else if((this.rxcr & 8) && (data[0] & 1) === 1)\n    {\n        // multicast\n        // XXX\n        return;\n    }\n    else if(data[0] === this.memory[0] && data[1] === this.memory[2] &&\n            data[2] === this.memory[4] && data[3] === this.memory[6] &&\n            data[4] === this.memory[8] && data[5] === this.memory[10])\n    {\n    }\n    else\n    {\n        return;\n    }\n\n    var packet_length = Math.max(60, data.length);\n\n    var offset = this.curpg << 8;\n    var total_length = packet_length + 4;\n    var data_start = offset + 4;\n    var next = this.curpg + 1 + (total_length >> 8);\n\n    var end = offset + total_length;\n\n    if(end > this.memory.length)\n    {\n        // shouldn't happen because at this size it can't cross a page\n        dbg_assert(data.length >= 60);\n\n        var cut = this.memory.length - data_start;\n        this.memory.set(data.subarray(0, cut), data_start);\n        this.memory.set(data.subarray(cut), START_RX_PAGE);\n        dbg_log(\"rcv cut=\" + h(cut), LOG_NET);\n    }\n    else\n    {\n        this.memory.set(data, data_start);\n\n        if(data.length < 60)\n        {\n            for(var i = data.length; i < 60; i++)\n            {\n                this.memory[data_start + i] = 0;\n            }\n        }\n    }\n\n    if(next >= this.pstop)\n    {\n        next += this.pstart - this.pstop;\n    }\n\n    // write packet header\n    this.memory[offset] = ENRSR_RXOK; // status\n    this.memory[offset + 1] = next;\n    this.memory[offset + 2] = total_length;\n    this.memory[offset + 3] = total_length >> 8;\n\n    this.curpg = next;\n\n    dbg_log(\"rcv offset=\" + h(offset) + \" len=\" + h(total_length) + \" next=\" + h(next), LOG_NET);\n\n    this.do_interrupt(ENISR_RX);\n};\n\nNe2k.prototype.get_page = function()\n{\n    return this.cr & 0xC0;\n};\n","\"use strict\";\n\n\n/**\n * @constructor\n * @param {CPU} cpu\n * @param {BusConnector} bus\n * @param {FS} filesystem\n */\nfunction VirtIO(cpu, bus, filesystem)\n{\n    // http://ozlabs.org/~rusty/virtio-spec/virtio-0.9.5.pdf\n\n    this.pci_space = [\n        0xf4, 0x1a, 0x09, 0x10, 0x07, 0x05, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x01, 0xa8, 0x00, 0x00, 0x00, 0x10, 0xbf, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x1a, 0x09, 0x00,\n        0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,\n    ];\n    this.pci_id = 0x06 << 3;\n    this.pci_bars = [\n        {\n            size: 256,\n        },\n    ];\n    this.name = \"virtio\";\n\n    var io = cpu.io;\n\n    io.register_read(0xA800, this,\n        function() {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        },\n        undefined,\n        function()\n        {\n            dbg_log(\"Read device features\", LOG_VIRTIO);\n            return 1;\n        }\n    );\n\n    io.register_write(0xA804, this, undefined, undefined, function(data)\n    {\n        // write guest features\n        dbg_log(\"Guest feature selection: \" + h(data, 8), LOG_VIRTIO);\n    });\n\n    io.register_write(0xA80E, this, undefined, function(data)\n    {\n        // rw queue select\n        dbg_log(\"Queue select: \" + h(data, 4), LOG_VIRTIO);\n        this.queue_select = data;\n    }, undefined);\n\n    io.register_read(0xA80C, this, undefined, function()\n    {\n        // read queue size\n        dbg_log(\"Read queue size\", LOG_VIRTIO);\n        return this.queue_size;\n    }, undefined);\n\n    io.register_read(0xA808, this, undefined, undefined, function()\n    {\n        // rw queue address\n        dbg_log(\"Read queue address\", LOG_VIRTIO);\n\n        if(this.queue_select === 0)\n        {\n            return this.queue_address;\n        }\n        else\n        {\n            // queue does not exist\n            return 0;\n        }\n    });\n\n    io.register_write(0xA808, this, undefined, undefined, function(data)\n    {\n        // rw queue address\n        dbg_log(\"Write queue address: \" + h(data, 8), LOG_VIRTIO);\n        this.queue_address = data;\n    });\n\n    io.register_write(0xA812, this, function(data)\n    {\n        dbg_log(\"Write device status: \" + h(data, 2), LOG_VIRTIO);\n\n        if(data === 0)\n        {\n            dbg_log(\"Reset\", LOG_VIRTIO);\n            this.reset();\n        }\n        else if(data & 0x80)\n        {\n            dbg_log(\"Warning: Device status failed\", LOG_VIRTIO);\n        }\n        else\n        {\n            dbg_log(((data & 1) ? \"ACKNOWLEDGE \" : \"\") +\n                    ((data & 2) ? \"DRIVER \" : \"\") +\n                    ((data & 4) ? \"DRIVER_OK\" : \"\"),\n                    LOG_VIRTIO);\n\n        }\n\n        this.device_status = data;\n    });\n\n    io.register_read(0xA812, this, function()\n    {\n        dbg_log(\"Read device status: \" + h(this.device_status), LOG_VIRTIO);\n        return this.device_status;\n    });\n\n    io.register_read(0xA813, this, function()\n    {\n        dbg_log(\"Read isr\", LOG_VIRTIO);\n\n        // reading resets the isr\n        var isr = this.isr;\n        this.isr = 0;\n        this.pci.lower_irq(this.pci_id);\n        return isr;\n    });\n\n    io.register_write(0xA810, this, undefined, function(data)\n    {\n        dbg_log(\"Write queue notify: \" + h(data, 4), LOG_VIRTIO);\n\n        // only queue 0 supported\n        dbg_assert(data === 0);\n\n        var queue_start = this.queue_address << 12;\n        var ring_start = queue_start + 16 * this.queue_size;\n        var ring_desc_start = ring_start + 4;\n\n        var //flags = this.cpu.read16(ring_start),\n            // index of the next free ring\n            idx = this.cpu.read16(ring_start + 2);\n\n        dbg_log(\"idx=\" + h(idx, 4), LOG_VIRTIO);\n        //dbg_assert(idx < this.queue_size);\n\n        var mask = this.queue_size - 1;\n        idx &= mask;\n\n        while(this.last_idx !== idx)\n        {\n            var desc_idx = this.cpu.read16(ring_desc_start + this.last_idx * 2);\n            this.handle_descriptor(desc_idx);\n\n            this.last_idx = this.last_idx + 1 & mask;\n        }\n    });\n\n    /** @const @type {CPU} */\n    this.cpu = cpu;\n\n    /** @const @type {PCI} */\n    this.pci = cpu.devices.pci;\n\n    /** @const @type {BusConnector} */\n    this.bus = bus;\n\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    // these should be stored per queue if there is more than one queue\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n\n    for(var i = 0; i < 128; i++)\n    {\n        io.register_read(0xA814 + i, this, function(port)\n        {\n            dbg_log(\"Read device \" + h(port), LOG_VIRTIO);\n\n            if(port < this.device.configspace.length)\n            {\n                return this.device.configspace[port];\n            }\n            else\n            {\n                return 0;\n            }\n        }.bind(this, i), undefined, undefined);\n\n        io.register_write(0xA814 + i, this, function(port, data)\n        {\n            dbg_log(\"Write device \" + h(port) + \": \" + h(data, 2), LOG_VIRTIO);\n        }.bind(this, i), undefined, undefined);\n    }\n\n    // should be generalized to support more devices than just the filesystem\n    this.device = new Virtio9p(filesystem, bus);\n    this.device.SendReply = this.device_reply.bind(this);\n\n    cpu.devices.pci.register_device(this);\n}\n\nVirtIO.prototype.get_state = function()\n{\n    var state = [];\n\n    state[0] = 0; // unused\n    state[1] = this.queue_select;\n    state[2] = this.device_status;\n    state[3] = this.isr;\n    state[4] = this.last_idx;\n    state[5] = this.queue_size;\n    state[6] = this.queue_address;\n    state[7] = this.device;\n\n    return state;\n};\n\nVirtIO.prototype.set_state = function(state)\n{\n    this.queue_select = state[1];\n    this.device_status = state[2];\n    this.isr = state[3];\n    this.last_idx = state[4];\n    this.queue_size = state[5];\n    this.queue_address = state[6];\n\n    this.device = state[7];\n    this.device.SendReply = this.device_reply.bind(this);\n};\n\nVirtIO.prototype.reset = function()\n{\n    this.queue_select = 0;\n    this.device_status = 0;\n    this.isr = 0;\n\n    this.last_idx = 0;\n    this.queue_size = 32;\n    this.queue_address = 0;\n};\n\nVirtIO.prototype.handle_descriptor = function(idx)\n{\n    var next = idx;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if(flags & VRING_DESC_F_WRITE)\n        {\n            break;\n        }\n\n        if(flags & VRING_DESC_F_INDIRECT) {\n            dbg_assert(false, \"unsupported\");\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            next = -1;\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    var infos = {\n        start: idx,\n        next: next,\n    };\n\n    this.device.ReceiveRequest(infos, function()\n    {\n        // return one byte\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Read more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        return this.cpu.read8(addr_low + pointer++);\n    }.bind(this));\n};\n\nVirtIO.prototype.device_reply = function(queueidx, infos)\n{\n    if(infos.next === -1)\n    {\n        dbg_log(\"Reply to invalid index\", LOG_VIRTIO);\n        return;\n    }\n\n    var mask = this.queue_size - 1;\n    var result_length = this.device.replybuffersize;\n\n    var next = infos.next;\n    var desc_start = this.queue_address << 12;\n\n    var buffer_idx = 0;\n    var buffers = [];\n\n    do\n    {\n        var addr = desc_start + next * 16;\n        var flags = this.cpu.read16(addr + 12);\n\n        if((flags & VRING_DESC_F_WRITE) === 0)\n        {\n            dbg_log(\"Bug: Readonly ring after writeonly ring\", LOG_VIRTIO);\n            break;\n        }\n\n        var addr_low = this.cpu.read32s(addr);\n        var addr_high = this.cpu.read32s(addr + 4);\n        var len = this.cpu.read32s(addr + 8) >>> 0;\n\n        buffers.push({\n            addr_low: addr_low,\n            addr_high: addr_high,\n            len: len,\n        });\n\n        dbg_log(\"descriptor: addr=\" + h(addr_high, 8) + \":\" + h(addr_low, 8) +\n                             \" len=\" + h(len, 8) + \" flags=\" + h(flags, 4) + \" next=\" + h(next, 4), LOG_VIRTIO);\n\n        if(flags & VRING_DESC_F_NEXT)\n        {\n            next = this.cpu.read16(addr + 14);\n            dbg_assert(next < this.queue_size);\n        }\n        else\n        {\n            break;\n        }\n    }\n    while(true);\n\n    var buffer_len = -1;\n    var pointer = 0;\n\n    for(var i = 0; i < result_length; i++)\n    {\n        var data = this.device.replybuffer[i];\n\n        if(pointer >= buffer_len)\n        {\n            if(buffer_idx === buffers.length)\n            {\n                dbg_log(\"Write more data than descriptor has\", LOG_VIRTIO);\n                return 0;\n            }\n\n            var buf = buffers[buffer_idx++];\n\n            addr_low = buf.addr_low;\n            buffer_len = buf.len;\n            pointer = 0;\n        }\n\n        this.cpu.write8(addr_low + pointer++, data);\n    }\n\n    var used_desc_start = (this.queue_address << 12) + 16 * this.queue_size + 4 + 2 * this.queue_size;\n    used_desc_start = used_desc_start + 4095 & ~4095;\n\n    var flags = this.cpu.read16(used_desc_start);\n    var used_idx = this.cpu.read16(used_desc_start + 2);\n    this.cpu.write16(used_desc_start + 2, used_idx + 1);\n\n    dbg_log(\"used descriptor: addr=\" + h(used_desc_start, 8) + \" flags=\" + h(flags, 4) + \" idx=\" + h(used_idx, 4), LOG_VIRTIO);\n\n    used_idx &= mask;\n    var used_desc_offset = used_desc_start + 4 + used_idx * 8;\n    this.cpu.write32(used_desc_offset, infos.start);\n    this.cpu.write32(used_desc_offset + 4, result_length);\n\n    this.isr |= 1;\n    this.pci.raise_irq(this.pci_id);\n};\n","\"use strict\";\n\n// jor1k compatibility\n\nvar VIRTIO_MAGIC_REG = 0x0;\nvar VIRTIO_VERSION_REG = 0x4;\nvar VIRTIO_DEVICE_REG = 0x8;\nvar VIRTIO_VENDOR_REG = 0xc;\nvar VIRTIO_HOSTFEATURES_REG = 0x10;\nvar VIRTIO_HOSTFEATURESSEL_REG = 0x14;\nvar VIRTIO_GUESTFEATURES_REG = 0x20;\nvar VIRTIO_GUESTFEATURESSEL_REG = 0x24;\nvar VIRTIO_GUEST_PAGE_SIZE_REG = 0x28;\nvar VIRTIO_QUEUESEL_REG = 0x30;\nvar VIRTIO_QUEUENUMMAX_REG = 0x34;\nvar VIRTIO_QUEUENUM_REG = 0x38;\nvar VIRTIO_QUEUEALIGN_REG = 0x3C;\nvar VIRTIO_QUEUEPFN_REG = 0x40;\nvar VIRTIO_QUEUENOTIFY_REG = 0x50;\nvar VIRTIO_INTERRUPTSTATUS_REG = 0x60;\nvar VIRTIO_INTERRUPTACK_REG = 0x64;\nvar VIRTIO_STATUS_REG = 0x70;\n\n/** @const */\nvar VRING_DESC_F_NEXT =      1; /* This marks a buffer as continuing via the next field. */\n/** @const */\nvar VRING_DESC_F_WRITE =     2; /* This marks a buffer as write-only (otherwise read-only). */\n/** @const */\nvar VRING_DESC_F_INDIRECT =  4; /* This means the buffer contains a list of buffer descriptors. */\n\n\nfunction hex8(n)\n{\n    return h(n);\n}\n\nvar message = {};\n\n/** @param {...string} log */\nmessage.Debug = function(log)\n{\n    dbg_log([].slice.apply(arguments).join(\" \"), LOG_9P);\n}\n\nmessage.Abort = function()\n{ \n    if(DEBUG)\n    {\n        throw \"abort\"; \n    }\n}\n\n\n// XXX: Should go through emulator interface\nvar LoadBinaryResource;\n\nif(typeof XMLHttpRequest !== \"undefined\")\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError) {\n        var req = new XMLHttpRequest();\n        req.open('GET', url, true);\n        req.responseType = \"arraybuffer\";\n        req.onreadystatechange = function () {\n            if (req.readyState != 4) {\n                return;\n            }\n            if ((req.status != 200) && (req.status != 0)) {\n                OnError(\"Error: Could not load file \" + url);\n                return;\n            }\n            var arrayBuffer = req.response;\n            if (arrayBuffer) {\n                OnSuccess(arrayBuffer);\n            } else {\n                OnError(\"Error: No data received from: \" + url);\n            }\n        };\n        /*\n            req.onload = function(e)\n            {\n                    var arrayBuffer = req.response;\n                    if (arrayBuffer) {\n                        OnLoadFunction(arrayBuffer);\n                    }\n            };\n        */\n        req.send(null);\n    }\n}\nelse\n{\n    LoadBinaryResource = function(url, OnSuccess, OnError)\n    {\n        //console.log(url);\n        require(\"fs\")[\"readFile\"](url, function(err, data)\n        {\n            if(err)\n            {\n                OnError(err);\n            }\n            else\n            {\n                OnSuccess(new Uint8Array(data).buffer);\n            }\n        });\n    }\n}\n","\"use strict\";\n\nvar Bus = {};\n\n/** @constructor */\nfunction BusConnector()\n{\n    this.listeners = {};\n    this.pair = undefined;\n};\n\n/**\n * @param {string} name\n * @param {function(*=)} fn\n * @param {Object} this_value\n */\nBusConnector.prototype.register = function(name, fn, this_value)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        listeners = this.listeners[name] = [];\n    }\n\n    listeners.push({\n        fn: fn,\n        this_value: this_value,\n    });\n};\n\n/**\n * Unregister one message with the given name and callback\n *\n * @param {string} name\n * @param {function()} fn\n */\nBusConnector.prototype.unregister = function(name, fn)\n{\n    var listeners = this.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    this.listeners[name] = listeners.filter(function(l)\n    {\n        return l.fn !== fn\n    });\n};\n\n/**\n * Send (\"emit\") a message\n *\n * @param {string} name\n * @param {*=} value\n * @param {*=} unused_transfer\n */\nBusConnector.prototype.send = function(name, value, unused_transfer)\n{\n    if(!this.pair)\n    {\n        return;\n    }\n\n    var listeners = this.pair.listeners[name];\n\n    if(listeners === undefined)\n    {\n        return;\n    }\n\n    for(var i = 0; i < listeners.length; i++)\n    {\n        var listener = listeners[i];\n        listener.fn.call(listener.this_value, value);\n    }\n};\n\n/**\n * Send a message, guaranteeing that it is received asynchronously\n *\n * @param {string} name\n * @param {Object=} value\n */\nBusConnector.prototype.send_async = function(name, value)\n{\n    dbg_assert(arguments.length === 1 || arguments.length === 2);\n\n    setTimeout(this.send.bind(this, name, value), 0);\n};\n\nBus.create = function()\n{\n    var c0 = new BusConnector();\n    var c1 = new BusConnector();\n\n    c0.pair = c1;\n    c1.pair = c0;\n\n    return [c0, c1];\n};\n\n","/**\n * This file contains functions to decode the modrm and sib bytes\n *\n * These functions return a virtual address\n *\n * @fileoverview .\n * @suppress {newCheckTypes}\n */\n\"use strict\";\n(function()\n{\n    CPU.prototype.modrm_table16 = Array(0xC0);\n    CPU.prototype.modrm_table32 = Array(0xC0);\n    CPU.prototype.sib_table = Array(0x100);\n    CPU.prototype.modrm_table16[0x00 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 0] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 1] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 2] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 3] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp] + cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 4] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_si]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_di]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ss() + ((cpu.reg16[reg_bp]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x00 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x40 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp8s() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table16[0x80 | 7] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + ((cpu.reg16[reg_bx]) + cpu.read_disp16() & 0xFFFF) | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 0] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 1] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 2] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 3] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 5] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 6] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi]) + cpu.read_disp32s() | 0;\n    };;\n    CPU.prototype.modrm_table32[0x00 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 7] = function(cpu)\n    {\n        return(cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi]) + cpu.read_disp32s() | 0;\n    };;\n    // special cases\n    CPU.prototype.modrm_table16[0x00 | 6] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp16() | 0;\n    }\n    CPU.prototype.modrm_table32[0x00 | 5] = function(cpu)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.read_disp32s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x00 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(false) | 0;\n    };\n    CPU.prototype.modrm_table32[0x40 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp8s() | 0;\n    };\n    CPU.prototype.modrm_table32[0x80 | 4] = function(cpu)\n    {\n        return cpu.sib_resolve(true) + cpu.read_disp32s() | 0;\n    };\n    for(var low = 0; low < 8; low++)\n    {\n        for(var high = 0; high < 3; high++)\n        {\n            var x = low | high << 6;\n            for(var i = 1; i < 8; i++)\n            {\n                CPU.prototype.modrm_table32[x | i << 3] = CPU.prototype.modrm_table32[x];\n                CPU.prototype.modrm_table16[x | i << 3] = CPU.prototype.modrm_table16[x];\n            }\n        }\n    }\n\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 0 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_eax] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 1 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ecx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 2 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 3 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebx] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 0] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 1] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 2] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 3] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 4] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 5] = function(cpu, mod)\n    {\n        return (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 6] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 4 << 3 | 7] = function(cpu, mod)\n    {\n        return cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 5 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_ebp] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 6 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_esi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };;\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x00 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi]) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x40 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 1) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0x80 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 2) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 0] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_eax] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 1] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ecx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 2] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 3] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_ebx] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 4] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ss() + cpu.reg32s[reg_esp] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 5] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + (mod ? cpu.get_seg_prefix_ss() + cpu.reg32s[reg_ebp] : cpu.get_seg_prefix_ds() + cpu.read_disp32s()) | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 6] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_esi] | 0;\n    };\n    CPU.prototype.sib_table[0xC0 | 7 << 3 | 7] = function(cpu, mod)\n    {\n        return(cpu.reg32s[reg_edi] << 3) + cpu.get_seg_prefix_ds() + cpu.reg32s[reg_edi] | 0;\n    };\n})();\n","\"use strict\";\n\n/*\n * string operations\n *\n *       cmp  si  di\n * movs   0    1   1/w    A4\n * cmps   1    1   1/r    A6\n * stos   0    0   1/w    AA\n * lods   0    1   0      AC\n * scas   1    0   1/r    AE\n * ins    0    0   1/w\n * outs   0    1   0\n */\n\n/** @const */\nvar MAX_COUNT_PER_CYCLE = 0x1000;\n\n\nfunction string_get_cycle_count(size, address)\n{\n    dbg_assert(size && size <= 4 && size >= -4);\n\n    if(size < 0)\n    {\n        return (address & 0xFFF) >> (-size >> 1);\n    }\n    else\n    {\n        return (~address & 0xFFF) >> size;\n    }\n}\n\nfunction string_get_cycle_count2(size, addr1, addr2)\n{\n    dbg_assert(arguments.length === 3);\n\n    return Math.min(\n            string_get_cycle_count(size, addr1),\n            string_get_cycle_count(size, addr2));\n}\n\n\nCPU.prototype.movsb = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.read8(phys_src));\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsw = function()\n{\n    var cpu = this;\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.read_aligned16(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.safe_read16(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nCPU.prototype.movsd = function()\n{\n    var cpu = this;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        // often used by memcpy, well worth optimizing\n        //   using cpu.mem32s.set\n        var ds = cpu.get_seg_prefix(reg_ds),\n            src = ds + cpu.get_reg_asize(reg_esi) | 0,\n            es = cpu.get_seg(reg_es),\n            dest = es + cpu.get_reg_asize(reg_edi) | 0,\n            count = cpu.get_reg_asize(reg_ecx) >>> 0;\n\n        if(!count)\n        {\n            return;\n        }\n\n        // must be page-aligned if cpu.paging is enabled\n        // and dword-aligned in general\n        var align_mask = cpu.paging ? 0xFFF : 3;\n\n        if((dest & align_mask) === 0 &&\n           (src & align_mask) === 0 &&\n           // If df is set, alignment works a different\n           // This should be unlikely\n           (cpu.flags & flag_direction) === 0)\n        {\n            var cont = false;\n            if(cpu.paging)\n            {\n                src = cpu.translate_address_read(src);\n                dest = cpu.translate_address_write(dest);\n\n                if(count > 0x400)\n                {\n                    count = 0x400;\n                    cont = true;\n                }\n            }\n\n            if(!cpu.io.in_mmap_range(src, count) &&\n                !cpu.io.in_mmap_range(dest, count))\n            {\n                var diff = count << 2;\n                cpu.add_reg_asize(reg_ecx, -count);\n                cpu.add_reg_asize(reg_edi, diff);\n                cpu.add_reg_asize(reg_esi, diff);\n\n                dest >>>= 2;\n                src >>>= 2;\n                cpu.write_blob32(cpu.mem32s.subarray(src, src + count), dest);\n\n                if(cont)\n                {\n                    cpu.instruction_pointer = cpu.previous_ip;\n                }\n\n                return;\n            }\n        }\n    }\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.read_aligned32(phys_src));\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.safe_read32s(src));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            this.instruction_pointer = this.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n};\n\nfunction cmpsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count2(size, src, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            data_src = cpu.read8(phys_src);\n            phys_dest += size;\n            phys_src += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_src = cpu.safe_read8(src);\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1) && !(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                data_src = cpu.read_aligned16(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                data_src = cpu.safe_read16(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        data_src = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction cmpsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var data_src, data_dest;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3) && !(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count2(size, src, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                data_src = cpu.read_aligned32(phys_src);\n                phys_dest += single_size;\n                phys_src += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                data_src = cpu.safe_read32s(src);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        data_src = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_edi, size);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction stosb(cpu)\n{\n    var data = cpu.reg8[reg_al];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, data);\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write8(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosw(cpu)\n{\n    var data = cpu.reg16[reg_ax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write16(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction stosd(cpu)\n{\n    var data = cpu.reg32s[reg_eax];\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, data);\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, data);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.safe_write32(dest, data);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsb(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.reg8[reg_al] = cpu.read8(phys_src);\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsw(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg16[reg_ax] = cpu.safe_read16(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg16[reg_ax] = cpu.safe_read16(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction lodsd(cpu)\n{\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        do\n        {\n            cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n            src += size;\n            cpu.add_reg_asize(reg_esi, size);\n            cont = cpu.decr_ecx_asize() !== 0;\n        }\n        while(cont && cycle_counter--);\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.reg32s[reg_eax] = cpu.safe_read32s(src);\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction scasb(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n    var data_dest;\n    var data_src = cpu.reg8[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_read(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            data_dest = cpu.read8(phys_dest);\n            phys_dest += size;\n            cont = --count !== 0 && (data_src === data_dest) === is_repz;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read8(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp8(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasw(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n    var data_dest;\n    var data_src = cpu.reg16[reg_al];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned16(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read16(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read16(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp16(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction scasd(cpu)\n{\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n    var data_dest;\n    var data_src = cpu.reg32s[reg_eax];\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var is_repz = (cpu.prefixes & PREFIX_MASK_REP) === PREFIX_REPZ;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_read(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                data_dest = cpu.read_aligned32(phys_dest);\n                phys_dest += single_size;\n                cont = --count !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                data_dest = cpu.safe_read32s(dest);\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0 && (data_src === data_dest) === is_repz;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        data_dest = cpu.safe_read32s(dest);\n        cpu.add_reg_asize(reg_edi, size);\n    }\n\n    cpu.cmp32(data_src, data_dest);\n    cpu.diverged();\n}\n\nfunction insb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_dest = cpu.translate_address_write(dest);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, dest);\n        }\n        do\n        {\n            cpu.write8(phys_dest, cpu.io.port_read8(port));\n            phys_dest += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_edi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 1);\n        cpu.safe_write8(dest, cpu.io.port_read8(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned16(phys_dest, cpu.io.port_read16(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write16(dest, cpu.io.port_read16(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 2);\n        cpu.safe_write16(dest, cpu.io.port_read16(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction insd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var dest = cpu.get_seg(reg_es) + cpu.get_reg_asize(reg_edi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(dest & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_dest = cpu.translate_address_write(dest) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, dest);\n            }\n            do\n            {\n                cpu.write_aligned32(phys_dest, cpu.io.port_read32(port));\n                phys_dest += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_edi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.safe_write32(dest, cpu.io.port_read32(port));\n                dest += size;\n                cpu.add_reg_asize(reg_edi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.writable_or_pagefault(dest, 4);\n        cpu.safe_write32(dest, cpu.io.port_read32(port));\n        cpu.add_reg_asize(reg_edi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsb(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -1 : 1;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        var phys_src = cpu.translate_address_read(src);\n        if(cpu.paging)\n        {\n            cycle_counter = string_get_cycle_count(size, src);\n        }\n        do\n        {\n            cpu.io.port_write8(port, cpu.read8(phys_src));\n            phys_src += size;\n            cont = --count !== 0;\n        }\n        while(cont && cycle_counter--);\n        var diff = size * (start_count - count) | 0;\n        cpu.add_reg_asize(reg_esi, diff);\n        cpu.set_ecx_asize(count);\n        cpu.timestamp_counter += start_count - count;\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write8(port, cpu.safe_read8(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsw(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -2 : 2;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 1))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 1;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write16(port, cpu.read_aligned16(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write16(port, cpu.safe_read16(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write16(port, cpu.safe_read16(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n\nfunction outsd(cpu)\n{\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n\n    var src = cpu.get_seg_prefix(reg_ds) + cpu.get_reg_asize(reg_esi) | 0;\n    var size = cpu.flags & flag_direction ? -4 : 4;\n\n    if(cpu.prefixes & PREFIX_MASK_REP)\n    {\n        var count = cpu.get_reg_asize(reg_ecx) >>> 0;\n        if(count === 0) return;\n        var cont = false;\n        var start_count = count;\n        var cycle_counter = MAX_COUNT_PER_CYCLE;\n        if(!(src & 3))\n        {\n            var single_size = size < 0 ? -1 : 1;\n            var phys_src = cpu.translate_address_read(src) >>> 2;\n            if(cpu.paging)\n            {\n                cycle_counter = string_get_cycle_count(size, src);\n            }\n            do\n            {\n                cpu.io.port_write32(port, cpu.read_aligned32(phys_src));\n                phys_src += single_size;\n                cont = --count !== 0;\n            }\n            while(cont && cycle_counter--);\n            var diff = size * (start_count - count) | 0;\n            cpu.add_reg_asize(reg_esi, diff);\n            cpu.set_ecx_asize(count);\n            cpu.timestamp_counter += start_count - count;\n        }\n        else\n        {\n            do\n            {\n                cpu.io.port_write32(port, cpu.safe_read32s(src));\n                src += size;\n                cpu.add_reg_asize(reg_esi, size);\n                cont = cpu.decr_ecx_asize() !== 0;\n            }\n            while(cont && cycle_counter--);\n        }\n        if(cont)\n        {\n            cpu.instruction_pointer = cpu.previous_ip;\n        }\n    }\n    else\n    {\n        cpu.io.port_write32(port, cpu.safe_read32s(src));\n        cpu.add_reg_asize(reg_esi, size);\n    }\n    cpu.diverged();\n}\n","/*\n * Arithmatic functions\n * This file contains:\n *\n * add, adc, sub, sbc, cmp\n * inc, dec\n * neg, not\n * imul, mul, idiv, div\n * xadd\n *\n * das, daa, aad, aam\n *\n * and, or, xor, test\n * shl, shr, sar, ror, rol, rcr, rcl\n * shld, shrd\n *\n * bts, btr, btc, bt\n * bsf, bsr\n *\n * popcnt\n*/\n\"use strict\";\n\nCPU.prototype.add8 = function(dest, src) { return this.add(dest, src, OPSIZE_8); }\nCPU.prototype.add16 = function(dest, src) { return this.add(dest, src, OPSIZE_16); }\nCPU.prototype.add32 = function(dest, src) { return this.add(dest, src, OPSIZE_32); }\n\nCPU.prototype.adc8 = function(dest, src) { return this.adc(dest, src, OPSIZE_8); }\nCPU.prototype.adc16 = function(dest, src) { return this.adc(dest, src, OPSIZE_16); }\nCPU.prototype.adc32 = function(dest, src) { return this.adc(dest, src, OPSIZE_32); }\n\nCPU.prototype.sub8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.sub16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.sub32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.cmp8 = function(dest, src) { return this.sub(dest, src, OPSIZE_8); }\nCPU.prototype.cmp16 = function(dest, src) { return this.sub(dest, src, OPSIZE_16); }\nCPU.prototype.cmp32 = function(dest, src) { return this.sub(dest, src, OPSIZE_32); }\n\nCPU.prototype.sbb8 = function(dest, src) { return this.sbb(dest, src, OPSIZE_8); }\nCPU.prototype.sbb16 = function(dest, src) { return this.sbb(dest, src, OPSIZE_16); }\nCPU.prototype.sbb32 = function(dest, src) { return this.sbb(dest, src, OPSIZE_32); }\n\nCPU.prototype.add = function(dest_operand, source_operand, op_size)\n{\n    //if(this.safe_read32s(this.instruction_pointer + 1) === 0 && this.safe_read32s(this.instruction_pointer + 5) === 0) throw \"0000000\";\n\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = dest_operand + source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.adc = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_add_result = this.last_result = (dest_operand + source_operand | 0) + cf | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sub = function(dest_operand, source_operand, op_size)\n{\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand | 0;\n\n    this.last_op_size = op_size;\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\nCPU.prototype.sbb = function(dest_operand, source_operand, op_size)\n{\n    var cf = this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = source_operand;\n    this.last_op1 = this.last_result = dest_operand - source_operand - cf | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all;\n\n    return this.last_result;\n}\n\n/*\n * inc and dec\n */\n\nCPU.prototype.inc8 = function(dest) { return this.inc(dest, OPSIZE_8); }\nCPU.prototype.inc16 = function(dest) { return this.inc(dest, OPSIZE_16); }\nCPU.prototype.inc32 = function(dest) { return this.inc(dest, OPSIZE_32); }\n\nCPU.prototype.dec8 = function(dest) { return this.dec(dest, OPSIZE_8); }\nCPU.prototype.dec16 = function(dest) { return this.dec(dest, OPSIZE_16); }\nCPU.prototype.dec32 = function(dest) { return this.dec(dest, OPSIZE_32); }\n\nCPU.prototype.inc = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_op1 = dest_operand;\n    this.last_op2 = 1;\n    this.last_add_result = this.last_result = dest_operand + 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\nCPU.prototype.dec = function(dest_operand, op_size)\n{\n    this.flags = (this.flags & ~1) | this.getcf();\n    this.last_add_result = dest_operand;\n    this.last_op2 = 1;\n    this.last_op1 = this.last_result = dest_operand - 1 | 0;\n    this.last_op_size = op_size;\n\n    this.flags_changed = flags_all & ~1;\n\n    return this.last_result;\n}\n\n\n/*\n * neg\n */\nCPU.prototype.neg8 = function(dest) { return this.neg(dest, OPSIZE_8); }\nCPU.prototype.neg16 = function(dest) { return this.neg(dest, OPSIZE_16); }\nCPU.prototype.neg32 = function(dest) { return this.neg(dest, OPSIZE_32); }\n\nCPU.prototype.neg = function(dest_operand, op_size)\n{\n    this.last_op1 = this.last_result = -dest_operand | 0;\n\n    this.flags_changed = flags_all;\n    this.last_add_result = 0;\n    this.last_op2 = dest_operand;\n    this.last_op_size = op_size;\n\n    return this.last_result;\n}\n\n\n/*\n * mul, imul, div, idiv\n *\n * Note: imul has some extra opcodes\n *       while other functions only allow\n *       ax * modrm\n */\n\nCPU.prototype.mul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result < 0x100)\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.imul8 = function(source_operand)\n{\n    var result = source_operand * this.reg8s[reg_al];\n\n    this.reg16[reg_ax] = result;\n    this.last_result = result & 0xFF;\n    this.last_op_size = OPSIZE_8;\n\n    if(result > 0x7F || result < -0x80)\n    {\n        this.flags = this.flags | 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags = this.flags & ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\nCPU.prototype.mul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16[reg_ax],\n        high_result = result >>> 16;\n    //console.log(h(a) + \" * \" + h(this.reg16[reg_ax]) + \" = \" + h(result));\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = high_result;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(high_result === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 1 argument\n * ax = ax * r/m\n */\nCPU.prototype.imul16 = function(source_operand)\n{\n    var result = source_operand * this.reg16s[reg_ax];\n\n    this.reg16[reg_ax] = result;\n    this.reg16[reg_dx] = result >> 16;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg16 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x8000 && operand1 >= -0x8000);\n    dbg_assert(operand2 < 0x8000 && operand2 >= -0x8000);\n\n    var result = operand1 * operand2;\n\n    this.last_result = result & 0xFFFF;\n    this.last_op_size = OPSIZE_16;\n\n    if(result > 0x7FFF || result < -0x8000)\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    else\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.do_mul32 = function(a, b)\n{\n    var a00 = a & 0xFFFF;\n    var a16 = a >>> 16;\n    var b00 = b & 0xFFFF;\n    var b16 = b >>> 16;\n    var low_result = a00 * b00;\n    var mid = (low_result >>> 16) + (a16 * b00 | 0) | 0;\n    var high_result = mid >>> 16;\n    mid = (mid & 0xFFFF) + (a00 * b16 | 0) | 0;\n    this.mul32_result[0] = (mid << 16) | low_result & 0xFFFF;\n    this.mul32_result[1] = ((mid >>> 16) + (a16 * b16 | 0) | 0) + high_result | 0;\n    return this.mul32_result;\n};\n\nCPU.prototype.do_imul32 = function(a, b)\n{\n    var is_neg = false;\n    if(a < 0) {\n        is_neg = true;\n        a = -a | 0;\n    }\n    if(b < 0) {\n        is_neg = !is_neg;\n        b = -b | 0;\n    }\n    var result = this.do_mul32(a, b);\n    if(is_neg) {\n        result[0] = -result[0] | 0;\n        result[1] = ~result[1] + !result[0] | 0;\n    }\n    return result;\n}\n\nCPU.prototype.mul32 = function(source_operand)\n{\n    var dest_operand = this.reg32s[reg_eax];\n\n    var result = this.do_mul32(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = result[0];\n    this.reg32s[reg_edx] = result[1];\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === 0)\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(h(source_operand >>> 0, 8) + \" * \" + h(dest_operand >>> 0, 8));\n    //console.log(\"= \" + h(this.reg32[reg_edx], 8) + \":\" + h(this.reg32[reg_eax], 8));\n}\n\nCPU.prototype.imul32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand = this.reg32s[reg_eax];\n\n    var result = this.do_imul32(dest_operand, source_operand);\n\n    this.reg32s[reg_eax] = result[0];\n    this.reg32s[reg_edx] = result[1];\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === (result[0] >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    //console.log(target_operand + \" * \" + source_operand);\n    //console.log(\"= \" + h(this.reg32[reg_edx]) + \" \" + h(this.reg32[reg_eax]));\n}\n\n/*\n * imul with 2 or 3 arguments\n * reg = reg * r/m\n * reg = imm * r/m\n */\nCPU.prototype.imul_reg32 = function(operand1, operand2)\n{\n    dbg_assert(operand1 < 0x80000000 && operand1 >= -0x80000000);\n    dbg_assert(operand2 < 0x80000000 && operand2 >= -0x80000000);\n\n    var result = this.do_imul32(operand1, operand2);\n\n    this.last_result = result[0];\n    this.last_op_size = OPSIZE_32;\n\n    if(result[1] === (result[0] >> 31))\n    {\n        this.flags &= ~1 & ~flag_overflow;\n    }\n    else\n    {\n        this.flags |= 1 | flag_overflow;\n    }\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return result[0];\n\n    //console.log(operand + \" * \" + source_operand);\n    //console.log(\"= \" + this.reg32[reg]);\n}\n\nCPU.prototype.div8 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x100);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x100)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv8 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x80 && source_operand < 0x80);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16s[reg_ax],\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x80 || result <= -0x81)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg8[reg_al] = result;\n        this.reg8[reg_ah] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.div16 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand < 0x10000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var\n        target_operand = (this.reg16[reg_ax] | this.reg16[reg_dx] << 16) >>> 0,\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x10000 || result < 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\nCPU.prototype.idiv16 = function(source_operand)\n{\n    dbg_assert(source_operand >= -0x8000 && source_operand < 0x8000);\n\n    if(source_operand === 0)\n    {\n        this.trigger_de();\n        return;\n    }\n\n    var target_operand = this.reg16[reg_ax] | (this.reg16[reg_dx] << 16),\n        result = target_operand / source_operand | 0;\n\n    if(result >= 0x8000 || result <= -0x8001)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg16[reg_ax] = result;\n        this.reg16[reg_dx] = target_operand % source_operand;\n    }\n}\n\n// If the dividend is too large, the division cannot be done precisely using\n// JavaScript's double floating point numbers. Run simple long divsion until\n// the dividend is small enough\nCPU.prototype.do_div32 = function(div_low, div_high, quot)\n{\n    if(div_high >= quot || quot === 0)\n    {\n        dbg_log(\"div32 #DE: \" + h(div_high, 8) + \":\" + h(div_low, 8) + \" div \" + h(quot, 8));\n        this.trigger_de();\n    }\n\n    var result = 0;\n\n    if(div_high > 0x100000)\n    {\n        var m = 0;\n        var i = 32;\n        var q = quot;\n        while(q > div_high)\n        {\n            q >>>= 1;\n            i--;\n        }\n        while(div_high > 0x100000)\n        {\n            if(div_high >= q)\n            {\n                div_high -= q;\n                var sub = quot << i >>> 0;\n                if(sub > div_low)\n                {\n                    div_high--;\n                }\n                div_low = div_low - sub >>> 0;\n                result |= 1 << i\n            }\n            i--;\n            q >>= 1;\n        }\n        result >>>= 0;\n    }\n\n    var div = div_low + div_high * 0x100000000;\n    var mod = div % quot;\n    result += div / quot | 0;\n\n    this.div32_result[0] = result;\n    this.div32_result[1] = mod;\n    return this.div32_result;\n}\n\n\nCPU.prototype.div32 = function(source_operand)\n{\n    dbg_assert(source_operand >= 0 && source_operand <= 0xffffffff);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32[reg_edx];\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    // XXX\n    dbg_assert(source_operand);\n    if(result >= 0x100000000)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\nCPU.prototype.idiv32 = function(source_operand)\n{\n    dbg_assert(source_operand < 0x80000000 && source_operand >= -0x80000000);\n\n    var dest_operand_low = this.reg32[reg_eax],\n        dest_operand_high = this.reg32s[reg_edx],\n        div_is_neg = false,\n        is_neg = false;\n\n    if(source_operand < 0)\n    {\n        is_neg = true;\n        source_operand = -source_operand;\n    }\n\n    if(dest_operand_high < 0)\n    {\n        div_is_neg = true;\n        is_neg = !is_neg;\n        dest_operand_low = -dest_operand_low >>> 0;\n        dest_operand_high = ~dest_operand_high + !dest_operand_low;\n    }\n\n    var result_mod = this.do_div32(dest_operand_low, dest_operand_high, source_operand);\n    var result = result_mod[0];\n    var mod = result_mod[1];\n\n    if(is_neg)\n    {\n        result = -result | 0;\n    }\n\n    if(div_is_neg)\n    {\n        mod = -mod | 0;\n    }\n\n    dbg_assert(source_operand);\n    if(result >= 0x80000000 || result <= -0x80000001)\n    {\n        dbg_log(\"div32 #DE: \" + h(dest_operand_high, 8) + \":\" + h(dest_operand_low, 8) + \" div \" + h(source_operand, 8));\n        dbg_log(\"-> \" + h(result));\n        this.trigger_de();\n    }\n    else\n    {\n        this.reg32s[reg_eax] = result;\n        this.reg32s[reg_edx] = mod;\n    }\n\n    //console.log(h(dest_operand_high) + \":\" + h(dest_operand_low) + \" / \" + h(source_operand));\n    //console.log(\"= \" + h(this.reg32[reg_eax]) + \" rem \" + h(this.reg32[reg_edx]));\n}\n\n\nCPU.prototype.xadd8 = function(source_operand, reg)\n{\n    var tmp = this.reg8[reg];\n\n    this.reg8[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_8);\n}\n\n\nCPU.prototype.xadd16 = function(source_operand, reg)\n{\n    var tmp = this.reg16[reg];\n\n    this.reg16[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_16);\n}\n\n\nCPU.prototype.xadd32 = function(source_operand, reg)\n{\n    var tmp = this.reg32s[reg];\n\n    this.reg32s[reg] = source_operand;\n\n    return this.add(source_operand, tmp, OPSIZE_32);\n}\n\n\nCPU.prototype.bcd_daa = function()\n{\n    //dbg_log(\"daa\");\n    // decimal adjust after addition\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf(),\n        old_af = this.getaf();\n\n    this.flags &= ~1 & ~flag_adjust\n\n    if((old_al & 0xF) > 9 || old_af)\n    {\n        this.reg8[reg_al] += 6;\n        this.flags |= flag_adjust;\n    }\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] += 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_das = function()\n{\n    //dbg_log(\"das\");\n    // decimal adjust after subtraction\n    var old_al = this.reg8[reg_al],\n        old_cf = this.getcf();\n\n    this.flags &= ~1;\n\n    if((old_al & 0xF) > 9 || this.getaf())\n    {\n        this.reg8[reg_al] -= 6;\n        this.flags |= flag_adjust;\n        this.flags = this.flags & ~1 | old_cf | (old_al < 6);\n    }\n    else\n    {\n        this.flags &= ~flag_adjust;\n    }\n\n    if(old_al > 0x99 || old_cf)\n    {\n        this.reg8[reg_al] -= 0x60;\n        this.flags |= 1;\n    }\n\n    this.last_result = this.reg8[reg_al];\n    this.last_op_size = OPSIZE_8;\n    this.last_op1 = this.last_op2 = 0;\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n}\n\nCPU.prototype.bcd_aam = function(imm8)\n{\n    //dbg_log(\"aam\");\n    // ascii adjust after multiplication\n\n    if(imm8 === 0)\n    {\n        this.trigger_de();\n    }\n    else\n    {\n        var temp = this.reg8[reg_al];\n        this.reg8[reg_ah] = temp / imm8;\n        this.reg8[reg_al] = temp % imm8;\n\n        this.last_result = this.reg8[reg_al];\n\n        this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n        this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n    }\n}\n\nCPU.prototype.bcd_aad = function(imm8)\n{\n    //dbg_log(\"aad\");\n    // ascii adjust before division\n\n    var result = this.reg8[reg_al] + this.reg8[reg_ah] * imm8;\n    this.last_result = result & 0xFF;\n    this.reg16[reg_ax] = this.last_result;\n    this.last_op_size = OPSIZE_8;\n\n    this.flags_changed = flags_all & ~1 & ~flag_adjust & ~flag_overflow;\n    this.flags &= ~1 & ~flag_adjust & ~flag_overflow;\n\n    if(result > 0xFFFF)\n    {\n        this.flags |= 1;\n    }\n}\n\nCPU.prototype.bcd_aaa = function()\n{\n    //dbg_log(\"aaa\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] += 6;\n        this.reg8[reg_ah] += 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n};\n\n\nCPU.prototype.bcd_aas = function()\n{\n    //dbg_log(\"aas\");\n    if((this.reg8[reg_al] & 0xF) > 9 || this.getaf())\n    {\n        this.reg16[reg_ax] -= 6;\n        this.reg8[reg_ah] -= 1;\n        this.flags |= flag_adjust | 1;\n    }\n    else\n    {\n        this.flags &= ~flag_adjust & ~1;\n    }\n    this.reg8[reg_al] &= 0xF;\n\n    this.flags_changed &= ~flag_adjust & ~1;\n}\n\n\n/*                     \\O\n * bitwise functions    |\\\n *                     / \\\n *\n * and, or, xor, test\n * shl, shr, sar, rol, ror, rcl, ror\n * shrd, shld\n *\n * bt, bts, btr, btc\n * bsf, bsr\n */\n\nCPU.prototype.and8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.and16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.and32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.test8 = function(dest, src) { return this.and(dest, src, OPSIZE_8); }\nCPU.prototype.test16 = function(dest, src) { return this.and(dest, src, OPSIZE_16); }\nCPU.prototype.test32 = function(dest, src) { return this.and(dest, src, OPSIZE_32); }\n\nCPU.prototype.or8 = function(dest, src) { return this.or(dest, src, OPSIZE_8); }\nCPU.prototype.or16 = function(dest, src) { return this.or(dest, src, OPSIZE_16); }\nCPU.prototype.or32 = function(dest, src) { return this.or(dest, src, OPSIZE_32); }\n\nCPU.prototype.xor8 = function(dest, src) { return this.xor(dest, src, OPSIZE_8); }\nCPU.prototype.xor16 = function(dest, src) { return this.xor(dest, src, OPSIZE_16); }\nCPU.prototype.xor32 = function(dest, src) { return this.xor(dest, src, OPSIZE_32); }\n\nCPU.prototype.and = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand & source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.or = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand | source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\nCPU.prototype.xor = function(dest_operand, source_operand, op_size)\n{\n    this.last_result = dest_operand ^ source_operand;\n\n    this.last_op_size = op_size;\n    this.flags &= ~1 & ~flag_overflow & ~flag_adjust;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow & ~flag_adjust;\n\n    return this.last_result;\n}\n\n\n/*\n * rotates and shifts\n */\n\nCPU.prototype.rol8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 7;\n\n    var result = dest_operand << count | dest_operand >> (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n    count &= 15;\n\n    var result = dest_operand << count | dest_operand >> (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rol32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | dest_operand >>> (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result & 1)\n                | (result << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 3 ^ result << 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1) | dest_operand >> (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 5 ^ result >> 4) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcl32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand << count | this.getcf() << (count - 1);\n\n    if(count > 1)\n    {\n        result |= dest_operand >>> (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= (this.flags << 11 ^ result >> 20) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror8 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 7;\n    var result = dest_operand >> count | dest_operand << (8 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 7 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror16 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    count &= 15;\n    var result = dest_operand >> count | dest_operand << (16 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 15 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.ror32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | dest_operand << (32 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 31 & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr8 = function(dest_operand, count)\n{\n    count %= 9;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (8 - count) | dest_operand << (9 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 8 & 1)\n                | (result << 4 ^ result << 5) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr16 = function(dest_operand, count)\n{\n    count %= 17;\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >> count | this.getcf() << (16 - count) | dest_operand << (17 - count);\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (result >> 16 & 1)\n                | (result >> 4 ^ result >> 3) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.rcr32 = function(dest_operand, count)\n{\n    if(!count)\n    {\n        return dest_operand;\n    }\n\n    var result = dest_operand >>> count | this.getcf() << (32 - count);\n\n    if(count > 1)\n    {\n        result |= dest_operand << (33 - count);\n    }\n\n    this.flags_changed &= ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (result >> 20 ^ result >> 19) & flag_overflow;\n\n    return result;\n}\n\nCPU.prototype.shl8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 8 & 1)\n                | (this.last_result << 3 ^ this.last_result << 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (this.last_result >> 16 & 1)\n                | (this.last_result >> 5 ^ this.last_result >> 4) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shl32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    // test this\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (32 - count) & 1);\n    this.flags |= ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 7 & 1) << 11 & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >> (count - 1) & 1)\n                | (dest_operand >> 4)  & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.shr32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow)\n                | (dest_operand >>> (count - 1) & 1)\n                | (dest_operand >> 20) & flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar8 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 8)\n    {\n        this.last_result = dest_operand << 24 >> count + 24;\n        // of is zero\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 24 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_8;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar16 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count < 16)\n    {\n        this.last_result = dest_operand << 16 >> count + 16;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << 16 >> 31;\n        this.flags = (this.flags & ~1 & ~flag_overflow) | (this.last_result & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n\n    return this.last_result;\n}\n\nCPU.prototype.sar32 = function(dest_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >> count;\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1 & ~flag_overflow) | (dest_operand >>> (count - 1) & 1);\n\n    return this.last_result;\n}\n\n\nCPU.prototype.shrd16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand >> count | source_operand << (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >> (count - 1) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand << (32 - count) | source_operand >> (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >> (count - 17) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 4 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shrd32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand >>> count | source_operand << (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (count - 1) & 1);\n    this.flags = (this.flags & ~flag_overflow) | ((this.last_result ^ dest_operand) >> 20 & flag_overflow);\n\n    return this.last_result;\n}\n\nCPU.prototype.shld16 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    if(count <= 16)\n    {\n        this.last_result = dest_operand << count | source_operand >>> (16 - count);\n        this.flags = (this.flags & ~1) | (dest_operand >>> (16 - count) & 1);\n    }\n    else\n    {\n        this.last_result = dest_operand >> (32 - count) | source_operand << (count - 16);\n        this.flags = (this.flags & ~1) | (source_operand >>> (32 - count) & 1);\n    }\n\n    this.last_op_size = OPSIZE_16;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 15 & 1)) << 11;\n\n    return this.last_result;\n}\n\nCPU.prototype.shld32 = function(dest_operand, source_operand, count)\n{\n    if(count === 0)\n    {\n        return dest_operand;\n    }\n\n    this.last_result = dest_operand << count | source_operand >>> (32 - count);\n\n    this.last_op_size = OPSIZE_32;\n    this.flags_changed = flags_all & ~1 & ~flag_overflow;\n    this.flags = (this.flags & ~1) | (dest_operand >>> (32 - count) & 1);\n\n    if(count === 1)\n    {\n        this.flags = (this.flags & ~flag_overflow) | ((this.flags & 1) ^ (this.last_result >> 31 & 1)) << 11;\n    }\n    else\n    {\n        this.flags &= ~flag_overflow;\n    }\n\n    return this.last_result;\n}\n\n\nCPU.prototype.bt_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base ^ 1 << bit_offset;\n}\n\nCPU.prototype.bts_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base | 1 << bit_offset;\n}\n\nCPU.prototype.btr_reg = function(bit_base, bit_offset)\n{\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    return bit_base & ~(1 << bit_offset);\n}\n\nCPU.prototype.bt_mem = function(virt_addr, bit_offset)\n{\n    var bit_base = this.safe_read8(virt_addr + (bit_offset >> 3) | 0);\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n}\n\nCPU.prototype.btc_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base ^ 1 << bit_offset);\n}\n\nCPU.prototype.btr_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base & ~(1 << bit_offset));\n}\n\nCPU.prototype.bts_mem = function(virt_addr, bit_offset)\n{\n    var phys_addr = this.translate_address_write(virt_addr + (bit_offset >> 3) | 0);\n    var bit_base = this.read8(phys_addr);\n\n    bit_offset &= 7;\n\n    this.flags = (this.flags & ~1) | (bit_base >> bit_offset & 1);\n    this.flags_changed &= ~1;\n\n    this.write8(phys_addr, bit_base | 1 << bit_offset);\n}\n\nCPU.prototype.bsf16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n\n        // not defined in the docs, but value doesn't change on my intel machine\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        // http://jsperf.com/lowest-bit-index\n        return this.last_result = v86util.int_log2(-bit_base & bit_base);\n    }\n}\n\nCPU.prototype.bsf32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2((-bit_base & bit_base) >>> 0);\n    }\n}\n\nCPU.prototype.bsr16 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_16;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n\n        return this.last_result = v86util.int_log2(bit_base);\n    }\n}\n\nCPU.prototype.bsr32 = function(old, bit_base)\n{\n    this.flags_changed = flags_all & ~flag_zero;\n    this.last_op_size = OPSIZE_32;\n\n    if(bit_base === 0)\n    {\n        this.flags |= flag_zero;\n        this.last_result = bit_base;\n        return old;\n    }\n    else\n    {\n        this.flags &= ~flag_zero;\n        return this.last_result = v86util.int_log2(bit_base >>> 0);\n    }\n}\n\nCPU.prototype.popcnt = function(v)\n{\n    this.flags_changed = 0;\n    this.flags &= ~flags_all;\n\n    if(v)\n    {\n        // http://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel\n        v = v - ((v >> 1) & 0x55555555);\n        v = (v & 0x33333333) + ((v >> 2) & 0x33333333);\n        return ((v + (v >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;\n    }\n    else\n    {\n        this.flags |= flag_zero;\n        return 0;\n    }\n};\n\nCPU.prototype.saturate_sw_to_ub = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v >>> 0;\n    if (ret >= 0x8000) {\n        ret = 0;\n    }\n    else if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sw_to_sb = function(v)\n{\n    dbg_assert((v & 0xFFFF0000) === 0);\n\n    let ret = v;\n\n    if (ret > 0xFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sw = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFF8000) {\n        ret = ret & 0xFFFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x8000;\n    }\n    else if (ret > 0x7FFF) {\n        ret = 0x7FFF;\n    }\n\n    dbg_assert((ret & 0xFFFF0000) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_sb = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFFFFFF80) {\n        ret = ret & 0xFF;\n    }\n    else if (ret > 0x7FFFFFFF) {\n        ret = 0x80;\n    }\n    else if (ret > 0x7F) {\n        ret = 0x7F;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_sd_to_ub = function(v)\n{\n    let ret = v | 0;\n\n    if (ret < 0) {\n        ret = 0;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\n\nCPU.prototype.saturate_ud_to_ub = function(v)\n{\n    let ret = v >>> 0;\n\n    if (ret > 0xFF) {\n        ret = 0xFF;\n    }\n\n    dbg_assert((ret & 0xFFFFFF00) === 0);\n    return ret;\n};\n\nCPU.prototype.saturate_uw = function(v)\n{\n    dbg_assert(v >= 0);\n    return v > 0xFFFF ? 0xFFFF : v;\n};\n","/*\n * Some miscellaneous instructions:\n *\n * jmpcc16, jmpcc32, jmp16\n * loop, loope, loopne, jcxz\n * test_cc\n *\n * mov, push, pop\n * pusha, popa\n * xchg, lss\n * lea\n * enter\n * bswap\n * fxsave, fxrstor\n */\n\"use strict\";\n\nCPU.prototype.jmpcc8 = function(condition)\n{\n    var imm8 = this.read_op8s();\n    if(condition)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8 | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.jmp_rel16 = function(rel16)\n{\n    var current_cs = this.get_seg(reg_cs);\n\n    // limit ip to 16 bit\n    // ugly\n    this.instruction_pointer -= current_cs;\n    this.instruction_pointer = (this.instruction_pointer + rel16) & 0xFFFF;\n    this.instruction_pointer = this.instruction_pointer + current_cs | 0;\n};\n\nCPU.prototype.jmpcc16 = function(condition)\n{\n    var imm16 = this.read_op16();\n    if(condition)\n    {\n        this.jmp_rel16(imm16);\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\n\nCPU.prototype.jmpcc32 = function(condition)\n{\n    var imm32s = this.read_op32s();\n    if(condition)\n    {\n        // don't change to `this.instruction_pointer += this.read_op32s()`,\n        //   since read_op32s modifies instruction_pointer\n\n        this.instruction_pointer = this.instruction_pointer + imm32s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\nCPU.prototype.cmovcc16 = function(condition)\n{\n    var data = this.read_e16();\n    if(condition)\n    {\n        this.write_g16(data);\n    }\n};\n\nCPU.prototype.cmovcc32 = function(condition)\n{\n    var data = this.read_e32s();\n    if(condition)\n    {\n        this.write_g32(data);\n    }\n};\n\nCPU.prototype.setcc = function(condition)\n{\n    this.set_e8(condition ? 1 : 0)\n};\n\nCPU.prototype.loopne = function(imm8s)\n{\n    if(this.decr_ecx_asize() && !this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loope = function(imm8s)\n{\n    if(this.decr_ecx_asize() && this.getzf())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.loop = function(imm8s)\n{\n    if(this.decr_ecx_asize())\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n}\n\nCPU.prototype.jcxz = function(imm8s)\n{\n    if(this.get_reg_asize(reg_ecx) === 0)\n    {\n        this.instruction_pointer = this.instruction_pointer + imm8s | 0;\n        this.branch_taken();\n    }\n    else\n    {\n        this.branch_not_taken();\n    }\n};\n\n/**\n * @return {number}\n * @const\n */\nCPU.prototype.getcf = function()\n{\n    if(this.flags_changed & 1)\n    {\n        return (this.last_op1 ^ (this.last_op1 ^ this.last_op2) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & 1;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getpf = function()\n{\n    if(this.flags_changed & flag_parity)\n    {\n        // inverted lookup table\n        return 0x9669 << 2 >> ((this.last_result ^ this.last_result >> 4) & 0xF) & flag_parity;\n    }\n    else\n    {\n        return this.flags & flag_parity;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getaf = function()\n{\n    if(this.flags_changed & flag_adjust)\n    {\n        return (this.last_op1 ^ this.last_op2 ^ this.last_add_result) & flag_adjust;\n    }\n    else\n    {\n        return this.flags & flag_adjust;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getzf = function()\n{\n    if(this.flags_changed & flag_zero)\n    {\n        return (~this.last_result & this.last_result - 1) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_zero;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getsf = function()\n{\n    if(this.flags_changed & flag_sign)\n    {\n        return this.last_result >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_sign;\n    }\n};\n\n/** @return {number} */\nCPU.prototype.getof = function()\n{\n    if(this.flags_changed & flag_overflow)\n    {\n        return ((this.last_op1 ^ this.last_add_result) & (this.last_op2 ^ this.last_add_result)) >>> this.last_op_size & 1;\n    }\n    else\n    {\n        return this.flags & flag_overflow;\n    }\n};\n\nCPU.prototype.test_o = CPU.prototype.getof;\nCPU.prototype.test_b = CPU.prototype.getcf;\nCPU.prototype.test_z = CPU.prototype.getzf;\nCPU.prototype.test_s = CPU.prototype.getsf;\nCPU.prototype.test_p = CPU.prototype.getpf;\n\nCPU.prototype.test_be = function()\n{\n    // Idea:\n    //    return this.last_op1 <= this.last_op2;\n    return this.getcf() || this.getzf();\n}\n\nCPU.prototype.test_l = function()\n{\n    // Idea:\n    //    return this.last_add_result < this.last_op2;\n    return !this.getsf() !== !this.getof();\n}\n\nCPU.prototype.test_le = function()\n{\n    // Idea:\n    //    return this.last_add_result <= this.last_op2;\n    return this.getzf() || !this.getsf() !== !this.getof();\n}\n\n\n\nCPU.prototype.push16 = function(imm16)\n{\n    var sp = this.get_stack_pointer(-2);\n\n    this.safe_write16(sp, imm16);\n    this.adjust_stack_reg(-2);\n}\n\nCPU.prototype.push32 = function(imm32)\n{\n    var sp = this.get_stack_pointer(-4);\n\n    this.safe_write32(sp, imm32);\n    this.adjust_stack_reg(-4);\n}\n\nCPU.prototype.pop16 = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read16(sp);\n\n    this.adjust_stack_reg(2);\n    return result;\n}\n\nCPU.prototype.pop32s = function()\n{\n    var sp = this.get_seg(reg_ss) + this.get_stack_reg() | 0,\n        result = this.safe_read32s(sp);\n\n    this.adjust_stack_reg(4);\n    return result;\n}\n\nCPU.prototype.pusha16 = function()\n{\n    var temp = this.reg16[reg_sp];\n\n    // make sure we don't get a pagefault after having\n    // pushed several registers already\n    this.writable_or_pagefault(this.get_stack_pointer(-16), 16);\n\n    this.push16(this.reg16[reg_ax]);\n    this.push16(this.reg16[reg_cx]);\n    this.push16(this.reg16[reg_dx]);\n    this.push16(this.reg16[reg_bx]);\n    this.push16(temp);\n    this.push16(this.reg16[reg_bp]);\n    this.push16(this.reg16[reg_si]);\n    this.push16(this.reg16[reg_di]);\n}\n\nCPU.prototype.pusha32 = function()\n{\n    var temp = this.reg32s[reg_esp];\n\n    this.writable_or_pagefault(this.get_stack_pointer(-32), 32);\n\n    this.push32(this.reg32s[reg_eax]);\n    this.push32(this.reg32s[reg_ecx]);\n    this.push32(this.reg32s[reg_edx]);\n    this.push32(this.reg32s[reg_ebx]);\n    this.push32(temp);\n    this.push32(this.reg32s[reg_ebp]);\n    this.push32(this.reg32s[reg_esi]);\n    this.push32(this.reg32s[reg_edi]);\n}\n\nCPU.prototype.popa16 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(15));\n\n    this.reg16[reg_di] = this.pop16();\n    this.reg16[reg_si] = this.pop16();\n    this.reg16[reg_bp] = this.pop16();\n    this.adjust_stack_reg(2);\n    this.reg16[reg_bx] = this.pop16();\n    this.reg16[reg_dx] = this.pop16();\n    this.reg16[reg_cx] = this.pop16();\n    this.reg16[reg_ax] = this.pop16();\n}\n\nCPU.prototype.popa32 = function()\n{\n    this.translate_address_read(this.get_stack_pointer(0));\n    this.translate_address_read(this.get_stack_pointer(31));\n\n    this.reg32s[reg_edi] = this.pop32s();\n    this.reg32s[reg_esi] = this.pop32s();\n    this.reg32s[reg_ebp] = this.pop32s();\n    this.adjust_stack_reg(4);\n    this.reg32s[reg_ebx] = this.pop32s();\n    this.reg32s[reg_edx] = this.pop32s();\n    this.reg32s[reg_ecx] = this.pop32s();\n    this.reg32s[reg_eax] = this.pop32s();\n}\n\nCPU.prototype.xchg8 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 1 & 0xC | modrm_byte >> 5 & 1,\n        tmp = this.reg8[mod];\n\n    this.reg8[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 2 & 14,\n        tmp = this.reg16[mod];\n\n    this.reg16[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg16r = function(operand)\n{\n    var temp = this.reg16[reg_ax];\n    this.reg16[reg_ax] = this.reg16[operand];\n    this.reg16[operand] = temp;\n}\n\nCPU.prototype.xchg32 = function(memory_data, modrm_byte)\n{\n    var mod = modrm_byte >> 3 & 7,\n        tmp = this.reg32s[mod];\n\n    this.reg32s[mod] = memory_data;\n\n    return tmp;\n}\n\nCPU.prototype.xchg32r = function(operand)\n{\n    var temp = this.reg32s[reg_eax];\n    this.reg32s[reg_eax] = this.reg32s[operand];\n    this.reg32s[operand] = temp;\n}\n\nCPU.prototype.lss16 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        // 0xc4c4 #ud (EMULATOR_BOP) is used by reactos and windows to exit vm86 mode\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read16(addr),\n        new_seg = this.safe_read16(addr + 2 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg16[this.modrm_byte >> 2 & 14] = new_reg;\n}\n\nCPU.prototype.lss32 = function(seg)\n{\n    if(this.modrm_byte >= 0xC0)\n    {\n        this.trigger_ud();\n    }\n\n    var addr = this.modrm_resolve(this.modrm_byte);\n\n    var new_reg = this.safe_read32s(addr),\n        new_seg = this.safe_read16(addr + 4 | 0);\n\n    this.switch_seg(seg, new_seg);\n\n    this.reg32s[this.modrm_byte >> 3 & 7] = new_reg;\n}\n\nCPU.prototype.enter16 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter16 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push16(this.reg16[reg_bp]);\n    var frame_temp = this.reg16[reg_sp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg16[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 2;\n            this.push16(this.safe_read16(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push16(frame_temp);\n    }\n    this.reg16[reg_bp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.enter32 = function(size, nesting_level)\n{\n    nesting_level &= 31;\n\n    if(nesting_level) dbg_log(\"enter32 stack=\" + (this.stack_size_32 ? 32 : 16) + \" size=\" + size + \" nest=\" + nesting_level, LOG_CPU);\n    this.push32(this.reg32s[reg_ebp]);\n    var frame_temp = this.reg32s[reg_esp];\n\n    if(nesting_level > 0)\n    {\n        var tmp_ebp = this.reg32s[reg_ebp];\n        for(var i = 1; i < nesting_level; i++)\n        {\n            tmp_ebp -= 4;\n            this.push32(this.safe_read32s(this.get_seg(reg_ss) + tmp_ebp | 0));\n        }\n        this.push32(frame_temp);\n    }\n    this.reg32s[reg_ebp] = frame_temp;\n    this.adjust_stack_reg(-size);\n};\n\nCPU.prototype.bswap = function(reg)\n{\n    var temp = this.reg32s[reg];\n\n    this.reg32s[reg] = temp >>> 24 | temp << 24 | (temp >> 8 & 0xFF00) | (temp << 8 & 0xFF0000);\n}\n\nCPU.prototype.fxsave = function(addr)\n{\n    this.writable_or_pagefault(addr, 512);\n\n    this.safe_write16(addr + 0 | 0, this.fpu.control_word);\n    this.safe_write16(addr + 2 | 0, this.fpu.load_status_word());\n    this.safe_write8( addr + 4 | 0, ~this.fpu.stack_empty & 0xFF);\n    this.safe_write16(addr + 6 | 0, this.fpu.fpu_opcode);\n    this.safe_write32(addr + 8 | 0, this.fpu.fpu_ip);\n    this.safe_write16(addr + 12 | 0, this.fpu.fpu_ip_selector);\n    this.safe_write32(addr + 16 | 0, this.fpu.fpu_dp);\n    this.safe_write16(addr + 20 | 0, this.fpu.fpu_dp_selector);\n\n    this.safe_write32(addr + 24 | 0, this.mxcsr);\n    this.safe_write32(addr + 28 | 0, MXCSR_MASK);\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.store_m80(addr + 32 + (i << 4) | 0, this.fpu.st[this.fpu.stack_ptr + i & 7]);\n    }\n\n    // If the OSFXSR bit in control register CR4 is not set, the FXSAVE\n    // instruction may not save these registers. This behavior is\n    // implementation dependent.\n    for(let i = 0; i < 8; i++)\n    {\n        this.safe_write32(addr + 160 + (i << 4) +  0 | 0, this.reg_xmm32s[i << 2 | 0]);\n        this.safe_write32(addr + 160 + (i << 4) +  4 | 0, this.reg_xmm32s[i << 2 | 1]);\n        this.safe_write32(addr + 160 + (i << 4) +  8 | 0, this.reg_xmm32s[i << 2 | 2]);\n        this.safe_write32(addr + 160 + (i << 4) + 12 | 0, this.reg_xmm32s[i << 2 | 3]);\n    }\n};\n\nCPU.prototype.fxrstor = function(addr)\n{\n    this.translate_address_read(addr | 0);\n    this.translate_address_read(addr + 511 | 0);\n\n    var new_mxcsr = this.safe_read32s(addr + 24 | 0);\n\n    if(new_mxcsr & ~MXCSR_MASK)\n    {\n        dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n        this.trigger_gp(0);\n    }\n\n    this.fpu.control_word = this.safe_read16(addr + 0 | 0);\n    this.fpu.set_status_word(this.safe_read16(addr + 2 | 0));\n    this.fpu.stack_empty = ~this.safe_read8(addr + 4 | 0) & 0xFF;\n    this.fpu.fpu_opcode = this.safe_read16(addr + 6 | 0);\n    this.fpu.fpu_ip = this.safe_read32s(addr + 8 | 0);\n    this.fpu.fpu_ip = this.safe_read16(addr + 12 | 0);\n    this.fpu.fpu_dp = this.safe_read32s(addr + 16 | 0);\n    this.fpu.fpu_dp_selector = this.safe_read16(addr + 20 | 0);\n\n    this.mxcsr = new_mxcsr;\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.fpu.st[this.fpu.stack_ptr + i & 7] = this.fpu.load_m80(addr + 32 + (i << 4) | 0);\n    }\n\n    for(let i = 0; i < 8; i++)\n    {\n        this.reg_xmm32s[i << 2 | 0] = this.safe_read32s(addr + 160 + (i << 4) +  0 | 0);\n        this.reg_xmm32s[i << 2 | 1] = this.safe_read32s(addr + 160 + (i << 4) +  4 | 0);\n        this.reg_xmm32s[i << 2 | 2] = this.safe_read32s(addr + 160 + (i << 4) +  8 | 0);\n        this.reg_xmm32s[i << 2 | 3] = this.safe_read32s(addr + 160 + (i << 4) + 12 | 0);\n    }\n};\n","\"use strict\";\n\nvar t = [];\nvar t16 = [];\nvar t32 = [];\n\nt[0x00] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x01] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x02] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.add8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.add16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x03] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.add32(cpu.read_g32s(), cpu.read_e32s())); };\nt[0x04] = cpu => { cpu.reg8[reg_al] = cpu.add8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x05] = cpu => { cpu.reg16[reg_ax] = cpu.add16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x05] = cpu => { cpu.reg32s[reg_eax] = cpu.add32(cpu.reg32s[reg_eax], cpu.read_op32s()); };\n\nt16[0x06] = cpu => { cpu.push16(cpu.sreg[reg_es]); };\nt32[0x06] = cpu => { cpu.push32(cpu.sreg[reg_es]); };\nt16[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x07] = cpu => {\n    cpu.switch_seg(reg_es, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x08] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.or8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.or16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x09] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.or32(cpu.read_write_e32(), cpu.read_g32s())); };\nt[0x0a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.or8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.or16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x0b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.or32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x0c] = cpu => { cpu.reg8[reg_al] = cpu.or8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x0d] = cpu => { cpu.reg16[reg_ax] = cpu.or16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x0d] = cpu => { cpu.reg32s[reg_eax] = cpu.or32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x0E] = cpu => { cpu.push16(cpu.sreg[reg_cs]); };\nt32[0x0E] = cpu => { cpu.push32(cpu.sreg[reg_cs]); };\nt16[0x0F] = cpu => {\n    cpu.table0F_16[cpu.read_op0F()](cpu);\n};\nt32[0x0F] = cpu => {\n    cpu.table0F_32[cpu.read_op0F()](cpu);\n};\n\nt[0x10] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x11] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x12] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.adc8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.adc16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x13] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.adc32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x14] = cpu => { cpu.reg8[reg_al] = cpu.adc8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x15] = cpu => { cpu.reg16[reg_ax] = cpu.adc16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x15] = cpu => { cpu.reg32s[reg_eax] = cpu.adc32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt16[0x16] = cpu => { cpu.push16(cpu.sreg[reg_ss]); };\nt32[0x16] = cpu => { cpu.push32(cpu.sreg[reg_ss]); };\nt16[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\nt32[0x17] = cpu => {\n    cpu.switch_seg(reg_ss, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n    cpu.clear_prefixes();\n    cpu.cycle_internal();\n};\n\nt[0x18] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x19] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x1a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sbb8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sbb16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x1b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sbb32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x1c] = cpu => { cpu.reg8[reg_al] = cpu.sbb8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x1d] = cpu => { cpu.reg16[reg_ax] = cpu.sbb16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x1d] = cpu => { cpu.reg32s[reg_eax] = cpu.sbb32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt16[0x1E] = cpu => { cpu.push16(cpu.sreg[reg_ds]); };\nt32[0x1E] = cpu => { cpu.push32(cpu.sreg[reg_ds]); };\nt16[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0x1F] = cpu => {\n    cpu.switch_seg(reg_ds, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0x20] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x21] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x22] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.and8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.and16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x23] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.and32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x24] = cpu => { cpu.reg8[reg_al] = cpu.and8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x25] = cpu => { cpu.reg16[reg_ax] = cpu.and16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x25] = cpu => { cpu.reg32s[reg_eax] = cpu.and32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\n\nt[0x26] = cpu => { cpu.segment_prefix_op(reg_es); };\nt[0x27] = cpu => { cpu.bcd_daa(); };\n\nt[0x28] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x29] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x2a] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.sub8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.sub16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x2b] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.sub32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x2c] = cpu => { cpu.reg8[reg_al] = cpu.sub8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x2d] = cpu => { cpu.reg16[reg_ax] = cpu.sub16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x2d] = cpu => { cpu.reg32s[reg_eax] = cpu.sub32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x2E] = cpu => { cpu.segment_prefix_op(reg_cs); };\nt[0x2F] = cpu => { cpu.bcd_das(); };\n\nt[0x30] = cpu => { cpu.read_modrm_byte(); cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_g8())); };\nt16[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_g16())); };\nt32[0x31] = cpu => { cpu.read_modrm_byte(); cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_g32s())); }\nt[0x32] = cpu => { cpu.read_modrm_byte(); cpu.write_g8(cpu.xor8(cpu.read_g8(), cpu.read_e8())); };\nt16[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g16(cpu.xor16(cpu.read_g16(), cpu.read_e16())); };\nt32[0x33] = cpu => { cpu.read_modrm_byte(); cpu.write_g32(cpu.xor32(cpu.read_g32s(), cpu.read_e32s())); }\nt[0x34] = cpu => { cpu.reg8[reg_al] = cpu.xor8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x35] = cpu => { cpu.reg16[reg_ax] = cpu.xor16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x35] = cpu => { cpu.reg32s[reg_eax] = cpu.xor32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x36] = cpu => { cpu.segment_prefix_op(reg_ss); };\nt[0x37] = cpu => { cpu.bcd_aaa(); };\n\nt[0x38] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_e8(), cpu.read_g8()); };\nt16[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_e16(), cpu.read_g16()); };\nt32[0x39] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_e32s(), cpu.read_g32s()); }\nt[0x3A] = cpu => { cpu.read_modrm_byte(); cpu.cmp8(cpu.read_g8(), cpu.read_e8()); };\nt16[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp16(cpu.read_g16(), cpu.read_e16()); };\nt32[0x3B] = cpu => { cpu.read_modrm_byte(); cpu.cmp32(cpu.read_g32s(), cpu.read_e32s()); }\nt[0x3C] = cpu => { cpu.cmp8(cpu.reg8[reg_al], cpu.read_op8()); };\nt16[0x3D] = cpu => { cpu.cmp16(cpu.reg16[reg_ax], cpu.read_op16()); };\nt32[0x3D] = cpu => { cpu.cmp32(cpu.reg32s[reg_eax], cpu.read_op32s()); }\n\nt[0x3E] = cpu => { cpu.segment_prefix_op(reg_ds); };\nt[0x3F] = cpu => { cpu.bcd_aas(); };\n\n\nt16[0x40] = cpu => { cpu.reg16[reg_ax] = cpu.inc16(cpu.reg16[reg_ax]); };\nt32[0x40] = cpu => { cpu.reg32s[reg_eax] = cpu.inc32(cpu.reg32s[reg_eax]); };\nt16[0x41] = cpu => { cpu.reg16[reg_cx] = cpu.inc16(cpu.reg16[reg_cx]); };\nt32[0x41] = cpu => { cpu.reg32s[reg_ecx] = cpu.inc32(cpu.reg32s[reg_ecx]); };\nt16[0x42] = cpu => { cpu.reg16[reg_dx] = cpu.inc16(cpu.reg16[reg_dx]); };\nt32[0x42] = cpu => { cpu.reg32s[reg_edx] = cpu.inc32(cpu.reg32s[reg_edx]); };\nt16[0x43] = cpu => { cpu.reg16[reg_bx] = cpu.inc16(cpu.reg16[reg_bx]); };\nt32[0x43] = cpu => { cpu.reg32s[reg_ebx] = cpu.inc32(cpu.reg32s[reg_ebx]); };\nt16[0x44] = cpu => { cpu.reg16[reg_sp] = cpu.inc16(cpu.reg16[reg_sp]); };\nt32[0x44] = cpu => { cpu.reg32s[reg_esp] = cpu.inc32(cpu.reg32s[reg_esp]); };\nt16[0x45] = cpu => { cpu.reg16[reg_bp] = cpu.inc16(cpu.reg16[reg_bp]); };\nt32[0x45] = cpu => { cpu.reg32s[reg_ebp] = cpu.inc32(cpu.reg32s[reg_ebp]); };\nt16[0x46] = cpu => { cpu.reg16[reg_si] = cpu.inc16(cpu.reg16[reg_si]); };\nt32[0x46] = cpu => { cpu.reg32s[reg_esi] = cpu.inc32(cpu.reg32s[reg_esi]); };\nt16[0x47] = cpu => { cpu.reg16[reg_di] = cpu.inc16(cpu.reg16[reg_di]); };\nt32[0x47] = cpu => { cpu.reg32s[reg_edi] = cpu.inc32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x48] = cpu => { cpu.reg16[reg_ax] = cpu.dec16(cpu.reg16[reg_ax]); };\nt32[0x48] = cpu => { cpu.reg32s[reg_eax] = cpu.dec32(cpu.reg32s[reg_eax]); };\nt16[0x49] = cpu => { cpu.reg16[reg_cx] = cpu.dec16(cpu.reg16[reg_cx]); };\nt32[0x49] = cpu => { cpu.reg32s[reg_ecx] = cpu.dec32(cpu.reg32s[reg_ecx]); };\nt16[0x4A] = cpu => { cpu.reg16[reg_dx] = cpu.dec16(cpu.reg16[reg_dx]); };\nt32[0x4A] = cpu => { cpu.reg32s[reg_edx] = cpu.dec32(cpu.reg32s[reg_edx]); };\nt16[0x4B] = cpu => { cpu.reg16[reg_bx] = cpu.dec16(cpu.reg16[reg_bx]); };\nt32[0x4B] = cpu => { cpu.reg32s[reg_ebx] = cpu.dec32(cpu.reg32s[reg_ebx]); };\nt16[0x4C] = cpu => { cpu.reg16[reg_sp] = cpu.dec16(cpu.reg16[reg_sp]); };\nt32[0x4C] = cpu => { cpu.reg32s[reg_esp] = cpu.dec32(cpu.reg32s[reg_esp]); };\nt16[0x4D] = cpu => { cpu.reg16[reg_bp] = cpu.dec16(cpu.reg16[reg_bp]); };\nt32[0x4D] = cpu => { cpu.reg32s[reg_ebp] = cpu.dec32(cpu.reg32s[reg_ebp]); };\nt16[0x4E] = cpu => { cpu.reg16[reg_si] = cpu.dec16(cpu.reg16[reg_si]); };\nt32[0x4E] = cpu => { cpu.reg32s[reg_esi] = cpu.dec32(cpu.reg32s[reg_esi]); };\nt16[0x4F] = cpu => { cpu.reg16[reg_di] = cpu.dec16(cpu.reg16[reg_di]); };\nt32[0x4F] = cpu => { cpu.reg32s[reg_edi] = cpu.dec32(cpu.reg32s[reg_edi]); };\n\n\nt16[0x50] = cpu => { cpu.push16(cpu.reg16[reg_ax]); };\nt32[0x50] = cpu => { cpu.push32(cpu.reg32s[reg_eax]); }\nt16[0x51] = cpu => { cpu.push16(cpu.reg16[reg_cx]); };\nt32[0x51] = cpu => { cpu.push32(cpu.reg32s[reg_ecx]); }\nt16[0x52] = cpu => { cpu.push16(cpu.reg16[reg_dx]); };\nt32[0x52] = cpu => { cpu.push32(cpu.reg32s[reg_edx]); }\nt16[0x53] = cpu => { cpu.push16(cpu.reg16[reg_bx]); };\nt32[0x53] = cpu => { cpu.push32(cpu.reg32s[reg_ebx]); }\nt16[0x54] = cpu => { cpu.push16(cpu.reg16[reg_sp]); };\nt32[0x54] = cpu => { cpu.push32(cpu.reg32s[reg_esp]); }\nt16[0x55] = cpu => { cpu.push16(cpu.reg16[reg_bp]); };\nt32[0x55] = cpu => { cpu.push32(cpu.reg32s[reg_ebp]); }\nt16[0x56] = cpu => { cpu.push16(cpu.reg16[reg_si]); };\nt32[0x56] = cpu => { cpu.push32(cpu.reg32s[reg_esi]); }\nt16[0x57] = cpu => { cpu.push16(cpu.reg16[reg_di]); };\nt32[0x57] = cpu => { cpu.push32(cpu.reg32s[reg_edi]); }\n\nt16[0x58] = cpu => { cpu.reg16[reg_ax] = cpu.pop16(); };\nt32[0x58] = cpu => { cpu.reg32s[reg_eax] = cpu.pop32s(); }\nt16[0x59] = cpu => { cpu.reg16[reg_cx] = cpu.pop16(); };\nt32[0x59] = cpu => { cpu.reg32s[reg_ecx] = cpu.pop32s(); }\nt16[0x5A] = cpu => { cpu.reg16[reg_dx] = cpu.pop16(); };\nt32[0x5A] = cpu => { cpu.reg32s[reg_edx] = cpu.pop32s(); }\nt16[0x5B] = cpu => { cpu.reg16[reg_bx] = cpu.pop16(); };\nt32[0x5B] = cpu => { cpu.reg32s[reg_ebx] = cpu.pop32s(); }\nt16[0x5C] = cpu => { cpu.reg16[reg_sp] = cpu.pop16(); };\nt32[0x5C] = cpu => { cpu.reg32s[reg_esp] = cpu.pop32s(); }\nt16[0x5D] = cpu => { cpu.reg16[reg_bp] = cpu.pop16(); };\nt32[0x5D] = cpu => { cpu.reg32s[reg_ebp] = cpu.pop32s(); }\nt16[0x5E] = cpu => { cpu.reg16[reg_si] = cpu.pop16(); };\nt32[0x5E] = cpu => { cpu.reg32s[reg_esi] = cpu.pop32s(); }\nt16[0x5F] = cpu => { cpu.reg16[reg_di] = cpu.pop16(); };\nt32[0x5F] = cpu => { cpu.reg32s[reg_edi] = cpu.pop32s(); }\n\n\nt16[0x60] = cpu => { cpu.pusha16(); };\nt32[0x60] = cpu => { cpu.pusha32(); };\nt16[0x61] = cpu => { cpu.popa16(); };\nt32[0x61] = cpu => { cpu.popa32(); };\n\nt[0x62] = cpu => {\n    // bound\n    dbg_log(\"Unimplemented BOUND instruction\", LOG_CPU);\n    dbg_assert(false);\n};\nt[0x63] = cpu => { cpu.read_modrm_byte();\n    // arpl\n    //dbg_log(\"arpl\", LOG_CPU);\n    if(cpu.protected_mode && !cpu.vm86_mode())\n    {\n        cpu.write_e16(cpu.arpl(cpu.read_write_e16(), cpu.modrm_byte >> 2 & 14));\n    }\n    else\n    {\n        dbg_log(\"arpl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n};\n\nt[0x64] = cpu => { cpu.segment_prefix_op(reg_fs); };\nt[0x65] = cpu => { cpu.segment_prefix_op(reg_gs); };\n\nt[0x66] = cpu => {\n    // Operand-size override prefix\n    cpu.prefixes |= PREFIX_MASK_OPSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0x67] = cpu => {\n    // Address-size override prefix\n    dbg_assert(cpu.is_asize_32() === cpu.is_32);\n\n    cpu.prefixes |= PREFIX_MASK_ADDRSIZE;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt16[0x68] = cpu => { cpu.push16(cpu.read_op16()); };\nt32[0x68] = cpu => { cpu.push32(cpu.read_op32s()); };\n\nt16[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op16() << 16 >> 16));\n};\nt32[0x69] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op32s()));\n};\n\nt16[0x6A] = cpu => { cpu.push16(cpu.read_op8s()); };\nt32[0x6A] = cpu => { cpu.push32(cpu.read_op8s()); };\n\nt16[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_e16s(), cpu.read_op8s()));\n};\nt32[0x6B] = cpu => { cpu.read_modrm_byte();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_e32s(), cpu.read_op8s()));\n};\n\nt[0x6C] = cpu => { insb(cpu); };\nt16[0x6D] = cpu => { insw(cpu); };\nt32[0x6D] = cpu => { insd(cpu); };\nt[0x6E] = cpu => { outsb(cpu); };\nt16[0x6F] = cpu => { outsw(cpu); };\nt32[0x6F] = cpu => { outsd(cpu); };\n\nt[0x70] = cpu => { cpu.jmpcc8( cpu.test_o()); };\nt[0x71] = cpu => { cpu.jmpcc8(!cpu.test_o()); };\nt[0x72] = cpu => { cpu.jmpcc8( cpu.test_b()); };\nt[0x73] = cpu => { cpu.jmpcc8(!cpu.test_b()); };\nt[0x74] = cpu => { cpu.jmpcc8( cpu.test_z()); };\nt[0x75] = cpu => { cpu.jmpcc8(!cpu.test_z()); };\nt[0x76] = cpu => { cpu.jmpcc8( cpu.test_be()); };\nt[0x77] = cpu => { cpu.jmpcc8(!cpu.test_be()); };\nt[0x78] = cpu => { cpu.jmpcc8( cpu.test_s()); };\nt[0x79] = cpu => { cpu.jmpcc8(!cpu.test_s()); };\nt[0x7A] = cpu => { cpu.jmpcc8( cpu.test_p()); };\nt[0x7B] = cpu => { cpu.jmpcc8(!cpu.test_p()); };\nt[0x7C] = cpu => { cpu.jmpcc8( cpu.test_l()); };\nt[0x7D] = cpu => { cpu.jmpcc8(!cpu.test_l()); };\nt[0x7E] = cpu => { cpu.jmpcc8( cpu.test_le()); };\nt[0x7F] = cpu => { cpu.jmpcc8(!cpu.test_le()); };\n\nt[0x80] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e8(cpu.add8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 1: cpu.write_e8(cpu. or8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 2: cpu.write_e8(cpu.adc8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 3: cpu.write_e8(cpu.sbb8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 4: cpu.write_e8(cpu.and8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 5: cpu.write_e8(cpu.sub8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 6: cpu.write_e8(cpu.xor8(cpu.read_write_e8(), cpu.read_op8())); break;\n        case 7: cpu.cmp8(cpu.read_e8(), cpu.read_op8()); break;\n    }\n};\nt16[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op16())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op16()); break;\n    }\n};\nt32[0x81] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op32s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op32s()); break;\n    }\n};\nt[0x82] = t[0x80]; // alias\nt16[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e16(cpu.add16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 1: cpu.write_e16(cpu. or16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 2: cpu.write_e16(cpu.adc16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 3: cpu.write_e16(cpu.sbb16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 4: cpu.write_e16(cpu.and16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 5: cpu.write_e16(cpu.sub16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 6: cpu.write_e16(cpu.xor16(cpu.read_write_e16(), cpu.read_op8s())); break;\n        case 7: cpu.cmp16(cpu.read_e16(), cpu.read_op8s()); break;\n    }\n};\nt32[0x83] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: cpu.write_e32(cpu.add32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 1: cpu.write_e32(cpu. or32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 2: cpu.write_e32(cpu.adc32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 3: cpu.write_e32(cpu.sbb32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 4: cpu.write_e32(cpu.and32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 5: cpu.write_e32(cpu.sub32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 6: cpu.write_e32(cpu.xor32(cpu.read_write_e32(), cpu.read_op8s())); break;\n        case 7: cpu.cmp32(cpu.read_e32s(), cpu.read_op8s()); break;\n    }\n};\n\nt[0x84] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e8(); cpu.test8(data, cpu.read_g8()); };\nt16[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e16(); cpu.test16(data, cpu.read_g16()); };\nt32[0x85] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_e32s(); cpu.test32(data, cpu.read_g32s()); }\n\n\nt[0x86] = cpu => { cpu.read_modrm_byte(); var data = cpu.read_write_e8(); cpu.write_e8(cpu.xchg8(data, cpu.modrm_byte)); };\nt16[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.xchg16(data, cpu.modrm_byte));\n};\nt32[0x87] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.xchg32(data, cpu.modrm_byte));\n};\n\nt[0x88] = cpu => { cpu.read_modrm_byte(); cpu.set_e8(cpu.read_g8()); };\nt16[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e16(cpu.read_g16()); };\nt32[0x89] = cpu => { cpu.read_modrm_byte(); cpu.set_e32(cpu.read_g32s()); }\n\nt[0x8A] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g8(data);\n};\nt16[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0x8B] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(data);\n};\n\nt16[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e16(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\nt32[0x8C] = cpu => { cpu.read_modrm_byte();\n    cpu.set_e32(cpu.sreg[cpu.modrm_byte >> 3 & 7]);\n};\n\nt16[0x8D] = cpu => { cpu.read_modrm_byte();\n    // lea\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    // override prefix, so modrm_resolve does not return the segment part\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg16[mod << 1] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\nt32[0x8D] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        dbg_log(\"lea #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    cpu.prefixes |= SEG_PREFIX_ZERO;\n    cpu.reg32s[mod] = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.prefixes = 0;\n};\n\nt[0x8E] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n    var data = cpu.read_e16();\n    cpu.switch_seg(mod, data);\n\n    if(mod === reg_ss)\n    {\n        // run next instruction, so no interrupts are handled\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n    }\n};\n\nt16[0x8F] = cpu => { cpu.read_modrm_byte();\n    // pop\n    var sp = cpu.safe_read16(cpu.get_stack_pointer(0));\n\n    cpu.adjust_stack_reg(2);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.adjust_stack_reg(-2);\n        cpu.safe_write16(addr, sp);\n        cpu.adjust_stack_reg(2);\n    } else {\n        cpu.write_reg_e16(sp);\n    }\n};\nt32[0x8F] = cpu => { cpu.read_modrm_byte();\n    var sp = cpu.safe_read32s(cpu.get_stack_pointer(0));\n\n    // change esp first, then resolve modrm address\n    cpu.adjust_stack_reg(4);\n\n    if(cpu.modrm_byte < 0xC0) {\n        var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n        // Before attempting a write that might cause a page fault,\n        // we must set esp to the old value. Fuck Intel.\n        cpu.adjust_stack_reg(-4);\n        cpu.safe_write32(addr, sp);\n        cpu.adjust_stack_reg(4);\n    } else {\n        cpu.write_reg_e32(sp);\n    }\n};\n\nt[0x90] = cpu => { };\nt16[0x91] = cpu => { cpu.xchg16r(reg_cx) };\nt32[0x91] = cpu => { cpu.xchg32r(reg_ecx) };\nt16[0x92] = cpu => { cpu.xchg16r(reg_dx) };\nt32[0x92] = cpu => { cpu.xchg32r(reg_edx) };\nt16[0x93] = cpu => { cpu.xchg16r(reg_bx) };\nt32[0x93] = cpu => { cpu.xchg32r(reg_ebx) };\nt16[0x94] = cpu => { cpu.xchg16r(reg_sp) };\nt32[0x94] = cpu => { cpu.xchg32r(reg_esp) };\nt16[0x95] = cpu => { cpu.xchg16r(reg_bp) };\nt32[0x95] = cpu => { cpu.xchg32r(reg_ebp) };\nt16[0x96] = cpu => { cpu.xchg16r(reg_si) };\nt32[0x96] = cpu => { cpu.xchg32r(reg_esi) };\nt16[0x97] = cpu => { cpu.xchg16r(reg_di) };\nt32[0x97] = cpu => { cpu.xchg32r(reg_edi) };\n\nt16[0x98] = cpu => { /* cbw */ cpu.reg16[reg_ax] = cpu.reg8s[reg_al]; };\nt32[0x98] = cpu => { /* cwde */ cpu.reg32s[reg_eax] = cpu.reg16s[reg_ax]; };\nt16[0x99] = cpu => { /* cwd */ cpu.reg16[reg_dx] = cpu.reg16s[reg_ax] >> 15; };\nt32[0x99] = cpu => { /* cdq */ cpu.reg32s[reg_edx] = cpu.reg32s[reg_eax] >> 31; };\n\nt16[0x9A] = cpu => {\n    // callf\n    var new_ip = cpu.read_op16();\n    var new_cs = cpu.read_disp16();\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0x9A] = cpu => {\n    var new_ip = cpu.read_op32s();\n    var new_cs = cpu.read_disp16();\n\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        if(new_ip & 0xFFFF0000)\n        {\n            throw cpu.debug.unimpl(\"#GP handler\");\n        }\n    }\n\n    cpu.far_jump(new_ip, new_cs, true);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0x9B] = cpu => {\n    // fwait: check for pending fpu exceptions\n    if((cpu.cr[0] & (CR0_MP | CR0_TS)) === (CR0_MP | CR0_TS))\n    {\n        // task switched and MP bit is set\n        cpu.trigger_nm();\n    }\n    else\n    {\n        if(cpu.fpu)\n        {\n            cpu.fpu.fwait();\n        }\n        else\n        {\n            // EM bit isn't checked\n            // If there's no FPU, do nothing\n        }\n    }\n};\nt16[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        cpu.push16(cpu.get_eflags());\n    }\n};\nt32[0x9C] = cpu => {\n    // pushf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        // trap to virtual 8086 monitor\n        dbg_assert(cpu.protected_mode);\n        dbg_log(\"pushf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        // vm and rf flag are cleared in image stored on the stack\n        cpu.push32(cpu.get_eflags() & 0x00FCFFFF);\n    }\n};\nt16[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags((cpu.flags & ~0xFFFF) | cpu.pop16());\n\n    if(cpu.flags & flag_trap)\n    {\n        // XXX: Problems with fdgame\n        //cpu.clear_prefixes();\n        //cpu.cycle_internal();\n        cpu.flags &= ~flag_trap;\n        //cpu.instruction_pointer = cpu.previous_ip;\n        //cpu.raise_exception(1);\n    }\n    else\n    {\n        cpu.handle_irqs();\n    }\n};\nt32[0x9D] = cpu => {\n    // popf\n    if((cpu.flags & flag_vm) && cpu.getiopl() < 3)\n    {\n        dbg_log(\"popf #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n\n    cpu.update_eflags(cpu.pop32s());\n    cpu.handle_irqs();\n};\nt[0x9E] = cpu => {\n    // sahf\n    cpu.flags = (cpu.flags & ~0xFF) | cpu.reg8[reg_ah];\n    cpu.flags = (cpu.flags & flags_mask) | flags_default;\n    cpu.flags_changed = 0;\n};\nt[0x9F] = cpu => {\n    // lahf\n    cpu.reg8[reg_ah] = cpu.get_eflags();\n};\n\nt[0xA0] = cpu => {\n    // mov\n    var data = cpu.safe_read8(cpu.read_moffs());\n    cpu.reg8[reg_al] = data;\n};\nt16[0xA1] = cpu => {\n    // mov\n    var data = cpu.safe_read16(cpu.read_moffs());\n    cpu.reg16[reg_ax] = data;\n};\nt32[0xA1] = cpu => {\n    var data = cpu.safe_read32s(cpu.read_moffs());\n    cpu.reg32s[reg_eax] = data;\n};\nt[0xA2] = cpu => {\n    // mov\n    cpu.safe_write8(cpu.read_moffs(), cpu.reg8[reg_al]);\n};\nt16[0xA3] = cpu => {\n    // mov\n    cpu.safe_write16(cpu.read_moffs(), cpu.reg16[reg_ax]);\n};\nt32[0xA3] = cpu => {\n    cpu.safe_write32(cpu.read_moffs(), cpu.reg32s[reg_eax]);\n};\n\nt[0xA4] = cpu => { cpu.movsb(); };\nt16[0xA5] = cpu => { cpu.movsw(); };\nt32[0xA5] = cpu => { cpu.movsd(); };\nt[0xA6] = cpu => { cmpsb(cpu); };\nt16[0xA7] = cpu => { cmpsw(cpu); };\nt32[0xA7] = cpu => { cmpsd(cpu); };\n\nt[0xA8] = cpu => {\n    cpu.test8(cpu.reg8[reg_al], cpu.read_op8());\n};\nt16[0xA9] = cpu => {\n    cpu.test16(cpu.reg16[reg_ax], cpu.read_op16());\n};\nt32[0xA9] = cpu => {\n    cpu.test32(cpu.reg32s[reg_eax], cpu.read_op32s());\n};\n\nt[0xAA] = cpu => { stosb(cpu); };\nt16[0xAB] = cpu => { stosw(cpu); };\nt32[0xAB] = cpu => { stosd(cpu); };\nt[0xAC] = cpu => { lodsb(cpu); };\nt16[0xAD] = cpu => { lodsw(cpu); };\nt32[0xAD] = cpu => { lodsd(cpu); };\nt[0xAE] = cpu => { scasb(cpu); };\nt16[0xAF] = cpu => { scasw(cpu); };\nt32[0xAF] = cpu => { scasd(cpu); };\n\n\nt[0xB0] = cpu => { cpu.reg8[reg_al] = cpu.read_op8(); };\nt[0xB1] = cpu => { cpu.reg8[reg_cl] = cpu.read_op8(); };\nt[0xB2] = cpu => { cpu.reg8[reg_dl] = cpu.read_op8(); };\nt[0xB3] = cpu => { cpu.reg8[reg_bl] = cpu.read_op8(); };\nt[0xB4] = cpu => { cpu.reg8[reg_ah] = cpu.read_op8(); };\nt[0xB5] = cpu => { cpu.reg8[reg_ch] = cpu.read_op8(); };\nt[0xB6] = cpu => { cpu.reg8[reg_dh] = cpu.read_op8(); };\nt[0xB7] = cpu => { cpu.reg8[reg_bh] = cpu.read_op8(); };\n\nt16[0xB8] = cpu => { cpu.reg16[reg_ax] = cpu.read_op16(); };\nt32[0xB8] = cpu => { cpu.reg32s[reg_eax] = cpu.read_op32s(); };\nt16[0xB9] = cpu => { cpu.reg16[reg_cx] = cpu.read_op16(); };\nt32[0xB9] = cpu => { cpu.reg32s[reg_ecx] = cpu.read_op32s(); };\nt16[0xBA] = cpu => { cpu.reg16[reg_dx] = cpu.read_op16(); };\nt32[0xBA] = cpu => { cpu.reg32s[reg_edx] = cpu.read_op32s(); };\nt16[0xBB] = cpu => { cpu.reg16[reg_bx] = cpu.read_op16(); };\nt32[0xBB] = cpu => { cpu.reg32s[reg_ebx] = cpu.read_op32s(); };\nt16[0xBC] = cpu => { cpu.reg16[reg_sp] = cpu.read_op16(); };\nt32[0xBC] = cpu => { cpu.reg32s[reg_esp] = cpu.read_op32s(); };\nt16[0xBD] = cpu => { cpu.reg16[reg_bp] = cpu.read_op16(); };\nt32[0xBD] = cpu => { cpu.reg32s[reg_ebp] = cpu.read_op32s(); };\nt16[0xBE] = cpu => { cpu.reg16[reg_si] = cpu.read_op16(); };\nt32[0xBE] = cpu => { cpu.reg32s[reg_esi] = cpu.read_op32s(); };\nt16[0xBF] = cpu => { cpu.reg16[reg_di] = cpu.read_op16(); };\nt32[0xBF] = cpu => { cpu.reg32s[reg_edi] = cpu.read_op32s(); };\n\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.read_op8() & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt16[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt32[0xC2] = cpu => {\n    // retn\n    var imm16 = cpu.read_op16();\n    var ip = cpu.pop32s();\n\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.adjust_stack_reg(imm16);\n    cpu.diverged();\n};\nt16[0xC3] = cpu => {\n    // retn\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + cpu.pop16() | 0;\n    cpu.diverged();\n};\nt32[0xC3] = cpu => {\n    // retn\n    var ip = cpu.pop32s();\n    dbg_assert(cpu.is_asize_32() || ip < 0x10000);\n    cpu.instruction_pointer = cpu.get_seg(reg_cs) + ip | 0;\n    cpu.diverged();\n};\n\nt16[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_es);\n};\nt32[0xC4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_es);\n};\nt16[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ds);\n};\nt32[0xC5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ds);\n};\n\nt[0xC6] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write8(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8());\n    } else {\n        cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_op8();\n    }\n}\nt16[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write16(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op16());\n    } else {\n        cpu.reg16[cpu.modrm_byte << 1 & 14] = cpu.read_op16();\n    }\n};\nt32[0xC7] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.safe_write32(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op32s());\n    } else {\n        cpu.reg32s[cpu.modrm_byte & 7] = cpu.read_op32s();\n    }\n}\n\nt16[0xC8] = cpu => { cpu.enter16(cpu.read_op16(), cpu.read_disp8()); };\nt32[0xC8] = cpu => { cpu.enter32(cpu.read_op16(), cpu.read_disp8()); };\nt16[0xC9] = cpu => {\n    // leave\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_bp = cpu.safe_read16(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 2 | 0);\n    cpu.reg16[reg_bp] = new_bp;\n};\nt32[0xC9] = cpu => {\n    var old_vbp = cpu.stack_size_32 ? cpu.reg32s[reg_ebp] : cpu.reg16[reg_bp];\n    var new_ebp = cpu.safe_read32s(cpu.get_seg(reg_ss) + old_vbp | 0);\n    cpu.set_stack_reg(old_vbp + 4 | 0);\n    cpu.reg32s[reg_ebp] = new_ebp;\n};\nt16[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, imm16);\n    cpu.diverged();\n};\nt32[0xCA] = cpu => {\n    // retf\n    var imm16 = cpu.read_op16();\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, imm16);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read16(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read16(cpu.get_stack_pointer(2));\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xCB] = cpu => {\n    // retf\n    var ip = cpu.safe_read32s(cpu.get_stack_pointer(0));\n    var cs = cpu.safe_read32s(cpu.get_stack_pointer(4)) & 0xFFFF;\n\n    cpu.far_return(ip, cs, 0);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xCC] = cpu => {\n    // INT3\n    // TODO: inhibit iopl checks\n    dbg_log(\"INT3\", LOG_CPU);\n    cpu.call_interrupt_vector(3, true, false);\n    cpu.diverged();\n};\nt[0xCD] = cpu => {\n    // INT\n    var imm8 = cpu.read_op8();\n    cpu.call_interrupt_vector(imm8, true, false);\n    cpu.diverged();\n};\nt[0xCE] = cpu => {\n    // INTO\n    dbg_log(\"INTO\", LOG_CPU);\n    if(cpu.getof())\n    {\n        // TODO: inhibit iopl checks\n        cpu.call_interrupt_vector(4, true, false);\n    }\n    cpu.diverged();\n};\n\nt16[0xCF] = cpu => {\n    // iret\n    cpu.iret16();\n    cpu.diverged();\n};\nt32[0xCF] = cpu => {\n    cpu.iret32();\n    cpu.diverged();\n};\n\nt[0xD0] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, 1); break;\n        case 1: result = cpu.ror8(op1, 1); break;\n        case 2: result = cpu.rcl8(op1, 1); break;\n        case 3: result = cpu.rcr8(op1, 1); break;\n        case 4: result = cpu.shl8(op1, 1); break;\n        case 5: result = cpu.shr8(op1, 1); break;\n        case 6: result = cpu.shl8(op1, 1); break;\n        case 7: result = cpu.sar8(op1, 1); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, 1); break;\n        case 1: result = cpu.ror16(op1, 1); break;\n        case 2: result = cpu.rcl16(op1, 1); break;\n        case 3: result = cpu.rcr16(op1, 1); break;\n        case 4: result = cpu.shl16(op1, 1); break;\n        case 5: result = cpu.shr16(op1, 1); break;\n        case 6: result = cpu.shl16(op1, 1); break;\n        case 7: result = cpu.sar16(op1, 1); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD1] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, 1); break;\n        case 1: result = cpu.ror32(op1, 1); break;\n        case 2: result = cpu.rcl32(op1, 1); break;\n        case 3: result = cpu.rcr32(op1, 1); break;\n        case 4: result = cpu.shl32(op1, 1); break;\n        case 5: result = cpu.shr32(op1, 1); break;\n        case 6: result = cpu.shl32(op1, 1); break;\n        case 7: result = cpu.sar32(op1, 1); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD2] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e8();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol8(op1, op2); break;\n        case 1: result = cpu.ror8(op1, op2); break;\n        case 2: result = cpu.rcl8(op1, op2); break;\n        case 3: result = cpu.rcr8(op1, op2); break;\n        case 4: result = cpu.shl8(op1, op2); break;\n        case 5: result = cpu.shr8(op1, op2); break;\n        case 6: result = cpu.shl8(op1, op2); break;\n        case 7: result = cpu.sar8(op1, op2); break;\n    }\n    cpu.write_e8(result);\n};\nt16[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e16();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol16(op1, op2); break;\n        case 1: result = cpu.ror16(op1, op2); break;\n        case 2: result = cpu.rcl16(op1, op2); break;\n        case 3: result = cpu.rcr16(op1, op2); break;\n        case 4: result = cpu.shl16(op1, op2); break;\n        case 5: result = cpu.shr16(op1, op2); break;\n        case 6: result = cpu.shl16(op1, op2); break;\n        case 7: result = cpu.sar16(op1, op2); break;\n    }\n    cpu.write_e16(result);\n};\nt32[0xD3] = cpu => { cpu.read_modrm_byte();\n    var op1 = cpu.read_write_e32();\n    var op2 = cpu.reg8[reg_cl] & 31;\n    var result = 0;\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: result = cpu.rol32(op1, op2); break;\n        case 1: result = cpu.ror32(op1, op2); break;\n        case 2: result = cpu.rcl32(op1, op2); break;\n        case 3: result = cpu.rcr32(op1, op2); break;\n        case 4: result = cpu.shl32(op1, op2); break;\n        case 5: result = cpu.shr32(op1, op2); break;\n        case 6: result = cpu.shl32(op1, op2); break;\n        case 7: result = cpu.sar32(op1, op2); break;\n    }\n    cpu.write_e32(result);\n};\n\nt[0xD4] = cpu => {\n    cpu.bcd_aam(cpu.read_op8());\n};\nt[0xD5] = cpu => {\n    cpu.bcd_aad(cpu.read_op8());\n};\n\nt[0xD6] = cpu => {\n    // salc\n    cpu.reg8[reg_al] = -cpu.getcf();\n};\nt[0xD7] = cpu => {\n    // xlat\n    if(cpu.is_asize_32())\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + cpu.reg32s[reg_ebx] + cpu.reg8[reg_al] | 0);\n    }\n    else\n    {\n        cpu.reg8[reg_al] = cpu.safe_read8(cpu.get_seg_prefix(reg_ds) + (cpu.reg16[reg_bx] + cpu.reg8[reg_al] & 0xFFFF) | 0);\n    }\n};\n\nt[0xD8] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D8_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D8_reg(cpu.modrm_byte);\n};\nt[0xD9] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_D9_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_D9_reg(cpu.modrm_byte);\n};\nt[0xDA] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DA_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DA_reg(cpu.modrm_byte);\n};\nt[0xDB] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DB_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DB_reg(cpu.modrm_byte);\n};\nt[0xDC] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DC_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DC_reg(cpu.modrm_byte);\n};\nt[0xDD] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DD_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DD_reg(cpu.modrm_byte);\n};\nt[0xDE] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DE_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DE_reg(cpu.modrm_byte);\n};\nt[0xDF] = cpu => { cpu.read_modrm_byte();\n    cpu.task_switch_test();\n    if(cpu.modrm_byte < 0xC0)\n        cpu.fpu.op_DF_mem(cpu.modrm_byte, cpu.modrm_resolve(cpu.modrm_byte));\n    else\n        cpu.fpu.op_DF_reg(cpu.modrm_byte);\n};\n\nt[0xE0] = cpu => { cpu.loopne(cpu.read_op8s()); };\nt[0xE1] = cpu => { cpu.loope(cpu.read_op8s()); };\nt[0xE2] = cpu => { cpu.loop(cpu.read_op8s()); };\nt[0xE3] = cpu => { cpu.jcxz(cpu.read_op8s()); };\n\nt[0xE4] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xE5] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xE6] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xE7] = cpu => {\n    var port = cpu.read_op8();\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt16[0xE8] = cpu => {\n    // call\n    var imm16 = cpu.read_op16();\n    cpu.push16(cpu.get_real_eip());\n\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE8] = cpu => {\n    // call\n    var imm32s = cpu.read_op32s();\n    cpu.push32(cpu.get_real_eip());\n\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xE9] = cpu => {\n    // jmp\n    var imm16 = cpu.read_op16();\n    cpu.jmp_rel16(imm16);\n    cpu.diverged();\n};\nt32[0xE9] = cpu => {\n    // jmp\n    var imm32s = cpu.read_op32s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm32s | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt16[0xEA] = cpu => {\n    // jmpf\n    var ip = cpu.read_op16();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt32[0xEA] = cpu => {\n    // jmpf\n    var new_ip = cpu.read_op32s();\n    var cs = cpu.read_disp16();\n    cpu.far_jump(new_ip, cs, false);\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\nt[0xEB] = cpu => {\n    // jmp near\n    var imm8 = cpu.read_op8s();\n    cpu.instruction_pointer = cpu.instruction_pointer + imm8 | 0;\n    dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n    cpu.diverged();\n};\n\nt[0xEC] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.reg8[reg_al] = cpu.io.port_read8(port);\n    cpu.diverged();\n};\nt16[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.reg16[reg_ax] = cpu.io.port_read16(port);\n    cpu.diverged();\n};\nt32[0xED] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.reg32s[reg_eax] = cpu.io.port_read32(port);\n    cpu.diverged();\n};\nt[0xEE] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 1);\n    cpu.io.port_write8(port, cpu.reg8[reg_al]);\n    cpu.diverged();\n};\nt16[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 2);\n    cpu.io.port_write16(port, cpu.reg16[reg_ax]);\n    cpu.diverged();\n};\nt32[0xEF] = cpu => {\n    var port = cpu.reg16[reg_dx];\n    cpu.test_privileges_for_io(port, 4);\n    cpu.io.port_write32(port, cpu.reg32s[reg_eax]);\n    cpu.diverged();\n};\n\nt[0xF0] = cpu => {\n    // lock\n    //dbg_log(\"lock\", LOG_CPU);\n\n    // TODO\n    // This triggers UD when used with\n    // some instructions that don't write to memory\n    cpu.run_prefix_instruction();\n};\nt[0xF1] = cpu => {\n    // INT1\n    // https://code.google.com/p/corkami/wiki/x86oddities#IceBP\n    throw cpu.debug.unimpl(\"int1 instruction\");\n};\n\nt[0xF2] = cpu => {\n    // repnz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPNZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\nt[0xF3] = cpu => {\n    // repz\n    dbg_assert((cpu.prefixes & PREFIX_MASK_REP) === 0);\n    cpu.prefixes |= PREFIX_REPZ;\n    cpu.run_prefix_instruction();\n    cpu.prefixes = 0;\n};\n\nt[0xF4] = cpu => {\n    cpu.hlt_op();\n};\n\nt[0xF5] = cpu => {\n    // cmc\n    cpu.flags = (cpu.flags | 1) ^ cpu.getcf();\n    cpu.flags_changed &= ~1;\n};\n\nt[0xF6] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 1:\n            var data = cpu.read_e8(); cpu.test8(data, cpu.read_op8());\n            break;\n        case 2:\n            var data = cpu.read_write_e8(); cpu.write_e8(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e8(); cpu.write_e8(cpu.neg8(data));\n            break;\n        case 4:\n            var data = cpu.read_e8(); cpu.mul8(data);\n            break;\n        case 5:\n            var data = cpu.read_e8s(); cpu.imul8(data);\n            break;\n        case 6:\n            var data = cpu.read_e8(); cpu.div8(data);\n            break;\n        case 7:\n            var data = cpu.read_e8s(); cpu.idiv8(data);\n            break;\n    }\n};\n\nt16[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 1:\n            var data = cpu.read_e16(); cpu.test16(data, cpu.read_op16());\n            break;\n        case 2:\n            var data = cpu.read_write_e16(); cpu.write_e16(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.neg16(data));\n            break;\n        case 4:\n            var data = cpu.read_e16(); cpu.mul16(data);\n            break;\n        case 5:\n            var data = cpu.read_e16s(); cpu.imul16(data);\n            break;\n        case 6:\n            var data = cpu.read_e16(); cpu.div16(data);\n            break;\n        case 7:\n            var data = cpu.read_e16s(); cpu.idiv16(data);\n            break;\n    }\n};\nt32[0xF7] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 1:\n            var data = cpu.read_e32s(); cpu.test32(data, cpu.read_op32s());\n            break;\n        case 2:\n            var data = cpu.read_write_e32(); cpu.write_e32(~(data));\n            break;\n        case 3:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.neg32(data));\n            break;\n        case 4:\n            var data = cpu.read_e32(); cpu.mul32(data);\n            break;\n        case 5:\n            var data = cpu.read_e32s(); cpu.imul32(data);\n            break;\n        case 6:\n            var data = cpu.read_e32(); cpu.div32(data);\n            break;\n        case 7:\n            var data = cpu.read_e32s(); cpu.idiv32(data);\n            break;\n    }\n};\n\nt[0xF8] = cpu => {\n    // clc\n    cpu.flags &= ~flag_carry;\n    cpu.flags_changed &= ~1;\n};\nt[0xF9] = cpu => {\n    // stc\n    cpu.flags |= flag_carry;\n    cpu.flags_changed &= ~1;\n};\n\nt[0xFA] = cpu => {\n    // cli\n    //dbg_log(\"interrupts off\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags &= ~flag_interrupt;\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags &= ~flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"cli #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n};\nt[0xFB] = cpu => {\n    // sti\n    //dbg_log(\"interrupts on\");\n\n    if(!cpu.protected_mode || ((cpu.flags & flag_vm) ?\n            cpu.getiopl() === 3 : cpu.getiopl() >= cpu.cpl))\n    {\n        cpu.flags |= flag_interrupt;\n\n        cpu.clear_prefixes();\n        cpu.cycle_internal();\n\n        cpu.handle_irqs();\n    }\n    else\n    {\n        //if(cpu.getiopl() < 3 && (cpu.flags & flag_vip) === 0 && ((cpu.flags & flag_vm) ?\n        //    (cpu.cr[4] & CR4_VME) :\n        //    (cpu.cpl === 3 && (cpu.cr[4] & CR4_PVI))))\n        //{\n        //    cpu.flags |= flag_vif;\n        //}\n        //else\n        {\n            dbg_log(\"sti #gp\", LOG_CPU);\n            cpu.trigger_gp(0);\n        }\n    }\n\n};\n\nt[0xFC] = cpu => {\n    // cld\n    cpu.flags &= ~flag_direction;\n};\nt[0xFD] = cpu => {\n    // std\n    cpu.flags |= flag_direction;\n};\n\nt[0xFE] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte & 56;\n\n    if(mod === 0)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.inc8(data));\n    }\n    else if(mod === 8)\n    {\n        var data = cpu.read_write_e8(); cpu.write_e8(cpu.dec8(data));\n    }\n    else\n    {\n        cpu.todo();\n    }\n};\nt16[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.inc16(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e16(); cpu.write_e16(cpu.dec16(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e16();\n            cpu.push16(cpu.get_real_eip());\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e16();\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read16(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 2 | 0);\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || cpu.get_real_eip() < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // 6, push\n            var data = cpu.read_e16();\n            cpu.push16(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\nt32[0xFF] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.inc32(data));\n            break;\n        case 1:\n            var data = cpu.read_write_e32(); cpu.write_e32(cpu.dec32(data));\n            break;\n        case 2:\n            // 2, call near\n            var data = cpu.read_e32s();\n            cpu.push32(cpu.get_real_eip());\n\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 3:\n            // 3, callf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"callf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, true);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 4:\n            // 4, jmp near\n            var data = cpu.read_e32s();\n            dbg_assert(cpu.is_asize_32() || data < 0x10000);\n            cpu.instruction_pointer = cpu.get_seg(reg_cs) + data | 0;\n            cpu.diverged();\n            break;\n        case 5:\n            // 5, jmpf\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                dbg_log(\"jmpf #ud\", LOG_CPU);\n                cpu.trigger_ud();\n                dbg_assert(false, \"unreachable\");\n            }\n\n            var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n            var new_ip = cpu.safe_read32s(virt_addr);\n            var new_cs = cpu.safe_read16(virt_addr + 4 | 0);\n\n            if(!cpu.protected_mode || cpu.vm86_mode())\n            {\n                if(new_ip & 0xFFFF0000)\n                {\n                    throw cpu.debug.unimpl(\"#GP handler\");\n                }\n            }\n\n            cpu.far_jump(new_ip, new_cs, false);\n            dbg_assert(cpu.is_asize_32() || new_ip < 0x10000);\n            cpu.diverged();\n            break;\n        case 6:\n            // push\n            var data = cpu.read_e32s();\n            cpu.push32(data);\n            break;\n        case 7:\n            cpu.todo();\n    }\n};\n\nvar table16 = [];\nvar table32 = [];\nCPU.prototype.table16 = table16;\nCPU.prototype.table32 = table32;\n\nfor(var i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table16[i] = table32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table16[i] = t16[i];\n        table32[i] = t32[i];\n    }\n}\n\nt = [];\nt16 = [];\nt32 = [];\n\n// 0F ops start here\n\nt[0x00] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        // No GP, UD is correct here\n        dbg_log(\"0f 00 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            // sldt\n            cpu.set_e16(cpu.sreg[reg_ldtr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 1:\n            // str\n            cpu.set_e16(cpu.sreg[reg_tr]);\n            if(cpu.is_osize_32() && cpu.modrm_byte >= 0xC0)\n            {\n                cpu.reg32s[cpu.modrm_byte & 7] &= 0xFFFF;\n            }\n            break;\n        case 2:\n            // lldt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_ldt(data);\n            break;\n        case 3:\n            // ltr\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var data = cpu.read_e16();\n            cpu.load_tr(data);\n            break;\n        case 4:\n            cpu.verr(cpu.read_e16());\n            break;\n        case 5:\n            cpu.verw(cpu.read_e16());\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0x01] = cpu => { cpu.read_modrm_byte();\n    var mod = cpu.modrm_byte >> 3 & 7;\n\n    if(mod === 4)\n    {\n        // smsw\n        if(cpu.modrm_byte >= 0xC0 && cpu.is_osize_32())\n        {\n            cpu.set_e32(cpu.cr[0]);\n        }\n        else\n        {\n            cpu.set_e16(cpu.cr[0]);\n        }\n        return;\n    }\n    else if(mod === 6)\n    {\n        // lmsw\n        if(cpu.cpl)\n        {\n            cpu.trigger_gp(0);\n        }\n\n        var cr0 = cpu.read_e16();\n\n        cr0 = (cpu.cr[0] & ~0xF) | (cr0 & 0xF);\n\n        if(cpu.protected_mode)\n        {\n            // lmsw cannot be used to switch back\n            cr0 |= CR0_PE;\n        }\n\n        cpu.set_cr0(cr0);\n        return;\n    }\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        // only memory\n        dbg_log(\"0f 01 #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n\n    switch(mod)\n    {\n        case 0:\n            // sgdt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.gdtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.gdtr_offset & mask);\n            break;\n        case 1:\n            // sidt\n            cpu.writable_or_pagefault(addr, 6);\n            cpu.safe_write16(addr, cpu.idtr_size);\n            var mask = cpu.is_osize_32() ? -1 : 0x00FFFFFF;\n            cpu.safe_write32(addr + 2, cpu.idtr_offset & mask);\n            break;\n        case 2:\n            // lgdt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.gdtr_size = size;\n            cpu.gdtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.gdtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"gdt at \" + h(cpu.gdtr_offset) + \", \" + cpu.gdtr_size + \" bytes\", LOG_CPU);\n            //cpu.debug.dump_state();\n            //cpu.debug.dump_regs_short();\n            //cpu.debug.dump_gdt_ldt();\n            break;\n        case 3:\n            // lidt\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            var size = cpu.safe_read16(addr);\n            var offset = cpu.safe_read32s(addr + 2);\n\n            cpu.idtr_size = size;\n            cpu.idtr_offset = offset;\n\n            if(!cpu.is_osize_32())\n            {\n                cpu.idtr_offset &= 0xFFFFFF;\n            }\n\n            //dbg_log(\"[\" + h(cpu.instruction_pointer) + \"] idt at \" +\n            //        h(idtr_offset) + \", \" + cpu.idtr_size + \" bytes \" + h(addr), LOG_CPU);\n            break;\n        case 7:\n            // flush translation lookaside buffer\n            if(cpu.cpl)\n            {\n                cpu.trigger_gp(0);\n            }\n\n            cpu.invlpg(addr);\n            break;\n        default:\n            dbg_log(mod);\n            cpu.todo();\n    }\n};\n\nt16[0x02] = cpu => { cpu.read_modrm_byte();\n    // lar\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lar(data, cpu.read_g16()));\n};\nt32[0x02] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lar #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lar(data, cpu.read_g32s()));\n};\n\nt16[0x03] = cpu => { cpu.read_modrm_byte();\n    // lsl\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.lsl(data, cpu.read_g16()));\n};\nt32[0x03] = cpu => { cpu.read_modrm_byte();\n    if(!cpu.protected_mode || cpu.vm86_mode())\n    {\n        dbg_log(\"lsl #ud\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g32(cpu.lsl(data, cpu.read_g32s()));\n};\n\nt[0x04] = cpu => { cpu.undefined_instruction(); };\nt[0x05] = cpu => { cpu.undefined_instruction(); };\n\nt[0x06] = cpu => {\n    // clts\n    if(cpu.cpl)\n    {\n        dbg_log(\"clts #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    else\n    {\n        //dbg_log(\"clts\", LOG_CPU);\n        cpu.cr[0] &= ~CR0_TS;\n    }\n};\n\nt[0x07] = cpu => { cpu.undefined_instruction(); };\nt[0x08] = cpu => {\n    // invd\n    cpu.todo();\n};\n\nt[0x09] = cpu => {\n    if(cpu.cpl)\n    {\n        dbg_log(\"wbinvd #gp\", LOG_CPU);\n        cpu.trigger_gp(0);\n    }\n    // wbinvd\n};\n\n\nt[0x0A] = cpu => { cpu.undefined_instruction(); };\nt[0x0B] = cpu => {\n    // UD2\n    cpu.trigger_ud();\n};\nt[0x0C] = cpu => { cpu.undefined_instruction(); };\n\nt[0x0D] = cpu => {\n    // nop\n    cpu.todo();\n};\n\nt[0x0E] = cpu => { cpu.undefined_instruction(); };\nt[0x0F] = cpu => { cpu.undefined_instruction(); };\n\nt[0x10] = cpu => { cpu.unimplemented_sse(); };\nt[0x11] = cpu => { cpu.unimplemented_sse(); };\nt[0x12] = cpu => {\n    // movlpd xmm, xmm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem64s();\n    cpu.write_xmm64(data[0], data[1]);\n};\nt[0x13] = cpu => {\n    // movlpd xmm/m64, xmm\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0x14] = cpu => { cpu.unimplemented_sse(); };\nt[0x15] = cpu => { cpu.unimplemented_sse(); };\nt[0x16] = cpu => { cpu.unimplemented_sse(); };\nt[0x17] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x18] = cpu => { cpu.read_modrm_byte();\n    // prefetch\n    // nop for us\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\nt[0x19] = cpu => { cpu.unimplemented_sse(); };\nt[0x1A] = cpu => { cpu.unimplemented_sse(); };\nt[0x1B] = cpu => { cpu.unimplemented_sse(); };\nt[0x1C] = cpu => { cpu.unimplemented_sse(); };\nt[0x1D] = cpu => { cpu.unimplemented_sse(); };\nt[0x1E] = cpu => { cpu.unimplemented_sse(); };\nt[0x1F] = cpu => { cpu.read_modrm_byte()\n    // multi-byte nop\n    if(cpu.modrm_byte < 0xC0)\n        cpu.modrm_resolve(cpu.modrm_byte);\n};\n\n\nt[0x20] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" read\", LOG_CPU);\n\n    // mov addr, cr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.write_reg_e32(cpu.cr[0]);\n            break;\n        case 2:\n            //dbg_log(\"read cr2 at \" + h(cpu.instruction_pointer >>> 0, 8));\n            cpu.write_reg_e32(cpu.cr[2]);\n            break;\n        case 3:\n            //dbg_log(\"read cr3 (\" + h(cpu.cr[3], 8) + \")\", LOG_CPU);\n            cpu.write_reg_e32(cpu.cr[3]);\n            break;\n        case 4:\n            cpu.write_reg_e32(cpu.cr[4]);\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\n\nt[0x21] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.reg32s[cpu.modrm_byte & 7] = cpu.dreg[dreg];\n\n    //dbg_log(\"read dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x22] = cpu => { cpu.read_modrm_byte();\n\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var data = cpu.read_reg_e32s();\n    //dbg_log(\"cr\" + (cpu.modrm_byte >> 3 & 7) + \" written: \" + h(data >>> 0, 8), LOG_CPU);\n\n    // mov cr, addr\n    // mod = which control register\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0:\n            cpu.set_cr0(data);\n            //dbg_log(\"cr0=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 2:\n            cpu.cr[2] = data;\n            //dbg_log(\"cr2=\" + h(data >>> 0), LOG_CPU);\n            break;\n\n        case 3:\n            //dbg_log(\"cr3=\" + h(data >>> 0), LOG_CPU);\n            data &= ~0b111111100111;\n            dbg_assert((data & 0xFFF) === 0, \"TODO\");\n            cpu.cr[3] = data;\n            cpu.clear_tlb();\n\n            //dump_page_directory();\n            //dbg_log(\"page directory loaded at \" + h(cpu.cr[3] >>> 0, 8), LOG_CPU);\n            break;\n\n        case 4:\n            cpu.set_cr4(data);\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            dbg_assert(false);\n            cpu.trigger_ud();\n    }\n};\nt[0x23] = cpu => { cpu.read_modrm_byte();\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var dreg = cpu.modrm_byte >> 3 & 7;\n    if((cpu.cr[4] & CR4_DE) && (dreg === 4 || dreg === 5))\n    {\n        dbg_log(\"#ud mov dreg 4/5 with cr4.DE set\", LOG_CPU);\n        cpu.trigger_ud();\n    }\n\n    // high two bits of modrm are ignored\n    cpu.dreg[dreg] = cpu.read_reg_e32s();\n\n    //dbg_log(\"write dr\" + dreg + \": \" + h(cpu.dreg[dreg] >>> 0), LOG_CPU);\n};\n\nt[0x24] = cpu => { cpu.undefined_instruction(); };\nt[0x25] = cpu => { cpu.undefined_instruction(); };\nt[0x26] = cpu => { cpu.undefined_instruction(); };\nt[0x27] = cpu => { cpu.undefined_instruction(); };\n\nt[0x28] = cpu => {\n    // movaps xmm, xmm/m128\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    let data = cpu.read_xmm_mem128s();\n    cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n};\nt[0x29] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // movapd xmm/m128, xmm\n        // (note: same as below, see google.com/?q=MOVAPD+vs+MOVAPS)\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movaps xmm/m128, xmm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === 0);\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n};\nt[0x2A] = cpu => { cpu.unimplemented_sse(); };\nt[0x2B] = cpu => { cpu.unimplemented_sse(); };\nt[0x2C] = cpu => { cpu.unimplemented_sse(); };\nt[0x2D] = cpu => { cpu.unimplemented_sse(); };\nt[0x2E] = cpu => { cpu.unimplemented_sse(); };\nt[0x2F] = cpu => { cpu.unimplemented_sse(); };\n\n// wrmsr\nt[0x30] = cpu => {\n    // wrmsr - write maschine specific register\n\n    if(cpu.cpl)\n    {\n        // cpl > 0 or vm86 mode (vm86 mode is always runs with cpl=3)\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n    var low = cpu.reg32s[reg_eax];\n    var high = cpu.reg32s[reg_edx];\n\n    if(index !== IA32_SYSENTER_ESP)\n    {\n        dbg_log(\"wrmsr ecx=\" + h(index >>> 0, 8) +\n                    \" data=\" + h(high >>> 0, 8) + \":\" + h(low >>> 0, 8), LOG_CPU);\n    }\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            cpu.sysenter_cs = low & 0xFFFF;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            cpu.sysenter_eip = low;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            cpu.sysenter_esp = low;\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            dbg_assert(high === 0, \"Changing APIC address (high 32 bits) not supported\");\n            let address = low & ~(IA32_APIC_BASE_BSP | IA32_APIC_BASE_EXTD | IA32_APIC_BASE_EN);\n            dbg_assert((address >>> 0) === APIC_ADDRESS, \"Changing APIC address not supported\");\n            dbg_assert((low & IA32_APIC_BASE_EXTD) === 0, \"x2apic not supported\");\n            cpu.apic_enabled = (low & IA32_APIC_BASE_EN) === IA32_APIC_BASE_EN;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var new_tick = (low >>> 0) + 0x100000000 * (high >>> 0);\n            cpu.tsc_offset = v86.microtick() - new_tick / TSC_RATE;\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            dbg_log(\"IA32_MISC_ENABLE=\" + h(low >>> 0, 8), LOG_CPU);\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case IA32_KERNEL_GS_BASE:\n            // Only used in 64 bit mode (by SWAPGS), but set by kvm-unit-test\n            dbg_log(\"GS Base written\", LOG_CPU);\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n};\n\nt[0x31] = cpu => {\n    // rdtsc - read timestamp counter\n\n    if(!cpu.cpl || !(cpu.cr[4] & CR4_TSD))\n    {\n        var n = v86.microtick() - cpu.tsc_offset;\n        dbg_assert(isFinite(n), \"non-finite tsc: \" + n);\n\n        cpu.reg32s[reg_eax] = n * TSC_RATE;\n        cpu.reg32s[reg_edx] = n * (TSC_RATE / 0x100000000);\n\n        //dbg_log(\"rdtsc  edx:eax=\" + h(cpu.reg32[reg_edx], 8) + \":\" + h(cpu.reg32[reg_eax], 8), LOG_CPU);\n    }\n    else\n    {\n        cpu.trigger_gp(0);\n    }\n};\n\nt[0x32] = cpu => {\n    // rdmsr - read maschine specific register\n    if(cpu.cpl)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    var index = cpu.reg32s[reg_ecx];\n\n    dbg_log(\"rdmsr ecx=\" + h(index >>> 0, 8), LOG_CPU);\n\n    var low = 0;\n    var high = 0;\n\n    switch(index)\n    {\n        case IA32_SYSENTER_CS:\n            low = cpu.sysenter_cs;\n            break;\n\n        case IA32_SYSENTER_EIP:\n            low = cpu.sysenter_eip;\n            break;\n\n        case IA32_SYSENTER_ESP:\n            low = cpu.sysenter_esp;\n            break;\n\n        case IA32_TIME_STAMP_COUNTER:\n            var n = v86.microtick() - cpu.tsc_offset;\n            low = n * TSC_RATE;\n            high = n * (TSC_RATE / 0x100000000);\n            break;\n\n        case IA32_PLATFORM_ID:\n            break;\n\n        case IA32_APIC_BASE_MSR:\n            if(ENABLE_ACPI)\n            {\n                low = APIC_ADDRESS;\n\n                if(cpu.apic_enabled)\n                {\n                    low |= IA32_APIC_BASE_EN;\n                }\n            }\n            break;\n\n        case IA32_BIOS_SIGN_ID:\n            break;\n\n        case IA32_MISC_ENABLE: // Enable Misc. Processor Features\n            break;\n\n        case IA32_RTIT_CTL:\n            // linux4\n            break;\n\n        case MSR_SMI_COUNT:\n            break;\n\n        case IA32_MCG_CAP:\n            // netbsd\n            break;\n\n        case MSR_PKG_C2_RESIDENCY:\n            break;\n\n        case MSR_EBC_FREQUENCY_ID:\n            low = 1 << 24;\n            break;\n\n        default:\n            dbg_assert(false, \"Unknown msr: \" + h(index >>> 0, 8));\n    }\n\n    cpu.reg32s[reg_eax] = low;\n    cpu.reg32s[reg_edx] = high;\n};\n\nt[0x33] = cpu => {\n    // rdpmc\n    cpu.todo();\n};\n\nt[0x34] = cpu => {\n    // sysenter\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysenter  cs:eip=\" + h(seg    , 4) + \":\" + h(cpu.sysenter_eip >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 8, 4) + \":\" + h(cpu.sysenter_esp >>> 0, 8), LOG_CPU);\n\n    cpu.flags &= ~flag_vm & ~flag_interrupt;\n\n    cpu.instruction_pointer = cpu.sysenter_eip;\n    cpu.reg32s[reg_esp] = cpu.sysenter_esp;\n\n    cpu.sreg[reg_cs] = seg;\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 0;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 8;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x35] = cpu => {\n    // sysexit\n    var seg = cpu.sysenter_cs & 0xFFFC;\n\n    if(!cpu.protected_mode || cpu.cpl || seg === 0)\n    {\n        cpu.trigger_gp(0);\n    }\n\n    //dbg_log(\"sysexit  cs:eip=\" + h(seg + 16, 4) + \":\" + h(cpu.reg32s[reg_edx] >>> 0, 8) +\n    //                 \" ss:esp=\" + h(seg + 24, 4) + \":\" + h(cpu.reg32s[reg_ecx] >>> 0, 8), LOG_CPU);\n\n    cpu.instruction_pointer = cpu.reg32s[reg_edx];\n    cpu.reg32s[reg_esp] = cpu.reg32s[reg_ecx];\n\n    cpu.sreg[reg_cs] = seg + 16 | 3;\n\n    cpu.segment_is_null[reg_cs] = 0;\n    cpu.segment_limits[reg_cs] = -1;\n    cpu.segment_offsets[reg_cs] = 0;\n\n    cpu.update_cs_size(true);\n\n    cpu.cpl = 3;\n    cpu.cpl_changed();\n\n    cpu.sreg[reg_ss] = seg + 24 | 3;\n    cpu.segment_is_null[reg_ss] = 0;\n    cpu.segment_limits[reg_ss] = -1;\n    cpu.segment_offsets[reg_ss] = 0;\n\n    cpu.stack_size_32 = true;\n    cpu.diverged();\n};\n\nt[0x36] = cpu => { cpu.undefined_instruction(); };\n\nt[0x37] = cpu => {\n    // getsec\n    cpu.todo();\n};\n\n// sse3+\nt[0x38] = cpu => { cpu.unimplemented_sse(); };\nt[0x39] = cpu => { cpu.unimplemented_sse(); };\nt[0x3A] = cpu => { cpu.unimplemented_sse(); };\nt[0x3B] = cpu => { cpu.unimplemented_sse(); };\nt[0x3C] = cpu => { cpu.unimplemented_sse(); };\nt[0x3D] = cpu => { cpu.unimplemented_sse(); };\nt[0x3E] = cpu => { cpu.unimplemented_sse(); };\nt[0x3F] = cpu => { cpu.unimplemented_sse(); };\n\n// cmov\nt16[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_o()); };\nt32[0x40] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_o()); };\nt16[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_o()); };\nt32[0x41] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_o()); };\nt16[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_b()); };\nt32[0x42] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_b()); };\nt16[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_b()); };\nt32[0x43] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_b()); };\nt16[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_z()); };\nt32[0x44] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_z()); };\nt16[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_z()); };\nt32[0x45] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_z()); };\nt16[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_be()); };\nt32[0x46] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_be()); };\nt16[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_be()); };\nt32[0x47] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_be()); };\nt16[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_s()); };\nt32[0x48] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_s()); };\nt16[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_s()); };\nt32[0x49] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_s()); };\nt16[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_p()); };\nt32[0x4A] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_p()); };\nt16[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_p()); };\nt32[0x4B] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_p()); };\nt16[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_l()); };\nt32[0x4C] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_l()); };\nt16[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_l()); };\nt32[0x4D] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_l()); };\nt16[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16( cpu.test_le()); };\nt32[0x4E] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32( cpu.test_le()); };\nt16[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc16(!cpu.test_le()); };\nt32[0x4F] = cpu => { cpu.read_modrm_byte(); cpu.cmovcc32(!cpu.test_le()); };\n\n\nt[0x50] = cpu => { cpu.unimplemented_sse(); };\nt[0x51] = cpu => { cpu.unimplemented_sse(); };\nt[0x52] = cpu => { cpu.unimplemented_sse(); };\nt[0x53] = cpu => { cpu.unimplemented_sse(); };\nt[0x54] = cpu => { cpu.unimplemented_sse(); };\nt[0x55] = cpu => { cpu.unimplemented_sse(); };\nt[0x56] = cpu => { cpu.unimplemented_sse(); };\nt[0x57] = cpu => {\n    // xorps xmm, xmm/mem128\n    // xorpd xmm, xmm/mem128\n    // Note: Same code as pxor\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_xmm_mem128s();\n    let destination = cpu.read_xmm128s();\n\n    cpu.write_xmm128s(\n        source[0] ^ destination[0],\n        source[1] ^ destination[1],\n        source[2] ^ destination[2],\n        source[3] ^ destination[3]\n    );\n};\n\nt[0x58] = cpu => { cpu.unimplemented_sse(); };\nt[0x59] = cpu => { cpu.unimplemented_sse(); };\nt[0x5A] = cpu => { cpu.unimplemented_sse(); };\nt[0x5B] = cpu => { cpu.unimplemented_sse(); };\nt[0x5C] = cpu => { cpu.unimplemented_sse(); };\nt[0x5D] = cpu => { cpu.unimplemented_sse(); };\nt[0x5E] = cpu => { cpu.unimplemented_sse(); };\nt[0x5F] = cpu => { cpu.unimplemented_sse(); };\n\nt[0x60] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[0] | source8[0] << 8 | destination8[1] << 16 | source8[1] << 24,\n            destination8[2] | source8[2] << 8 | destination8[3] << 16 | source8[3] << 24,\n            destination8[4] | source8[4] << 8 | destination8[5] << 16 | source8[5] << 24,\n            destination8[6] | source8[6] << 8 | destination8[7] << 16 | source8[7] << 24\n        );\n    }\n    else\n    {\n        // punpcklbw mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let byte0 = destination_low & 0xFF;\n        let byte1 = source & 0xFF;\n        let byte2 = (destination_low >> 8) & 0xFF;\n        let byte3 = (source >> 8) & 0xFF;\n        let byte4 = (destination_low >> 16) & 0xFF;\n        let byte5 = (source >> 16) & 0xFF;\n        let byte6 = destination_low >>> 24;\n        let byte7 = source >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x61] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpcklwd xmm, xmm/m128\n        let source = cpu.read_xmm_mem64s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm64s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination16[0] | source16[0] << 16,\n            destination16[1] | source16[1] << 16,\n            destination16[2] | source16[2] << 16,\n            destination16[3] | source16[3] << 16\n        );\n    }\n    else\n    {\n        // punpcklwd mm, mm/m32\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem32s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n        let word0 = destination_low & 0xFFFF;\n        let word1 = source & 0xFFFF;\n        let word2 = destination_low >>> 16;\n        let word3 = source >>> 16;\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x62] = cpu => {\n    // punpckldq mm, mm/m32\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem32s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n\n    let low = destination_low;\n    let high = source;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x63] = cpu => {\n    // packsswb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= (cpu.saturate_sw_to_sb((destination_low) & 0xFFFF));\n    low |= (cpu.saturate_sw_to_sb(destination_low >>> 16)) << 8;\n    low |= (cpu.saturate_sw_to_sb((destination_high) & 0xFFFF)) << 16;\n    low |= (cpu.saturate_sw_to_sb(destination_high >>> 16)) << 24;\n\n    let high = 0;\n    high |= (cpu.saturate_sw_to_sb((source[0]) & 0xFFFF));\n    high |= (cpu.saturate_sw_to_sb(source[0] >>> 16)) << 8;\n    high |= (cpu.saturate_sw_to_sb((source[1]) & 0xFFFF)) << 16;\n    high |= (cpu.saturate_sw_to_sb(source[1] >>> 16)) << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x64] = cpu => {\n    // pcmpgtb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = destination8s[reg_offset] > source8s[0] ? 0xFF : 0;\n    let byte1 = destination8s[reg_offset + 1] > source8s[1] ? 0xFF : 0;\n    let byte2 = destination8s[reg_offset + 2] > source8s[2] ? 0xFF : 0;\n    let byte3 = destination8s[reg_offset + 3] > source8s[3] ? 0xFF : 0;\n    let byte4 = destination8s[reg_offset + 4] > source8s[4] ? 0xFF : 0;\n    let byte5 = destination8s[reg_offset + 5] > source8s[5] ? 0xFF : 0;\n    let byte6 = destination8s[reg_offset + 6] > source8s[6] ? 0xFF : 0;\n    let byte7 = destination8s[reg_offset + 7] > source8s[7] ? 0xFF : 0;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x65] = cpu => {\n    // pcmpgtw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low << 16 >> 16) > (source[0] << 16 >> 16) ? 0xFFFF : 0;\n    let word1 = (destination_low >> 16) > (source[0] >> 16) ? 0xFFFF : 0;\n    let word2 = (destination_high << 16 >> 16) > (source[1] << 16 >> 16) ? 0xFFFF : 0;\n    let word3 = (destination_high >> 16) > (source[1] >> 16) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x66] = cpu => {\n    // pcmpgtd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low > source[0] ? -1 : 0;\n    let high = destination_high > source[1] ? -1 : 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x67] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 8; i++)\n        {\n            result8[i] = cpu.saturate_sw_to_ub(destination16s[i]);\n            result8[i | 8] = cpu.saturate_sw_to_ub(source16s[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3]);\n    }\n    else\n    {\n        // packuswb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = 0;\n        low |= (cpu.saturate_sw_to_ub((destination_low) & 0xFFFF));\n        low |= (cpu.saturate_sw_to_ub(destination_low >>> 16)) << 8;\n        low |= (cpu.saturate_sw_to_ub((destination_high) & 0xFFFF)) << 16;\n        low |= (cpu.saturate_sw_to_ub(destination_high >>> 16)) << 24;\n\n        let high = 0;\n        high |= (cpu.saturate_sw_to_ub((source[0]) & 0xFFFF));\n        high |= (cpu.saturate_sw_to_ub(source[0] >>> 16)) << 8;\n        high |= (cpu.saturate_sw_to_ub((source[1]) & 0xFFFF)) << 16;\n        high |= (cpu.saturate_sw_to_ub(source[1] >>> 16)) << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x68] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // punpckhbw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            destination8[ 8] | source8[ 8] << 8 | destination8[ 9] << 16 | source8[ 9] << 24,\n            destination8[10] | source8[10] << 8 | destination8[11] << 16 | source8[11] << 24,\n            destination8[12] | source8[12] << 8 | destination8[13] << 16 | source8[13] << 24,\n            destination8[14] | source8[14] << 8 | destination8[15] << 16 | source8[15] << 24\n        );\n    }\n    else\n    {\n        // punpckhbw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let byte0 = destination_high & 0xFF;\n        let byte1 = source[1] & 0xFF;\n        let byte2 = (destination_high >> 8) & 0xFF;\n        let byte3 = (source[1] >> 8) & 0xFF;\n        let byte4 = (destination_high >> 16) & 0xFF;\n        let byte5 = (source[1] >> 16) & 0xFF;\n        let byte6 = destination_high >>> 24;\n        let byte7 = source[1] >>> 24;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x69] = cpu => {\n    // punpckhwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = destination_high & 0xFFFF;\n    let word1 = source[1] & 0xFFFF;\n    let word2 = destination_high >>> 16;\n    let word3 = source[1] >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6A] = cpu => {\n    // punpckhdq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_high;\n    let high = source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6B] = cpu => {\n    // packssdw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = 0;\n    low |= cpu.saturate_sd_to_sw(destination_low);\n    low |= cpu.saturate_sd_to_sw(destination_high) << 16;\n\n    let high = 0;\n    high |= cpu.saturate_sd_to_sw(source[0]);\n    high |= cpu.saturate_sd_to_sw(source[1]) << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x6C] = cpu => { cpu.unimplemented_sse(); };\nt[0x6D] = cpu => { cpu.unimplemented_sse(); };\nt[0x6E] = cpu => {\n    // movd mm, r/m32\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        let data = cpu.read_e32s();\n        cpu.write_xmm128s(data, 0, 0, 0);\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_e32s();\n        cpu.write_mmx64s(data, 0);\n    }\n};\nt[0x6F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm, xmm/mem128\n        let data = cpu.read_xmm_mem128s();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm, xmm/m128\n        let data = cpu.read_xmm_mem128s_unaligned();\n        cpu.write_xmm128s(data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx_mem64s();\n        cpu.write_mmx64s(data[0], data[1]);\n    }\n};\n\nt[0x70] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // pshufd xmm, xmm/mem128\n        let source = cpu.read_xmm_mem128s();\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[order & 3],\n            source[order >> 2 & 3],\n            source[order >> 4 & 3],\n            source[order >> 6 & 3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F2)\n    {\n        // pshuflw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source16[order & 3] | source16[order >> 2 & 3] << 16,\n            source16[order >> 4 & 3] | source16[order >> 6 & 3] << 16,\n            source[2],\n            source[3]\n        );\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // pshufhw xmm, xmm/m128, imm8\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n        let order = cpu.read_op8();\n\n        cpu.write_xmm128s(\n            source[0],\n            source[1],\n            source16[order & 3 | 4] | source16[order >> 2 & 3 | 4] << 16,\n            source16[order >> 4 & 3 | 4] | source16[order >> 6 & 3 | 4] << 16\n        );\n    }\n    else\n    {\n        // pshufw mm1, mm2/m64, imm8\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let order = cpu.read_op8();\n\n        let word0_shift = order & 0b11;\n        let word0 = source[word0_shift >> 1] >>> ((word0_shift & 1) * 16) & 0xFFFF;\n        let word1_shift = (order >> 2) & 0b11;\n        let word1 = source[word1_shift >> 1] >>> ((word1_shift & 1) * 16);\n        let low = word0 | word1 << 16;\n\n        let word2_shift = (order >> 4) & 0b11;\n        let word2 = source[word2_shift >> 1] >>> ((word2_shift & 1) * 16) & 0xFFFF;\n        let word3_shift = (order >>> 6);\n        let word3 = source[word3_shift >> 1] >>> ((word3_shift & 1) * 16);\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0x71] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlw, psraw, psllw\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = (destination_low & 0xFFFF) >>> shift;\n                var word1 = (destination_low >>> 16) >>> shift;\n                low = word0 | word1 << 16;\n\n                var word2 = (destination_high & 0xFFFF) >>> shift;\n                var word3 = (destination_high >>> 16) >>> shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psraw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 15) {\n                shift = 16;\n            }\n\n            var word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n            var word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n            var low = word0 | word1 << 16;\n\n            var word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n            var word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n            var high = word2 | word3 << 16;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllw mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 15) {\n                var word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n                var word1 = (destination_low >>> 16) << shift;\n                low = word0 | word1 << 16;\n\n                var word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n                var word3 = (destination_high >>> 16) << shift;\n                high = word2 | word3 << 16;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x72] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrld, psrad, pslld\n    //     2,     4,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift;\n                high = destination_high >>> shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 4:\n            // psrad mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            if (shift > 31) {\n                shift = 31;\n            }\n\n            var low = destination_low >> shift;\n            var high = destination_high >> shift;\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // pslld mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x73] = cpu => {\n    cpu.read_modrm_byte();\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    // psrlq, psllq\n    //     2,     6\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 2:\n            // psrlq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low >>> shift | (destination_high << (32 - shift));\n                high = destination_high >>> shift;\n            }\n            else if (shift <= 63) {\n                low = destination_high >>> (shift & 0x1F);\n                high = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        case 6:\n            // psllq mm, imm8\n            var source = cpu.read_op8();\n            var destination = cpu.modrm_byte & 7;\n\n            var destination_low = cpu.reg_mmxs[2 * destination];\n            var destination_high = cpu.reg_mmxs[2 * destination + 1];\n\n            var shift = source;\n            var low = 0;\n            var high = 0;\n\n            if (shift <= 31) {\n                low = destination_low << shift;\n                high = destination_high << shift | (destination_low >>> (32 - shift));\n            }\n            else if (shift <= 63) {\n                high = destination_low << (shift & 0x1F);\n                low = 0;\n            }\n\n            cpu.reg_mmxs[2 * destination] = low;\n            cpu.reg_mmxs[2 * destination + 1] = high;\n\n            break;\n        default:\n            cpu.unimplemented_sse();\n            break;\n    }\n};\n\nt[0x74] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqb xmm, xmm/m128\n        let source64s = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let destination128 = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination128.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] === destination8[i] ? 0xFF : 0;\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // pcmpeqb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source64s = cpu.read_mmx_mem64s();\n        let source8s = new Int8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8s = cpu.reg_mmx8s;\n\n        let byte0 = destination8s[reg_offset] === source8s[0] ? 0xFF : 0;\n        let byte1 = destination8s[reg_offset + 1] === source8s[1] ? 0xFF : 0;\n        let byte2 = destination8s[reg_offset + 2] === source8s[2] ? 0xFF : 0;\n        let byte3 = destination8s[reg_offset + 3] === source8s[3] ? 0xFF : 0;\n        let byte4 = destination8s[reg_offset + 4] === source8s[4] ? 0xFF : 0;\n        let byte5 = destination8s[reg_offset + 5] === source8s[5] ? 0xFF : 0;\n        let byte6 = destination8s[reg_offset + 6] === source8s[6] ? 0xFF : 0;\n        let byte7 = destination8s[reg_offset + 7] === source8s[7] ? 0xFF : 0;\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x75] = cpu => {\n    // pcmpeqw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) === (source[0] & 0xFFFF) ? 0xFFFF : 0;\n    let word1 = (destination_low & 0xFFFF0000) === (source[0] & 0xFFFF0000) ? 0xFFFF : 0;\n    let word2 = (destination_high & 0xFFFF) === (source[1] & 0xFFFF) ? 0xFFFF : 0;\n    let word3 = (destination_high & 0xFFFF0000) === (source[1] & 0xFFFF0000) ? 0xFFFF : 0;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0x76] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pcmpeqd xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] === destination[0] ? -1 : 0,\n            source[1] === destination[1] ? -1 : 0,\n            source[2] === destination[2] ? -1 : 0,\n            source[3] === destination[3] ? -1 : 0\n        );\n    }\n    else\n    {\n        // pcmpeqd mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = destination_low === source[0] ? -1 : 0;\n        let high = destination_high === source[1] ? -1 : 0;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0x77] = cpu => {\n    // emms\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.fpu.stack_empty = 0xFF;\n};\n\nt[0x78] = cpu => { cpu.unimplemented_sse(); };\nt[0x79] = cpu => { cpu.unimplemented_sse(); };\nt[0x7A] = cpu => { cpu.unimplemented_sse(); };\nt[0x7B] = cpu => { cpu.unimplemented_sse(); };\nt[0x7C] = cpu => { cpu.unimplemented_sse(); };\nt[0x7D] = cpu => { cpu.unimplemented_sse(); };\nt[0x7E] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_F3)\n    {\n        // movq xmm, xmm/mem64\n        let data = cpu.read_xmm_mem64s();\n        cpu.write_xmm128s(data[0], data[1], 0, 0);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movd r/m32, xmm\n        let data = cpu.read_xmm64s();\n        cpu.set_e32(data[0]);\n    }\n    else\n    {\n        // movd r/m32, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let data = cpu.read_mmx64s();\n        cpu.set_e32(data[0]);\n    }\n};\nt[0x7F] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_F3)\n    {\n        // movdqu xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // movdqa xmm/m128, xmm\n        let data = cpu.read_xmm128s();\n        dbg_assert(cpu.modrm_byte < 0xC0);\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        // movq mm/m64, mm\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let data = cpu.read_mmx64s();\n        cpu.set_mmx_mem64s(data[0], data[1]);\n    }\n};\n\n// jmpcc\nt16[0x80] = cpu => { cpu.jmpcc16( cpu.test_o()); };\nt32[0x80] = cpu => { cpu.jmpcc32( cpu.test_o()); };\nt16[0x81] = cpu => { cpu.jmpcc16(!cpu.test_o()); };\nt32[0x81] = cpu => { cpu.jmpcc32(!cpu.test_o()); };\nt16[0x82] = cpu => { cpu.jmpcc16( cpu.test_b()); };\nt32[0x82] = cpu => { cpu.jmpcc32( cpu.test_b()); };\nt16[0x83] = cpu => { cpu.jmpcc16(!cpu.test_b()); };\nt32[0x83] = cpu => { cpu.jmpcc32(!cpu.test_b()); };\nt16[0x84] = cpu => { cpu.jmpcc16( cpu.test_z()); };\nt32[0x84] = cpu => { cpu.jmpcc32( cpu.test_z()); };\nt16[0x85] = cpu => { cpu.jmpcc16(!cpu.test_z()); };\nt32[0x85] = cpu => { cpu.jmpcc32(!cpu.test_z()); };\nt16[0x86] = cpu => { cpu.jmpcc16( cpu.test_be()); };\nt32[0x86] = cpu => { cpu.jmpcc32( cpu.test_be()); };\nt16[0x87] = cpu => { cpu.jmpcc16(!cpu.test_be()); };\nt32[0x87] = cpu => { cpu.jmpcc32(!cpu.test_be()); };\nt16[0x88] = cpu => { cpu.jmpcc16( cpu.test_s()); };\nt32[0x88] = cpu => { cpu.jmpcc32( cpu.test_s()); };\nt16[0x89] = cpu => { cpu.jmpcc16(!cpu.test_s()); };\nt32[0x89] = cpu => { cpu.jmpcc32(!cpu.test_s()); };\nt16[0x8A] = cpu => { cpu.jmpcc16( cpu.test_p()); };\nt32[0x8A] = cpu => { cpu.jmpcc32( cpu.test_p()); };\nt16[0x8B] = cpu => { cpu.jmpcc16(!cpu.test_p()); };\nt32[0x8B] = cpu => { cpu.jmpcc32(!cpu.test_p()); };\nt16[0x8C] = cpu => { cpu.jmpcc16( cpu.test_l()); };\nt32[0x8C] = cpu => { cpu.jmpcc32( cpu.test_l()); };\nt16[0x8D] = cpu => { cpu.jmpcc16(!cpu.test_l()); };\nt32[0x8D] = cpu => { cpu.jmpcc32(!cpu.test_l()); };\nt16[0x8E] = cpu => { cpu.jmpcc16( cpu.test_le()); };\nt32[0x8E] = cpu => { cpu.jmpcc32( cpu.test_le()); };\nt16[0x8F] = cpu => { cpu.jmpcc16(!cpu.test_le()); };\nt32[0x8F] = cpu => { cpu.jmpcc32(!cpu.test_le()); };\n\n// setcc\nt[0x90] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_o()); };\nt[0x91] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_o()); };\nt[0x92] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_b()); };\nt[0x93] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_b()); };\nt[0x94] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_z()); };\nt[0x95] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_z()); };\nt[0x96] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_be()); };\nt[0x97] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_be()); };\nt[0x98] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_s()); };\nt[0x99] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_s()); };\nt[0x9A] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_p()); };\nt[0x9B] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_p()); };\nt[0x9C] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_l()); };\nt[0x9D] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_l()); };\nt[0x9E] = cpu => { cpu.read_modrm_byte(); cpu.setcc( cpu.test_le()); };\nt[0x9F] = cpu => { cpu.read_modrm_byte(); cpu.setcc(!cpu.test_le()); };\n\nt16[0xA0] = cpu => { cpu.push16(cpu.sreg[reg_fs]); };\nt32[0xA0] = cpu => { cpu.push32(cpu.sreg[reg_fs]); };\nt16[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA1] = cpu => {\n    cpu.switch_seg(reg_fs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\nt[0xA2] = cpu => { cpu.cpuid(); };\n\nt16[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e16(), cpu.read_g16() & 15);\n    }\n};\nt32[0xA3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    }\n    else\n    {\n        cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31);\n    }\n};\n\nt16[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xA4] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shld16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xA5] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shld32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xA6] = cpu => {\n    // obsolete cmpxchg (os/2)\n    cpu.trigger_ud();\n};\nt[0xA7] = cpu => { cpu.undefined_instruction(); };\n\nt16[0xA8] = cpu => { cpu.push16(cpu.sreg[reg_gs]); };\nt32[0xA8] = cpu => { cpu.push32(cpu.sreg[reg_gs]); };\nt16[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read16(cpu.get_stack_pointer(0)));\n    cpu.adjust_stack_reg(2);\n};\nt32[0xA9] = cpu => {\n    cpu.switch_seg(reg_gs, cpu.safe_read32s(cpu.get_stack_pointer(0)) & 0xFFFF);\n    cpu.adjust_stack_reg(4);\n};\n\n\nt[0xAA] = cpu => {\n    // rsm\n    cpu.todo();\n};\n\nt16[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xAB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n\nt16[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.read_op8() & 31));\n};\nt32[0xAC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.read_op8() & 31));\n};\nt16[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16(); cpu.write_e16(cpu.shrd16(data, cpu.read_g16(), cpu.reg8[reg_cl] & 31));\n};\nt32[0xAD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32(); cpu.write_e32(cpu.shrd32(data, cpu.read_g32s(), cpu.reg8[reg_cl] & 31));\n};\n\nt[0xAE] = cpu => { cpu.read_modrm_byte();\n    // xsave, xrstor, ...\n    if(cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) cpu.todo();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 0: // fxsave\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxsave(addr);\n            break;\n\n        case 1: // fxrstor\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.fxrstor(addr);\n            break;\n\n        case 2: // ldmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            let new_mxcsr = cpu.safe_read32s(addr);\n            if(new_mxcsr & ~MXCSR_MASK)\n            {\n                dbg_log(\"Invalid mxcsr bits: \" + h((new_mxcsr & ~MXCSR_MASK) >>> 0, 8));\n                cpu.trigger_gp(0);\n            }\n            cpu.mxcsr = new_mxcsr;\n            break;\n\n        case 3: // stmxcsr\n            if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.safe_write32(addr, cpu.mxcsr);\n            break;\n\n        case 5:\n            // lfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected lfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 6:\n            // mfence\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected mfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        case 7:\n            // sfence or clflush\n            dbg_assert(cpu.modrm_byte >= 0xC0, \"Unexpected sfence encoding\");\n            if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n            break;\n        default:\n            dbg_log(\"missing \" + (cpu.modrm_byte >> 3 & 7), LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt16[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g16(cpu.imul_reg16(cpu.read_g16s(), data));\n};\nt32[0xAF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.imul_reg32(cpu.read_g32s(), data));\n};\n\nt[0xB0] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg8\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 1);\n\n        var data = cpu.safe_read8(virt_addr);\n    }\n    else\n        data = cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1];\n\n\n    cpu.cmp8(cpu.reg8[reg_al], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, cpu.read_g8());\n        else\n            cpu.reg8[cpu.modrm_byte << 2 & 0xC | cpu.modrm_byte >> 2 & 1] = cpu.read_g8();\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write8(virt_addr, data);\n\n        cpu.reg8[reg_al] = data;\n    }\n};\nt16[0xB1] = cpu => { cpu.read_modrm_byte();\n    // cmpxchg16/32\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 2);\n\n        var data = cpu.safe_read16(virt_addr);\n    }\n    else\n        data = cpu.read_reg_e16();\n\n    cpu.cmp16(cpu.reg16[reg_ax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, cpu.read_g16());\n        else\n            cpu.write_reg_e16(cpu.read_g16());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write16(virt_addr, data);\n\n        cpu.reg16[reg_ax] = data;\n    }\n};\nt32[0xB1] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0)\n    {\n        var virt_addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.writable_or_pagefault(virt_addr, 4);\n\n        var data = cpu.safe_read32s(virt_addr);\n    }\n    else\n    {\n        data = cpu.read_reg_e32s();\n    }\n\n    cpu.cmp32(cpu.reg32s[reg_eax], data);\n\n    if(cpu.getzf())\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, cpu.read_g32s());\n        else\n            cpu.write_reg_e32(cpu.read_g32s());\n    }\n    else\n    {\n        if(cpu.modrm_byte < 0xC0)\n            cpu.safe_write32(virt_addr, data);\n\n        cpu.reg32s[reg_eax] = data;\n    }\n};\n\n// lss\nt16[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_ss);\n};\nt32[0xB2] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_ss);\n};\n\nt16[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xB3] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\n// lfs, lgs\nt16[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_fs);\n};\nt32[0xB4] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_fs);\n};\nt16[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss16(reg_gs);\n};\nt32[0xB5] = cpu => { cpu.read_modrm_byte();\n    cpu.lss32(reg_gs);\n};\n\nt16[0xB6] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    var data = cpu.read_e8();\n    cpu.write_g16(data);\n};\nt32[0xB6] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8();\n    cpu.write_g32(data);\n};\n\nt16[0xB7] = cpu => { cpu.read_modrm_byte();\n    // movzx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\nt32[0xB7] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g32(data);\n};\n\nt16[0xB8] = cpu => { cpu.read_modrm_byte();\n    // popcnt\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.popcnt(data));\n};\nt32[0xB8] = cpu => { cpu.read_modrm_byte();\n    if((cpu.prefixes & PREFIX_F3) === 0)\n    {\n        cpu.trigger_ud();\n    }\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.popcnt(data));\n};\n\nt[0xB9] = cpu => {\n    // UD\n    cpu.todo();\n};\n\nt16[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e16(), cpu.read_op8() & 15);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.bts_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btr_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 15);\n            } else {\n                cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_op8() & 15));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\nt32[0xBA] = cpu => { cpu.read_modrm_byte();\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 4:\n            if(cpu.modrm_byte < 0xC0)\n            {\n                cpu.bt_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            }\n            else\n            {\n                cpu.bt_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31);\n            }\n            break;\n        case 5:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.bts_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.bts_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 6:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btr_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btr_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        case 7:\n            if(cpu.modrm_byte < 0xC0) {\n                cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_op8() & 31);\n            } else {\n                cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_op8() & 31));\n            }\n            break;\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7);\n            cpu.todo();\n    }\n};\n\nt16[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g16s());\n    } else {\n        cpu.write_reg_e16(cpu.btc_reg(cpu.read_reg_e16(), cpu.read_g16s() & 15));\n    }\n};\nt32[0xBB] = cpu => { cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) {\n        cpu.btc_mem(cpu.modrm_resolve(cpu.modrm_byte), cpu.read_g32s());\n    } else {\n        cpu.write_reg_e32(cpu.btc_reg(cpu.read_reg_e32s(), cpu.read_g32s() & 31));\n    }\n};\n\nt16[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsf16(cpu.read_g16(), data));\n};\nt32[0xBC] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsf32(cpu.read_g32s(), data));\n};\n\nt16[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16();\n    cpu.write_g16(cpu.bsr16(cpu.read_g16(), data));\n};\nt32[0xBD] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e32s();\n    cpu.write_g32(cpu.bsr32(cpu.read_g32s(), data));\n};\n\nt16[0xBE] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    var data = cpu.read_e8s();\n    cpu.write_g16(data);\n};\nt32[0xBE] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e8s();\n    cpu.write_g32(data);\n};\n\nt16[0xBF] = cpu => { cpu.read_modrm_byte();\n    // movsx\n    dbg_assert(false, \"Possibly invalid encoding\");\n    var data = cpu.read_e16();\n    cpu.write_g16(data);\n};\n\nt32[0xBF] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_e16s();\n    cpu.write_g32(data);\n};\n\nt[0xC0] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e8(); cpu.write_e8(cpu.xadd8(data, cpu.modrm_byte >> 1 & 0xC | cpu.modrm_byte >> 5 & 1));\n};\n\nt16[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e16();\n    cpu.write_e16(cpu.xadd16(data, cpu.modrm_byte >> 2 & 14));\n};\nt32[0xC1] = cpu => { cpu.read_modrm_byte();\n    var data = cpu.read_write_e32();\n    cpu.write_e32(cpu.xadd32(data, cpu.modrm_byte >> 3 & 7));\n};\n\n\nt[0xC2] = cpu => { cpu.unimplemented_sse(); };\nt[0xC3] = cpu => {\n    // movnti\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte >= 0xC0) cpu.trigger_ud();\n    cpu.set_e32(cpu.read_g32s());\n};\nt[0xC4] = cpu => { cpu.unimplemented_sse(); };\nt[0xC5] = cpu => { cpu.unimplemented_sse(); };\nt[0xC6] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xC7] = cpu => {\n    cpu.read_modrm_byte();\n\n    switch(cpu.modrm_byte >> 3 & 7)\n    {\n        case 1:\n            // cmpxchg8b\n            if(cpu.modrm_byte >= 0xC0)\n            {\n                cpu.trigger_ud();\n            }\n\n            var addr = cpu.modrm_resolve(cpu.modrm_byte);\n            cpu.writable_or_pagefault(addr, 8);\n\n            var m64_low = cpu.safe_read32s(addr);\n            var m64_high = cpu.safe_read32s(addr + 4 | 0);\n\n            if(cpu.reg32s[reg_eax] === m64_low &&\n               cpu.reg32s[reg_edx] === m64_high)\n            {\n                cpu.flags |= flag_zero;\n\n                cpu.safe_write32(addr, cpu.reg32s[reg_ebx]);\n                cpu.safe_write32(addr + 4 | 0, cpu.reg32s[reg_ecx]);\n            }\n            else\n            {\n                cpu.flags &= ~flag_zero;\n\n                cpu.reg32s[reg_eax] = m64_low;\n                cpu.reg32s[reg_edx] = m64_high;\n\n                cpu.safe_write32(addr, m64_low);\n                cpu.safe_write32(addr + 4 | 0, m64_high);\n            }\n\n            cpu.flags_changed &= ~flag_zero;\n            break;\n\n        case 6:\n            var has_rand = v86util.has_rand_int();\n\n            if(has_rand)\n            {\n                var rand = v86util.get_rand_int();\n            }\n            else\n            {\n                var rand = 0;\n            }\n            //dbg_log(\"rdrand -> \" + h(rand >>> 0, 8), LOG_CPU);\n\n            if(cpu.is_osize_32())\n            {\n                cpu.set_e32(rand);\n            }\n            else\n            {\n                cpu.set_e16(rand);\n            }\n\n            cpu.flags &= ~flags_all;\n            cpu.flags |= has_rand;\n            cpu.flags_changed = 0;\n            break;\n\n        default:\n            dbg_log(cpu.modrm_byte >> 3 & 7, LOG_CPU);\n            cpu.todo();\n    }\n};\n\nt[0xC8] = cpu => { cpu.bswap(reg_eax); };\nt[0xC9] = cpu => { cpu.bswap(reg_ecx); };\nt[0xCA] = cpu => { cpu.bswap(reg_edx); };\nt[0xCB] = cpu => { cpu.bswap(reg_ebx); };\nt[0xCC] = cpu => { cpu.bswap(reg_esp); };\nt[0xCD] = cpu => { cpu.bswap(reg_ebp); };\nt[0xCE] = cpu => { cpu.bswap(reg_esi); };\nt[0xCF] = cpu => { cpu.bswap(reg_edi); };\n\nt[0xD0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xD1] = cpu => {\n    // psrlw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = (destination_low & 0xFFFF) >>> shift;\n        let word1 = (destination_low >>> 16) >>> shift;\n        low = word0 | word1 << 16;\n\n        let word2 = (destination_high & 0xFFFF) >>> shift;\n        let word3 = (destination_high >>> 16) >>> shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD2] = cpu => {\n    // psrld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift;\n        high = destination_high >>> shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD3] = cpu => {\n    // psrlq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low >>> shift | (destination_high << (32 - shift));\n        high = destination_high >>> shift;\n    }\n    else if (shift <= 63) {\n        low = destination_high >>> (shift & 0x1F);\n        high = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD4] = cpu => { cpu.unimplemented_sse(); };\nt[0xD5] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmullw xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source16s = new Int16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16s = new Int16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            source16s[0] * destination16s[0] & 0xFFFF | source16s[1] * destination16s[1] << 16,\n            source16s[2] * destination16s[2] & 0xFFFF | source16s[3] * destination16s[3] << 16,\n            source16s[4] * destination16s[4] & 0xFFFF | source16s[5] * destination16s[5] << 16,\n            source16s[6] * destination16s[6] & 0xFFFF | source16s[7] * destination16s[7] << 16\n        );\n    }\n    else\n    {\n        // pmullw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = ((destination_low & 0xFFFF) * (source[0] & 0xFFFF)) & 0xFFFF;\n        let word1 = ((destination_low >>> 16) * (source[0] >>> 16)) & 0xFFFF;\n        let low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) * (source[1] & 0xFFFF)) & 0xFFFF;\n        let word3 = ((destination_high >>> 16) * (source[1] >>> 16)) & 0xFFFF;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\nt[0xD6] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // movq xmm/m64, xmm\n    var data = cpu.read_xmm64s();\n    dbg_assert(cpu.modrm_byte < 0xC0);\n    var addr = cpu.modrm_resolve(cpu.modrm_byte);\n    cpu.safe_write64(addr, data[0], data[1]);\n};\nt[0xD7] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n    if(cpu.modrm_byte < 0xC0) cpu.trigger_ud();\n\n    // pmovmskb reg, xmm\n    let data = cpu.read_xmm_mem128s();\n    let data8 = new Uint8Array(data.buffer);\n    let result =\n        data8[0] >> 7 << 0 | data8[1] >> 7 << 1 | data8[2] >> 7 << 2 | data8[3] >> 7 << 3 |\n        data8[4] >> 7 << 4 | data8[5] >> 7 << 5 | data8[6] >> 7 << 6 | data8[7] >> 7 << 7 |\n        data8[8] >> 7 << 8 | data8[9] >> 7 << 9 | data8[10] >> 7 << 10 | data8[11] >> 7 << 11 |\n        data8[12] >> 7 << 12 | data8[13] >> 7 << 13 | data8[14] >> 7 << 14 | data8[15] >> 7 << 15;\n    cpu.write_g32(result);\n};\n\nt[0xD8] = cpu => {\n    // psubusb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8 = new Uint8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8 = cpu.reg_mmx8;\n\n    let byte0 = cpu.saturate_sd_to_ub(destination8[reg_offset] - source8[0]);\n    let byte1 = cpu.saturate_sd_to_ub(destination8[reg_offset + 1] - source8[1]);\n    let byte2 = cpu.saturate_sd_to_ub(destination8[reg_offset + 2] - source8[2]);\n    let byte3 = cpu.saturate_sd_to_ub(destination8[reg_offset + 3] - source8[3]);\n    let byte4 = cpu.saturate_sd_to_ub(destination8[reg_offset + 4] - source8[4]);\n    let byte5 = cpu.saturate_sd_to_ub(destination8[reg_offset + 5] - source8[5]);\n    let byte6 = cpu.saturate_sd_to_ub(destination8[reg_offset + 6] - source8[6]);\n    let byte7 = cpu.saturate_sd_to_ub(destination8[reg_offset + 7] - source8[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xD9] = cpu => {\n    // psubusw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low & 0xFFFF) - (source[0] & 0xFFFF);\n    let word1 = (destination_low >>> 16) - (source[0] >>> 16);\n    if (word0 < 0) {\n        word0 = 0;\n    }\n    if (word1 < 0) {\n        word1 = 0;\n    }\n\n    let word2 = (destination_high & 0xFFFF) - (source[1] & 0xFFFF);\n    let word3 = (destination_high >>> 16) - (source[1] >>> 16);\n    if (word2 < 0) {\n        word2 = 0;\n    }\n    if (word3 < 0) {\n        word3 = 0;\n    }\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDA] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pminub xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source8 = new Uint8Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination8 = new Uint8Array(destination.buffer);\n\n    let result = cpu.create_atom128s(0, 0, 0, 0);\n    let result8 = new Uint8Array(result.buffer);\n\n    for(let i = 0; i < 16; i++)\n    {\n        result8[i] = source8[i] < destination8[i] ? source8[i] : destination8[i];\n    }\n\n    cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n};\nt[0xDB] = cpu => {\n    // pand mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & destination_low;\n    let high = source[1] & destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xDC] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusb xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = cpu.saturate_ud_to_ub(source8[i] + destination8[i]);\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        // paddusb mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source64s = cpu.read_mmx_mem64s();\n        let source8 = new Uint8Array(source64s.buffer);\n\n        let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n        let destination8 = cpu.reg_mmx8;\n\n        let byte0 = cpu.saturate_ud_to_ub(destination8[reg_offset] + source8[0]);\n        let byte1 = cpu.saturate_ud_to_ub(destination8[reg_offset + 1] + source8[1]);\n        let byte2 = cpu.saturate_ud_to_ub(destination8[reg_offset + 2] + source8[2]);\n        let byte3 = cpu.saturate_ud_to_ub(destination8[reg_offset + 3] + source8[3]);\n        let byte4 = cpu.saturate_ud_to_ub(destination8[reg_offset + 4] + source8[4]);\n        let byte5 = cpu.saturate_ud_to_ub(destination8[reg_offset + 5] + source8[5]);\n        let byte6 = cpu.saturate_ud_to_ub(destination8[reg_offset + 6] + source8[6]);\n        let byte7 = cpu.saturate_ud_to_ub(destination8[reg_offset + 7] + source8[7]);\n\n        let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n        let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDD] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // paddusw mm, mm/m64\n        let source = cpu.read_xmm_mem128s();\n        let source16 = new Uint16Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination16 = new Uint16Array(destination.buffer);\n\n        cpu.write_xmm128s(\n            cpu.saturate_uw(source16[0] + destination16[0]) | cpu.saturate_uw(source16[1] + destination16[1]) << 16,\n            cpu.saturate_uw(source16[2] + destination16[2]) | cpu.saturate_uw(source16[3] + destination16[3]) << 16,\n            cpu.saturate_uw(source16[4] + destination16[4]) | cpu.saturate_uw(source16[5] + destination16[5]) << 16,\n            cpu.saturate_uw(source16[6] + destination16[6]) | cpu.saturate_uw(source16[7] + destination16[7]) << 16\n        );\n    }\n    else\n    {\n        // paddusw mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let word0 = cpu.saturate_uw((destination_low & 0xFFFF) + (source[0] & 0xFFFF));\n        let word1 = cpu.saturate_uw((destination_low >>> 16) + (source[0] >>> 16));\n        let word2 = cpu.saturate_uw((destination_high & 0xFFFF) + (source[1] & 0xFFFF));\n        let word3 = cpu.saturate_uw((destination_high >>> 16) + (source[1] >>> 16));\n\n        let low = word0 | word1 << 16;\n        let high = word2 | word3 << 16;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xDE] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        // pmaxub xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let source8 = new Uint8Array(source.buffer);\n\n        let destination = cpu.read_xmm128s();\n        let destination8 = new Uint8Array(destination.buffer);\n\n        let result = cpu.create_atom128s(0, 0, 0, 0);\n        let result8 = new Uint8Array(result.buffer);\n\n        for(let i = 0; i < 16; i++)\n        {\n            result8[i] = source8[i] > destination8[i] ? source8[i] : destination8[i];\n        }\n\n        cpu.write_xmm128s(result[0], result[1], result[2], result[3])\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\nt[0xDF] = cpu => {\n    // pandn mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = source[0] & ~destination_low;\n    let high = source[1] & ~destination_high;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xE1] = cpu => {\n    // psraw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 15) {\n        shift = 16;\n    }\n\n    let word0 = ((destination_low << 16 >> 16) >> shift) & 0xFFFF;\n    let word1 = ((destination_low >> 16) >> shift) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = ((destination_high << 16 >> 16) >> shift) & 0xFFFF;\n    let word3 = ((destination_high >> 16) >> shift) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE2] = cpu => {\n    // psrad mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    if (shift > 31) {\n        shift = 31;\n    }\n\n    let low = destination_low >> shift;\n    let high = destination_high >> shift;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE3] = cpu => { cpu.unimplemented_sse(); };\nt[0xE4] = cpu => {\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    // pmulhuw xmm, xmm/m128\n    let source = cpu.read_xmm_mem128s();\n    let source16 = new Uint16Array(source.buffer);\n\n    let destination = cpu.read_xmm128s();\n    let destination16 = new Uint16Array(destination.buffer);\n\n    cpu.write_xmm128s(\n        source16[0] * destination16[0] >>> 16 | source16[1] * destination16[1] & 0xFFFF0000,\n        source16[2] * destination16[2] >>> 16 | source16[3] * destination16[3] & 0xFFFF0000,\n        source16[4] * destination16[4] >>> 16 | source16[5] * destination16[5] & 0xFFFF0000,\n        source16[6] * destination16[6] >>> 16 | source16[7] * destination16[7] & 0xFFFF0000\n    );\n};\n\nt[0xE5] = cpu => {\n    // pmulhw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16)) >>> 16;\n    let word1 = ((destination_low >> 16) * (source[0] >> 16)) >>> 16;\n    let word2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16)) >>> 16;\n    let word3 = ((destination_high >> 16) * (source[1] >> 16)) >>> 16;\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE6] = cpu => { cpu.unimplemented_sse(); };\nt[0xE7] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if(cpu.modrm_byte >= 0xC0)\n    {\n        cpu.trigger_ud();\n    }\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let data = cpu.read_xmm128s();\n        let addr = cpu.modrm_resolve(cpu.modrm_byte);\n        cpu.safe_write128(addr, data[0], data[1], data[2], data[3]);\n    }\n    else\n    {\n        dbg_assert(false);\n    }\n};\n\nt[0xE8] = cpu => {\n    // psubsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] - source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] - source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] - source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] - source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] - source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] - source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] - source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] - source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xE9] = cpu => {\n    // psubsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) - (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) - (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) - (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) - (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEA] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xEB] = cpu => {\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) === PREFIX_66)\n    {\n        // por xmm, xmm/m128\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] | destination[0],\n            source[1] | destination[1],\n            source[2] | destination[2],\n            source[3] | destination[3]\n        );\n    }\n    else\n    {\n        // por mm, mm/m64\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] | destination_low;\n        let high = source[1] | destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xEC] = cpu => {\n    // paddsb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = cpu.saturate_sd_to_sb(destination8s[reg_offset] + source8s[0]);\n    let byte1 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 1] + source8s[1]);\n    let byte2 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 2] + source8s[2]);\n    let byte3 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 3] + source8s[3]);\n    let byte4 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 4] + source8s[4]);\n    let byte5 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 5] + source8s[5]);\n    let byte6 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 6] + source8s[6]);\n    let byte7 = cpu.saturate_sd_to_sb(destination8s[reg_offset + 7] + source8s[7]);\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xED] = cpu => {\n    // paddsw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = cpu.saturate_sd_to_sw((destination_low << 16 >> 16) + (source[0] << 16 >> 16));\n    let word1 = cpu.saturate_sd_to_sw((destination_low >> 16) + (source[0] >> 16));\n    let word2 = cpu.saturate_sd_to_sw((destination_high << 16 >> 16) + (source[1] << 16 >> 16));\n    let word3 = cpu.saturate_sd_to_sw((destination_high >> 16) + (source[1] >> 16));\n\n    let low = word0 | word1 << 16;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xEE] = cpu => { cpu.unimplemented_sse(); };\nt[0xEF] = cpu => {\n    // pxor mm, mm/m64\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    if((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == PREFIX_66)\n    {\n        let source = cpu.read_xmm_mem128s();\n        let destination = cpu.read_xmm128s();\n\n        cpu.write_xmm128s(\n            source[0] ^ destination[0],\n            source[1] ^ destination[1],\n            source[2] ^ destination[2],\n            source[3] ^ destination[3]\n        );\n    }\n    else\n    {\n        dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n        let source = cpu.read_mmx_mem64s();\n        let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n        let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n        let low = source[0] ^ destination_low;\n        let high = source[1] ^ destination_high;\n\n        cpu.write_mmx64s(low, high);\n    }\n};\n\nt[0xF0] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF1] = cpu => {\n    // psllw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 15) {\n        let word0 = ((destination_low & 0xFFFF) << shift) & 0xFFFF;\n        let word1 = (destination_low >>> 16) << shift;\n        low = word0 | word1 << 16;\n\n        let word2 = ((destination_high & 0xFFFF) << shift) & 0xFFFF;\n        let word3 = (destination_high >>> 16) << shift;\n        high = word2 | word3 << 16;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF2] = cpu => {\n    // pslld mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF3] = cpu => {\n    // psllq mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let shift = source[0] >>> 0;\n\n    if(shift === 0)\n    {\n        return;\n    }\n\n    let low = 0;\n    let high = 0;\n\n    if (shift <= 31) {\n        low = destination_low << shift;\n        high = destination_high << shift | (destination_low >>> (32 - shift));\n    }\n    else if (shift <= 63) {\n        high = destination_low << (shift & 0x1F);\n        low = 0;\n    }\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF4] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF5] = cpu => {\n    // pmaddwd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let mul0 = ((destination_low << 16 >> 16) * (source[0] << 16 >> 16));\n    let mul1 = ((destination_low >> 16) * (source[0] >> 16));\n    let mul2 = ((destination_high << 16 >> 16) * (source[1] << 16 >> 16));\n    let mul3 = ((destination_high >> 16) * (source[1] >> 16));\n\n    let low = mul0 + mul1 | 0;\n    let high = mul2 + mul3 | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF6] = cpu => { cpu.unimplemented_sse(); };\nt[0xF7] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xF8] = cpu => {\n    // psubb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] - source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] - source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] - source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] - source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] - source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] - source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] - source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] - source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xF9] = cpu => {\n    // psubw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low - source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) - (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high - source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) - (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFA] = cpu => {\n    // psubd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low - source[0];\n    let high = destination_high - source[1];\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFB] = cpu => { cpu.unimplemented_sse(); };\n\nt[0xFC] = cpu => {\n    // paddb mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source64s = cpu.read_mmx_mem64s();\n    let source8s = new Int8Array(source64s.buffer);\n\n    let reg_offset = 8 * (cpu.modrm_byte >> 3 & 7);\n    let destination8s = cpu.reg_mmx8s;\n\n    let byte0 = (destination8s[reg_offset] + source8s[0]) & 0xFF;\n    let byte1 = (destination8s[reg_offset + 1] + source8s[1]) & 0xFF;\n    let byte2 = (destination8s[reg_offset + 2] + source8s[2]) & 0xFF;\n    let byte3 = (destination8s[reg_offset + 3] + source8s[3]) & 0xFF;\n    let byte4 = (destination8s[reg_offset + 4] + source8s[4]) & 0xFF;\n    let byte5 = (destination8s[reg_offset + 5] + source8s[5]) & 0xFF;\n    let byte6 = (destination8s[reg_offset + 6] + source8s[6]) & 0xFF;\n    let byte7 = (destination8s[reg_offset + 7] + source8s[7]) & 0xFF;\n\n    let low = byte0 | byte1 << 8 | byte2 << 16 | byte3 << 24;\n    let high = byte4 | byte5 << 8 | byte6 << 16 | byte7 << 24;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFD] = cpu => {\n    // paddw mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let word0 = (destination_low + source[0]) & 0xFFFF;\n    let word1 = ((destination_low >>> 16) + (source[0] >>> 16)) & 0xFFFF;\n    let low = word0 | word1 << 16;\n\n    let word2 = (destination_high + source[1]) & 0xFFFF;\n    let word3 = ((destination_high >>> 16) + (source[1] >>> 16)) & 0xFFFF;\n    let high = word2 | word3 << 16;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFE] = cpu => {\n    // paddd mm, mm/m64\n    dbg_assert((cpu.prefixes & (PREFIX_MASK_REP | PREFIX_MASK_OPSIZE)) == 0);\n    cpu.task_switch_test_mmx();\n    cpu.read_modrm_byte();\n\n    let source = cpu.read_mmx_mem64s();\n    let destination_low = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7)];\n    let destination_high = cpu.reg_mmxs[2 * (cpu.modrm_byte >> 3 & 7) + 1];\n\n    let low = destination_low + source[0] | 0;\n    let high = destination_high + source[1] | 0;\n\n    cpu.write_mmx64s(low, high);\n};\n\nt[0xFF] = cpu => {\n    // Windows 98\n    dbg_log(\"#ud: 0F FF\");\n    cpu.trigger_ud();\n};\n\n\nvar table0F_16 = [];\nvar table0F_32 = [];\nCPU.prototype.table0F_16 = table0F_16;\nCPU.prototype.table0F_32 = table0F_32;\n\nfor(i = 0; i < 256; i++)\n{\n    if(t[i])\n    {\n        //dbg_assert(!t16[i]);\n        //dbg_assert(!t32[i]);\n        table0F_16[i] = table0F_32[i] = t[i];\n    }\n    else if(t16[i])\n    {\n        //dbg_assert(!t[i]);\n        //dbg_assert(t32[i]);\n        table0F_16[i] = t16[i];\n        table0F_32[i] = t32[i];\n    }\n}\n","\"use strict\";\n\nCPU.prototype.debug_init = function()\n{\n    var cpu = this;\n    var debug = {};\n    this.debug = debug;\n\n    /**\n     * wheter or not in step mode\n     * used for debugging\n     * @type {boolean}\n     */\n    debug.step_mode = false;\n    debug.ops = undefined;\n    debug.all_ops = [];\n\n    debug.trace_all = false;\n\n    // \"log\" some information visually to the user.\n    // Also in non-DEBUG modes\n    debug.show = function(x)\n    {\n        if(typeof document !== \"undefined\")\n        {\n            var el = document.getElementById(\"log\");\n\n            if(el)\n            {\n                el.textContent += x + \"\\n\";\n                el.style.display = \"block\";\n                el.scrollTop = 1e9;\n                return;\n            }\n        }\n\n        console.log(x);\n    };\n\n    debug.init = function()\n    {\n        if(!DEBUG) return;\n\n        // used for debugging\n        debug.ops = new CircularQueue(200000);\n\n        if(cpu.io)\n        {\n            // write seabios debug output to console\n            var seabios_debug = \"\";\n\n            cpu.io.register_write(0x402, this, handle); // seabios\n            cpu.io.register_write(0x500, this, handle); // vgabios\n        }\n\n        function handle(out_byte)\n        {\n            if(out_byte === 10)\n            {\n                dbg_log(seabios_debug, LOG_BIOS);\n                seabios_debug = \"\";\n            }\n            else\n            {\n                seabios_debug += String.fromCharCode(out_byte);\n            }\n        }\n    };\n\n    debug.get_regs_short = get_regs_short;\n    debug.dump_regs = dump_regs_short;\n    debug.dump_instructions = dump_instructions;\n    debug.get_instructions = get_instructions;\n    debug.get_state = get_state;\n    debug.dump_state = dump_state;\n    debug.dump_stack = dump_stack;\n\n    debug.dump_page_directory = dump_page_directory;\n    debug.dump_gdt_ldt = dump_gdt_ldt;\n    debug.dump_idt = dump_idt;\n\n    debug.get_memory_dump = get_memory_dump;\n    debug.memory_hex_dump = memory_hex_dump;\n    debug.used_memory_dump = used_memory_dump;\n\n    debug.step = step;\n    debug.run_until = run_until;\n\n    /**\n     * @param {string=} msg\n     */\n    debug.unimpl = function(msg)\n    {\n        var s = \"Unimplemented\" + (msg ? \": \" + msg : \"\");\n\n        debug.show(s);\n\n        if(DEBUG)\n        {\n            console.trace();\n            return s;\n        }\n        else\n        {\n            debug.show(\"Execution stopped\");\n            return s;\n        }\n        //this.name = \"Unimplemented\";\n    };\n\n    function step()\n    {\n        if(!DEBUG) return;\n\n        if(!cpu.running)\n        {\n            cpu.cycle();\n        }\n\n        dump_regs_short();\n        var now = Date.now();\n\n        cpu.running = false;\n        dump_instructions();\n    }\n\n    function run_until()\n    {\n        if(!DEBUG) return;\n\n        cpu.running = false;\n        var a = parseInt(prompt(\"input hex\", \"\"), 16);\n        if(a) while(cpu.instruction_pointer != a) step();\n    }\n\n    // http://ref.x86asm.net/x86reference.xml\n    // for debuggin\" purposes\n    var opcode_map = [\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"PUSH\", \"POP\",\n        \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"OR\", \"PUSH\", \"0F:\",\n        \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"ADC\", \"PUSH\", \"POP\",\n        \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"SBB\", \"PUSH\", \"POP\",\n        \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"AND\", \"ES\", \"DAA\",\n        \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"SUB\", \"CS\", \"DAS\",\n        \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"XOR\", \"SS\", \"AAA\",\n        \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"CMP\", \"DS\", \"AAS\",\n        \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\", \"INC\",\n        \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\", \"DEC\",\n        \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\", \"PUSH\",\n        \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\", \"POP\",\n        \"PUSHA\", \"POPA\", \"BOUND\", \"ARPL\", \"FS\", \"GS\", \"none\", \"none\",\n        \"PUSH\", \"IMUL\", \"PUSH\", \"IMUL\", \"INS\", \"INS\", \"OUTS\", \"OUTS\",\n        \"JO\", \"JNO\", \"JB\", \"JNB\", \"JZ\", \"JNZ\", \"JBE\", \"JNBE\",\n        \"JS\", \"JNS\", \"JP\", \"JNP\", \"JL\", \"JNL\", \"JLE\", \"JNLE\",\n        \"ADD\", \"ADD\", \"ADD\", \"ADD\", \"TEST\", \"TEST\", \"XCHG\", \"XCHG\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"LEA\", \"MOV\", \"POP\",\n        \"NOP\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\", \"XCHG\",\n        \"CBW\", \"CWD\", \"CALLF\", \"FWAIT\", \"PUSHF\", \"POPF\", \"SAHF\", \"LAHF\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOVS\", \"MOVS\", \"CMPS\", \"CMPS\",\n        \"TEST\", \"TEST\", \"STOS\", \"STOS\", \"LODS\", \"LODS\", \"SCAS\", \"SCAS\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\", \"MOV\",\n        \"ROL\", \"ROL\", \"RETN\", \"RETN\", \"LES\", \"LDS\", \"MOV\", \"MOV\",\n        \"ENTER\", \"LEAVE\", \"RETF\", \"RETF\", \"INT\", \"INT\", \"INTO\", \"IRET\",\n        \"ROL\", \"ROL\", \"ROL\", \"ROL\", \"AAM\", \"AAD\", \"none\", \"XLAT\",\n        \"FADD\", \"FLD\", \"FIADD\", \"FILD\", \"FADD\", \"FLD\", \"FIADD\", \"FILD\",\n        \"LOOPNZ\", \"LOOPZ\", \"LOOP\", \"JCXZ\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"CALL\", \"JMP\", \"JMPF\", \"JMP\", \"IN\", \"IN\", \"OUT\", \"OUT\",\n        \"LOCK\", \"none\", \"REPNZ\", \"REPZ\", \"HLT\", \"CMC\", \"TEST\", \"TEST\",\n        \"CLC\", \"STC\", \"CLI\", \"STI\", \"CLD\", \"STD\", \"INC\", \"INC\"\n    ];\n\n    debug.logop = function(_ip, op)\n    {\n        if(!DEBUG || !debug.step_mode)\n        {\n            return;\n        }\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            debug.all_ops.push(_ip, op);\n        }\n        else if(debug.ops)\n        {\n            debug.ops.add(_ip);\n            debug.ops.add(op);\n        }\n    };\n\n    function dump_stack(start, end)\n    {\n        if(!DEBUG) return;\n\n        var esp = cpu.reg32[reg_esp];\n        dbg_log(\"========= STACK ==========\");\n\n        if(end >= start || end === undefined)\n        {\n            start = 5;\n            end = -5;\n        }\n\n        for(var i = start; i > end; i--)\n        {\n            var line = \"    \";\n\n            if(!i) line = \"=>  \";\n\n            line += h(i, 2) + \" | \";\n\n            dbg_log(line + h(esp + 4 * i, 8) + \" | \" + h(cpu.read32s(esp + 4 * i) >>> 0));\n        }\n    }\n\n    function get_state(where)\n    {\n        var vm = (cpu.flags & flag_vm) ? 1 : 0;\n        var mode = cpu.protected_mode ? vm ? \"vm86\" : \"prot\" : \"real\";\n        var flags = cpu.get_eflags();\n        var iopl = cpu.getiopl();\n        var cpl = cpu.cpl;\n        var cs_eip = h(cpu.sreg[reg_cs], 4) + \":\" + h(cpu.get_real_eip() >>> 0, 8);\n        var ss_esp = h(cpu.sreg[reg_ss], 4) + \":\" + h(cpu.get_stack_reg() >>> 0, 8);\n        var op_size = cpu.is_32 ? \"32\" : \"16\";\n        var if_ = (cpu.flags & flag_interrupt) ? 1 : 0;\n\n        var flag_names = {\n            [flag_carry]: \"c\",\n            [flag_parity]: \"p\",\n            [flag_adjust]: \"a\",\n            [flag_zero]: \"z\",\n            [flag_sign]: \"s\",\n            [flag_trap]: \"t\",\n            [flag_interrupt]: \"i\",\n            [flag_direction]: \"d\",\n            [flag_overflow]: \"o\",\n        };\n        var flag_string = \"\";\n\n        for(var i = 0; i < 16; i++)\n        {\n            if(flag_names[1 << i])\n            {\n                if(flags & 1 << i)\n                {\n                    flag_string += flag_names[1 << i];\n                }\n                else\n                {\n                    flag_string += \" \";\n                }\n            }\n        }\n\n        return (\"mode=\" + mode + \"/\" + op_size + \" paging=\" + (+cpu.paging) +\n                \" iopl=\" + iopl + \" cpl=\" + cpl + \" if=\" + if_ + \" cs:eip=\" + cs_eip +\n                \" cs_off=\" + h(cpu.get_seg(reg_cs) >>> 0, 8) +\n                \" flgs=\" + h(cpu.get_eflags() >>> 0, 6) + \" (\" + flag_string + \")\" +\n                \" ss:esp=\" + ss_esp +\n                \" ssize=\" + (+cpu.stack_size_32) +\n                (where ? \" in \" + where : \"\"));\n    }\n\n    function dump_state(where)\n    {\n        if(!DEBUG) return;\n\n        dbg_log(get_state(where), LOG_CPU);\n    }\n\n    function get_regs_short()\n    {\n        var\n            r32 = { \"eax\": reg_eax, \"ecx\": reg_ecx, \"edx\": reg_edx, \"ebx\": reg_ebx,\n                    \"esp\": reg_esp, \"ebp\": reg_ebp, \"esi\": reg_esi, \"edi\": reg_edi },\n            r32_names = [\"eax\", \"ecx\", \"edx\", \"ebx\", \"esp\", \"ebp\", \"esi\", \"edi\"],\n            s = { \"cs\": reg_cs, \"ds\": reg_ds, \"es\": reg_es, \"fs\": reg_fs, \"gs\": reg_gs, \"ss\": reg_ss },\n            line1 = \"\",\n            line2 = \"\";\n\n\n\n        for(var i = 0; i < 4; i++)\n        {\n            line1 += r32_names[i] + \"=\"  + h(cpu.reg32[r32[r32_names[i]]], 8) + \" \";\n            line2 += r32_names[i+4] + \"=\"  + h(cpu.reg32[r32[r32_names[i+4]]], 8) + \" \";\n        }\n\n        //line1 += \" eip=\" + h(cpu.get_real_eip() >>> 0, 8);\n        //line2 += \" flg=\" + h(cpu.get_eflags(), 8);\n\n        line1 += \"  ds=\" + h(cpu.sreg[reg_ds], 4) + \" es=\" + h(cpu.sreg[reg_es], 4) + \" fs=\" + h(cpu.sreg[reg_fs], 4);\n        line2 += \"  gs=\" + h(cpu.sreg[reg_gs], 4) + \" cs=\" + h(cpu.sreg[reg_cs], 4) + \" ss=\" + h(cpu.sreg[reg_ss], 4);\n\n        return [line1, line2];\n    }\n\n    function dump_regs_short()\n    {\n        if(!DEBUG) return;\n\n        var lines = get_regs_short();\n\n        dbg_log(lines[0], LOG_CPU);\n        dbg_log(lines[1], LOG_CPU);\n    }\n\n    function get_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.step_mode = true;\n\n        function add(ip, op)\n        {\n            out += h(ip, 8)  + \":        \" +\n                v86util.pads(opcode_map[op] || \"unkown\", 20) + h(op, 2) + \"\\n\";\n        }\n\n        var opcodes;\n        var out = \"\";\n\n        if(debug.trace_all && debug.all_ops)\n        {\n            opcodes = debug.all_ops;\n        }\n        else if(debug.ops)\n        {\n            opcodes = debug.ops.toArray();\n        }\n\n        if(!opcodes)\n        {\n            return \"\";\n        }\n\n        for(var i = 0; i < opcodes.length; i += 2)\n        {\n            add(opcodes[i], opcodes[i + 1]);\n        }\n\n        debug.ops.clear();\n        debug.all_ops = [];\n\n        return out;\n    }\n\n    function dump_instructions()\n    {\n        if(!DEBUG) return;\n\n        debug.show(get_instructions());\n    }\n\n    function dump_gdt_ldt()\n    {\n        if(!DEBUG) return;\n\n        dbg_log(\"gdt: (len = \" + h(cpu.gdtr_size) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.gdtr_offset), cpu.gdtr_size);\n\n        dbg_log(\"\\nldt: (len = \" + h(cpu.segment_limits[reg_ldtr]) + \")\");\n        dump_table(cpu.translate_address_system_read(cpu.segment_offsets[reg_ldtr]), cpu.segment_limits[reg_ldtr]);\n\n        function dump_table(addr, size)\n        {\n            for(var i = 0; i < size; i += 8, addr += 8)\n            {\n                var base = cpu.read16(addr + 2) |\n                        cpu.read8(addr + 4) << 16 |\n                        cpu.read8(addr + 7) << 24,\n\n                    limit = cpu.read16(addr) | (cpu.read8(addr + 6) & 0xF) << 16,\n                    access = cpu.read8(addr + 5),\n                    flags = cpu.read8(addr + 6) >> 4,\n                    flags_str = \"\",\n                    dpl = access >> 5 & 3;\n\n                if(!(access & 128))\n                {\n                    // present bit not set\n                    //continue;\n                    flags_str += \"NP \";\n                }\n                else\n                {\n                    flags_str += \" P \";\n                }\n\n                if(access & 16)\n                {\n                    if(flags & 4)\n                    {\n                        flags_str += \"32b \";\n                    }\n                    else\n                    {\n                        flags_str += \"16b \";\n                    }\n\n                    if(access & 8)\n                    {\n                        // executable\n                        flags_str += \"X \";\n\n                        if(access & 4)\n                        {\n                            flags_str += \"C \";\n                        }\n                    }\n                    else\n                    {\n                        // data\n                        flags_str += \"R \";\n                    }\n\n                    flags_str += \"RW \";\n                }\n                else\n                {\n                    // system\n                    flags_str += \"sys: \" + h(access & 15);\n                }\n\n                if(flags & 8)\n                {\n                    limit = limit << 12 | 0xFFF;\n                }\n\n                dbg_log(h(i & ~7, 4) + \" \" + h(base >>> 0, 8) + \" (\" + h(limit >>> 0, 8) + \" bytes) \" +\n                        flags_str + \";  dpl = \" + dpl + \", a = \" + access.toString(2) +\n                        \", f = \" + flags.toString(2));\n            }\n        }\n    }\n\n    function dump_idt()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < cpu.idtr_size; i += 8)\n        {\n            var addr = cpu.translate_address_system_read(cpu.idtr_offset + i),\n                base = cpu.read16(addr) | cpu.read16(addr + 6) << 16,\n                selector = cpu.read16(addr + 2),\n                type = cpu.read8(addr + 5),\n                line,\n                dpl = type >> 5 & 3;\n\n            if((type & 31) === 5)\n            {\n                line = \"task gate \";\n            }\n            else if((type & 31) === 14)\n            {\n                line = \"intr gate \";\n            }\n            else if((type & 31) === 15)\n            {\n                line = \"trap gate \";\n            }\n            else\n            {\n                line = \"invalid   \";\n            }\n\n\n            if(type & 128)\n            {\n                line += \" P\";\n            }\n            else\n            {\n                // present bit not set\n                //continue;\n                line += \"NP\";\n            }\n\n\n            dbg_log(h(i >> 3, 4) + \" \" + h(base >>> 0, 8) + \", \" +\n                    h(selector, 4) + \"; \" + line + \";  dpl = \" + dpl + \", t = \" + type.toString(2));\n        }\n    }\n\n    function load_page_entry(dword_entry, is_directory)\n    {\n        if(!DEBUG) return;\n\n        if(!(dword_entry & 1))\n        {\n            // present bit not set\n            return false;\n        }\n\n        var size = (dword_entry & 128) === 128,\n            address;\n\n        if(size && !is_directory)\n        {\n            address = dword_entry & 0xFFC00000;\n        }\n        else\n        {\n            address = dword_entry & 0xFFFFF000;\n        }\n\n        return {\n            size: size,\n            global: (dword_entry & 256) === 256,\n            accessed: (dword_entry & 0x20) === 0x20,\n            dirty: (dword_entry & 0x40) === 0x40,\n            cache_disable : (dword_entry & 16) === 16,\n            user : (dword_entry & 4) === 4,\n            read_write : (dword_entry & 2) === 2,\n            address : address >>> 0\n        };\n    }\n\n    function dump_page_directory()\n    {\n        if(!DEBUG) return;\n\n        for(var i = 0; i < 1024; i++)\n        {\n            var addr = cpu.cr[3] + 4 * i;\n            var dword = cpu.read32s(addr),\n                entry = load_page_entry(dword, true);\n\n            if(!entry)\n            {\n                continue;\n            }\n\n            var flags = \"\";\n\n            flags += entry.size ? \"S \" : \"  \";\n            flags += entry.accessed ? \"A \" : \"  \";\n            flags += entry.cache_disable ? \"Cd \" : \"  \";\n            flags += entry.user ? \"U \" : \"  \";\n            flags += entry.read_write ? \"Rw \" : \"   \";\n\n            if(entry.size)\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" -> \" + h(entry.address >>> 0, 8) + \" | \" + flags);\n                continue;\n            }\n            else\n            {\n                dbg_log(\"=== \" + h((i << 22) >>> 0, 8) + \" | \" + flags);\n            }\n\n            for(var j = 0; j < 1024; j++)\n            {\n                var sub_addr = entry.address + 4 * j;\n                dword = cpu.read32s(sub_addr);\n\n                var subentry = load_page_entry(dword, false);\n\n                if(subentry)\n                {\n                    flags = \"\";\n\n                    flags += subentry.cache_disable ? \"Cd \" : \"   \";\n                    flags += subentry.user ? \"U \" : \"  \";\n                    flags += subentry.read_write ? \"Rw \" : \"   \";\n                    flags += subentry.global ? \"G \" : \"  \";\n                    flags += subentry.accessed ? \"A \" : \"  \";\n                    flags += subentry.dirty ? \"Di \" : \"   \";\n\n                    dbg_log(\"# \" + h((i << 22 | j << 12) >>> 0, 8) + \" -> \" +\n                            h(subentry.address, 8) + \" | \" + flags + \"        (at \" + h(sub_addr, 8) + \")\");\n                }\n            }\n        }\n    }\n\n\n    function get_memory_dump(start, count)\n    {\n        if(!DEBUG) return;\n\n        if(start === undefined)\n        {\n            start = 0;\n            count = cpu.memory_size;\n        }\n        else if(count === undefined)\n        {\n            count = start;\n            start = 0;\n        }\n\n        return cpu.mem8.slice(start, start + count).buffer;\n    }\n\n\n    function memory_hex_dump(addr, length)\n    {\n        if(!DEBUG) return;\n\n        length = length || 4 * 0x10;\n        var line, byt;\n\n        for(var i = 0; i < length >> 4; i++)\n        {\n            line = h(addr + (i << 4), 5) + \"   \";\n\n            for(var j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += h(byt, 2) + \" \";\n            }\n\n            line += \"  \";\n\n            for(j = 0; j < 0x10; j++)\n            {\n                byt = cpu.read8(addr + (i << 4) + j);\n                line += (byt < 33 || byt > 126) ? \".\" : String.fromCharCode(byt);\n            }\n\n            dbg_log(line);\n        }\n    }\n\n    function used_memory_dump()\n    {\n        if(!DEBUG) return;\n\n        var width = 0x80,\n            height = 0x10,\n            block_size = cpu.memory_size / width / height | 0,\n            row;\n\n        for(var i = 0; i < height; i++)\n        {\n            row = h(i * width * block_size, 8) + \" | \";\n\n            for(var j = 0; j < width; j++)\n            {\n                var used = cpu.mem32s[(i * width + j) * block_size] > 0;\n\n                row += used ? \"X\" : \" \";\n            }\n\n            dbg_log(row);\n        }\n    }\n\n\n    debug.debug_interrupt = function(interrupt_nr)\n    {\n        //if(interrupt_nr === 0x20)\n        //{\n        //    //var vxd_device = cpu.safe_read16(cpu.instruction_pointer + 2);\n        //    //var vxd_sub = cpu.safe_read16(cpu.instruction_pointer + 0);\n        //    //var service = \"\";\n        //    //if(vxd_device === 1)\n        //    //{\n        //    //    service = vxd_table1[vxd_sub];\n        //    //}\n        //    //dbg_log(\"vxd: \" + h(vxd_device, 4) + \" \" + h(vxd_sub, 4) + \" \" + service);\n        //}\n\n        //if(interrupt_nr >= 0x21 && interrupt_nr < 0x30)\n        //{\n        //    dbg_log(\"dos: \" + h(interrupt_nr, 2) + \" ah=\" + h(this.reg8[reg_ah], 2) + \" ax=\" + h(this.reg16[reg_ax], 4));\n        //}\n\n        //if(interrupt_nr === 0x13 && (this.reg8[reg_ah] | 1) === 0x43)\n        //{\n        //    this.debug.memory_hex_dump(this.get_seg(reg_ds) + this.reg16[reg_si], 0x18);\n        //}\n\n        //if(interrupt_nr == 0x10)\n        //{\n        //    dbg_log(\"int10 ax=\" + h(this.reg16[reg_ax], 4) + \" '\" + String.fromCharCode(this.reg8[reg_al]) + \"'\");\n        //    this.debug.dump_regs_short();\n        //    if(this.reg8[reg_ah] == 0xe) vga.tt_write(this.reg8[reg_al]);\n        //}\n\n        //if(interrupt_nr === 0x13)\n        //{\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 6)\n        //{\n        //    this.instruction_pointer += 2;\n        //    dbg_log(\"BUG()\", LOG_CPU);\n        //    dbg_log(\"line=\" + this.read_imm16() + \" \" +\n        //            \"file=\" + this.read_string(this.translate_address_read(this.read_imm32s())), LOG_CPU);\n        //    this.instruction_pointer -= 8;\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x80)\n        //{\n        //    dbg_log(\"linux syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n\n        //if(interrupt_nr === 0x40)\n        //{\n        //    dbg_log(\"kolibri syscall\");\n        //    this.debug.dump_regs_short();\n        //}\n    };\n};\n","\"use strict\";\n\n// A minimal elf parser for loading 32 bit, x86, little endian, executable elf files\n\nconst ELF_MAGIC = 0x464C457F;\n\nlet types = DataView.prototype;\nlet U8 = { size: 1, get: types.getUint8, set: types.setUint8, };\nlet U16 = { size: 2, get: types.getUint16, set: types.setUint16, };\nlet U32 = { size: 4, get: types.getUint32, set: types.setUint32, };\nlet pad = function(size)\n{\n    return {\n        size,\n        get: offset => -1,\n    };\n};\n\nlet Header = create_struct([\n    { magic: U32, },\n\n    { class: U8, },\n    { data: U8, },\n    { version0: U8, },\n    { osabi: U8, },\n\n    { abiversion: U8, },\n    { pad0: pad(7) },\n\n    { type: U16, },\n    { machine: U16, },\n\n    { version1: U32, },\n    { entry: U32, },\n    { phoff: U32, },\n    { shoff: U32, },\n    { flags: U32, },\n\n    { ehsize: U16, },\n    { phentsize: U16, },\n    { phnum: U16, },\n    { shentsize: U16, },\n    { shnum: U16, },\n    { shstrndx: U16, },\n]);\nconsole.assert(Header.reduce((a, entry) => a + entry.size, 0) === 52);\n\nlet ProgramHeader = create_struct([\n    { type: U32, },\n    { offset: U32, },\n    { vaddr: U32, },\n    { paddr: U32, },\n    { filesz: U32, },\n    { memsz: U32, },\n    { flags: U32, },\n    { align: U32, },\n]);\nconsole.assert(ProgramHeader.reduce((a, entry) => a + entry.size, 0) === 32);\n\nlet SectionHeader = create_struct([\n    { name: U32, },\n    { type: U32, },\n    { flags: U32, },\n    { addr: U32, },\n    { offset: U32, },\n    { size: U32, },\n    { link: U32, },\n    { info: U32, },\n    { addralign: U32, },\n    { entsize: U32, },\n]);\nconsole.assert(SectionHeader.reduce((a, entry) => a + entry.size, 0) === 40);\n\n\n// From [{ name: type }, ...] to [{ name, type, size, get, set }, ...]\nfunction create_struct(struct)\n{\n    return struct.map(function(entry)\n    {\n        let keys = Object.keys(entry);\n        console.assert(keys.length === 1);\n        let name = keys[0];\n        let type = entry[name];\n\n        console.assert(type.size > 0);\n\n        return {\n            name,\n            type,\n            size: type.size,\n            get: type.get,\n            set: type.set,\n        };\n    });\n}\n\n/** @param {ArrayBuffer} buffer */\nfunction read_elf(buffer)\n{\n    let view = new DataView(buffer);\n\n    let [header, offset] = read_struct(view, Header);\n    console.assert(offset === 52);\n\n    if(DEBUG)\n    {\n        for(let key in header)\n        {\n            console.log(key + \": 0x\" + header[key].toString(16));\n        }\n        console.log(header);\n    }\n\n    console.assert(header.magic === ELF_MAGIC, \"Bad magic\");\n    console.assert(header.class === 1, \"Unimplemented: 64 bit elf\");\n    console.assert(header.data === 1, \"Unimplemented: big endian\");\n    console.assert(header.version0 === 1, \"Bad version0\");\n\n    // 1, 2, 3, 4 specify whether the object is relocatable, executable,\n    // shared, or core, respectively.\n    console.assert(header.type === 2, \"Unimplemented type\");\n\n    console.assert(header.version1 === 1, \"Bad version1\");\n\n    // these are different in 64 bit\n    console.assert(header.ehsize === 52, \"Bad header size\");\n    console.assert(header.phentsize === 32, \"Bad program header size\");\n    console.assert(header.shentsize === 40, \"Bad section header size\");\n\n    let [program_headers, ph_offset] = read_structs(\n        view_slice(view, header.phoff, header.phentsize * header.phnum),\n        ProgramHeader,\n        header.phnum);\n\n    let [sections_headers, sh_offset] = read_structs(\n        view_slice(view, header.shoff, header.shentsize * header.shnum),\n        SectionHeader,\n        header.shnum);\n\n    if(DEBUG)\n    {\n        console.log(\"%d program headers:\", program_headers.length);\n        for(let program of program_headers)\n        {\n            console.log(\n                \"type=%s offset=%s vaddr=%s paddr=%s \" +\n                \"filesz=%s memsz=%s flags=%s align=%s\",\n                program.type.toString(16),\n                program.offset.toString(16),\n                program.vaddr.toString(16),\n                program.paddr.toString(16),\n                program.filesz.toString(16),\n                program.memsz.toString(16),\n                program.flags.toString(16),\n                program.align.toString(16)\n            );\n        }\n\n        console.log(\"%d program headers:\", sections_headers.length);\n        for(let section of sections_headers)\n        {\n            console.log(\n                \"name=%s type=%s flags=%s addr=%s offset=%s \" +\n                \"size=%s link=%s info=%s addralign=%s entsize=%s\",\n                section.name.toString(16),\n                section.type.toString(16),\n                section.flags.toString(16),\n                section.addr.toString(16),\n                section.offset.toString(16),\n                section.size.toString(16),\n                section.link.toString(16),\n                section.info.toString(16),\n                section.addralign.toString(16),\n                section.entsize.toString(16)\n            );\n        }\n    }\n\n    return {\n        header,\n        program_headers,\n        sections_headers,\n    };\n}\n\nfunction read_struct(view, Struct)\n{\n    let result = {};\n    let offset = 0;\n    const LITTLE_ENDIAN = true; // big endian not supported yet\n\n    for(let entry of Struct)\n    {\n        let value = entry.get.call(view, offset, LITTLE_ENDIAN);\n        console.assert(result[entry.name] === undefined);\n        result[entry.name] = value;\n        offset += entry.size;\n    }\n\n    return [result, offset];\n}\n\nfunction read_structs(view, Struct, count)\n{\n    let result = [];\n    let offset = 0;\n\n    for(var i = 0; i < count; i++)\n    {\n        let [s, size] = read_struct(view_slice(view, offset), Struct);\n        result.push(s);\n        offset += size;\n    }\n\n    return [result, offset];\n}\n\n/** @param {number=} length */\nfunction view_slice(view, offset, length)\n{\n    return new DataView(view.buffer, view.byteOffset + offset, length);\n}\n","// -------------------------------------------------\n// ------------------ Marshall ---------------------\n// -------------------------------------------------\n// helper functions for virtio and 9p.\n\nvar marshall = {};\n\n\n// Inserts data from an array to a byte aligned struct in memory\nmarshall.Marshall = function(typelist, input, struct, offset) {\n    var item;\n    var size = 0;\n    for (var i=0; i < typelist.length; i++) {\n        item = input[i];\n        switch (typelist[i]) {\n            case \"w\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                size += 4;\n                break;\n            case \"d\": // double word\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = (item >> 8) & 0xFF;\n                struct[offset++] = (item >> 16) & 0xFF;\n                struct[offset++] = (item >> 24) & 0xFF;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                struct[offset++] = 0x0;\n                size += 8;\n                break;\n            case \"h\":\n                struct[offset++] = item & 0xFF;\n                struct[offset++] = item >> 8;\n                size += 2;\n                break;\n            case \"b\":\n                struct[offset++] = item;\n                size += 1;\n                break;\n            case \"s\":\n                var lengthoffset = offset;\n                var length = 0;\n                struct[offset++] = 0; // set the length later\n                struct[offset++] = 0;\n                size += 2;\n                for (var j in item) {\n                    var utf8 = UnicodeToUTF8Stream(item.charCodeAt(j));\n                    utf8.forEach( function(c) {\n                        struct[offset++] = c;\n                        size += 1;\n                        length++;\n                    });\n                }\n                struct[lengthoffset+0] = length & 0xFF;\n                struct[lengthoffset+1] = (length >> 8) & 0xFF;\n                break;\n            case \"Q\":\n                marshall.Marshall([\"b\", \"w\", \"d\"], [item.type, item.version, item.path], struct, offset)\n                offset += 13;\n                size += 13;\n                break;\n            default:\n                message.Debug(\"Marshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return size;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall = function(typelist, struct, offset) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = struct[offset++];\n                val += struct[offset++] << 8;\n                val += struct[offset++] << 16;\n                val += (struct[offset++] << 24) >>> 0;\n                offset += 4;\n                output.push(val);\n                break;\n            case \"h\":\n                var val = struct[offset++];\n                output.push(val + (struct[offset++] << 8));\n                break;\n            case \"b\":\n                output.push(struct[offset++]);\n                break;\n            case \"s\":\n                var len = struct[offset++];\n                len += struct[offset++] << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(struct[offset++])\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n\n// Extracts data from a byte aligned struct in memory to an array\nmarshall.Unmarshall2 = function(typelist, GetByte) {\n    var output = [];\n    for (var i=0; i < typelist.length; i++) {\n        switch (typelist[i]) {\n            case \"w\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                output.push(val);\n                break;\n            case \"d\":\n                var val = GetByte();\n                val += GetByte() << 8;\n                val += GetByte() << 16;\n                val += (GetByte() << 24) >>> 0;\n                GetByte();GetByte();GetByte();GetByte();\n                output.push(val);\n                break;\n            case \"h\":\n                var val = GetByte();\n                output.push(val + (GetByte() << 8));\n                break;\n            case \"b\":\n                output.push(GetByte());\n                break;\n            case \"s\":\n                var len = GetByte();\n                len += GetByte() << 8;\n                var str = '';\n                var utf8converter = new UTF8StreamToUnicode();\n                for (var j=0; j < len; j++) {\n                    var c = utf8converter.Put(GetByte())\n                    if (c == -1) continue;\n                    str += String.fromCharCode(c);\n                }\n                output.push(str);\n                break;\n            default:\n                message.Debug(\"Error in Unmarshall2: Unknown type=\" + typelist[i]);\n                break;\n        }\n    }\n    return output;\n};\n\n","// -------------------------------------------------\n// ------------------ UTF8 Helpers -----------------\n// -------------------------------------------------\n\n\"use strict\";\n\nvar UTF8 = {}\n\n/** @constructor */\nfunction UTF8StreamToUnicode() {\n\n    this.stream = new Uint8Array(5);\n    this.ofs = 0;\n\n    this.Put = function(key) {\n        this.stream[this.ofs] = key;\n        this.ofs++;\n        switch(this.ofs) {\n            case 1:\n                if (this.stream[0] < 128) {\n                    this.ofs = 0;\n                    return this.stream[0];\n                }\n                break;\n\n            case 2:\n                if ((this.stream[0]&0xE0) == 0xC0)\n                if ((this.stream[1]&0xC0) == 0x80) {\n                    this.ofs = 0;\n                    return ((this.stream[0]&0x1F)<<6) | (this.stream[1]&0x3F);\n                }\n                break;\n\n            case 3:\n                break;\n\n            case 4:\n                break;\n\n            default:\n                return -1;\n                //this.ofs = 0;\n                //break;\n        }\n        return -1;\n    }\n}\n\nfunction UnicodeToUTF8Stream(key)\n{\n        if (key < 0x80)  return [key];\n        if (key < 0x800) return [0xC0|((key>>6)&0x1F), 0x80|(key&0x3F)];\n}\n\nUTF8.UTF8Length = function(s)\n{\n    var length = 0;\n    for(var i=0; i<s.length; i++) {\n        var c = s.charCodeAt(i);\n        length += c<128?1:2;\n    }\n    return length;\n}\n","\"use strict\";\n\n/** @const */\nvar SHIFT_SCAN_CODE = 0x2A;\n\n/** @const */\nvar SCAN_CODE_RELEASE = 0x80;\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction KeyboardAdapter(bus)\n{\n    var\n        /**\n         * @type {!Object.<boolean>}\n         */\n        keys_pressed = {},\n\n        keyboard = this;\n\n    /**\n     * Set by emulator\n     * @type {boolean}\n     */\n    this.emu_enabled = true;\n\n    /**\n     * Format:\n     * Javascript event.keyCode -> make code\n     * @const\n     */\n    var charmap = new Uint16Array([\n        0, 0, 0, 0,  0, 0, 0, 0,\n        // 0x08: backspace, tab, enter\n        0x0E, 0x0F, 0, 0,  0, 0x1C, 0, 0,\n\n        // 0x10: shift, ctrl, alt, pause, caps lock\n        0x2A, 0x1D, 0x38, 0,  0x3A, 0, 0, 0,\n\n        // 0x18: escape\n        0, 0, 0, 0x01,  0, 0, 0, 0,\n\n        // 0x20: spacebar, page down/up, end, home, arrow keys, ins, del\n        0x39, 0xE049, 0xE051, 0xE04F,  0xE047, 0xE04B, 0xE048, 0xE04D,\n        0x50, 0, 0, 0,  0, 0x52, 0x53, 0,\n\n        // 0x30: numbers\n        0x0B, 0x02, 0x03, 0x04,  0x05, 0x06, 0x07, 0x08,\n        0x09, 0x0A,\n\n        // 0x3B: ;= (firefox only)\n        0, 0x27, 0, 0x0D, 0, 0,\n\n        // 0x40\n        0,\n\n        // 0x41: letters\n        0x1E, 0x30, 0x2E, 0x20, 0x12, 0x21, 0x22, 0x23, 0x17, 0x24, 0x25, 0x26, 0x32,\n        0x31, 0x18, 0x19, 0x10, 0x13, 0x1F, 0x14, 0x16, 0x2F, 0x11, 0x2D, 0x15, 0x2C,\n\n        // 0x5B: Left Win, Right Win, Menu\n        0xE05B, 0xE05C, 0xE05D, 0, 0,\n\n        // 0x60: keypad\n        0x52, 0x4F, 0x50, 0x51, 0x4B, 0x4C, 0x4D, 0x47,\n        0x48, 0x49, 0, 0, 0, 0, 0, 0,\n\n        // 0x70: F1 to F12\n        0x3B, 0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43, 0x44, 0x57, 0x58,\n\n        0, 0, 0, 0,\n\n        // 0x80\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0, 0, 0,\n\n        // 0x90: Numlock\n        0x45, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xA0: - (firefox only)\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,  0, 0x0C, 0, 0,\n\n        // 0xB0\n        // ,\n        0, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0x27, 0x0D,  0x33, 0x0C, 0x34, 0x35,\n\n        // 0xC0\n        // `\n        0x29, 0, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,     0, 0, 0, 0,\n\n        // 0xD0\n        // [']\\\n        0, 0, 0, 0,     0, 0, 0, 0,\n        0, 0, 0, 0x1A,  0x2B, 0x1B, 0x28, 0,\n\n        // 0xE0\n        // Apple key on Gecko, Right alt\n        0xE05B, 0xE038, 0, 0,  0, 0, 0, 0,\n        0, 0, 0, 0,            0, 0, 0, 0,\n    ]);\n\n\n    /**\n     * ascii -> javascript event code (US layout)\n     * @const\n     */\n    var asciimap = {10: 13, 32: 32, 39: 222, 44: 188, 45: 189, 46: 190, 47: 191, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56, 57: 57, 59: 186, 61: 187, 91: 219, 92: 220, 93: 221, 96: 192, 97: 65, 98: 66, 99: 67, 100: 68, 101: 69, 102: 70, 103: 71, 104: 72, 105: 73, 106: 74, 107: 75, 108: 76, 109: 77, 110: 78, 111: 79, 112: 80, 113: 81, 114: 82, 115: 83, 116: 84, 117: 85, 118: 86, 119: 87, 120: 88, 121: 89, 122: 90};\n    var asciimap_shift = {33: 49, 34: 222, 35: 51, 36: 52, 37: 53, 38: 55, 40: 57, 41: 48, 42: 56, 43: 187, 58: 186, 60: 188, 62: 190, 63: 191, 64: 50, 65: 65, 66: 66, 67: 67, 68: 68, 69: 69, 70: 70, 71: 71, 72: 72, 73: 73, 74: 74, 75: 75, 76: 76, 77: 77, 78: 78, 79: 79, 80: 80, 81: 81, 82: 82, 83: 83, 84: 84, 85: 85, 86: 86, 87: 87, 88: 88, 89: 89, 90: 90, 94: 54, 95: 189, 123: 219, 124: 220, 125: 221, 126: 192};\n\n    // From:\n    // https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/code#Code_values_on_Linux_%28X11%29_%28When_scancode_is_available%29\n    // http://stanislavs.org/helppc/make_codes.html\n    // http://www.computer-engineering.org/ps2keyboard/scancodes1.html\n    //\n    // Mapping from event.code to scancode\n    var codemap = {\n        \"Escape\": 0x0001,\n        \"Digit1\": 0x0002,\n        \"Digit2\": 0x0003,\n        \"Digit3\": 0x0004,\n        \"Digit4\": 0x0005,\n        \"Digit5\": 0x0006,\n        \"Digit6\": 0x0007,\n        \"Digit7\": 0x0008,\n        \"Digit8\": 0x0009,\n        \"Digit9\": 0x000a,\n        \"Digit0\": 0x000b,\n        \"Minus\": 0x000c,\n        \"Equal\": 0x000d,\n        \"Backspace\": 0x000e,\n        \"Tab\": 0x000f,\n        \"KeyQ\": 0x0010,\n        \"KeyW\": 0x0011,\n        \"KeyE\": 0x0012,\n        \"KeyR\": 0x0013,\n        \"KeyT\": 0x0014,\n        \"KeyY\": 0x0015,\n        \"KeyU\": 0x0016,\n        \"KeyI\": 0x0017,\n        \"KeyO\": 0x0018,\n        \"KeyP\": 0x0019,\n        \"BracketLeft\": 0x001a,\n        \"BracketRight\": 0x001b,\n        \"Enter\": 0x001c,\n        \"ControlLeft\": 0x001d,\n        \"KeyA\": 0x001e,\n        \"KeyS\": 0x001f,\n        \"KeyD\": 0x0020,\n        \"KeyF\": 0x0021,\n        \"KeyG\": 0x0022,\n        \"KeyH\": 0x0023,\n        \"KeyJ\": 0x0024,\n        \"KeyK\": 0x0025,\n        \"KeyL\": 0x0026,\n        \"Semicolon\": 0x0027,\n        \"Quote\": 0x0028,\n        \"Backquote\": 0x0029,\n        \"ShiftLeft\": 0x002a,\n        \"Backslash\": 0x002b,\n        \"KeyZ\": 0x002c,\n        \"KeyX\": 0x002d,\n        \"KeyC\": 0x002e,\n        \"KeyV\": 0x002f,\n        \"KeyB\": 0x0030,\n        \"KeyN\": 0x0031,\n        \"KeyM\": 0x0032,\n        \"Comma\": 0x0033,\n        \"Period\": 0x0034,\n        \"Slash\": 0x0035,\n        \"ShiftRight\": 0x0036,\n        \"NumpadMultiply\": 0x0037,\n        \"AltLeft\": 0x0038,\n        \"Space\": 0x0039,\n        \"CapsLock\": 0x003a,\n        \"F1\": 0x003b,\n        \"F2\": 0x003c,\n        \"F3\": 0x003d,\n        \"F4\": 0x003e,\n        \"F5\": 0x003f,\n        \"F6\": 0x0040,\n        \"F7\": 0x0041,\n        \"F8\": 0x0042,\n        \"F9\": 0x0043,\n        \"F10\": 0x0044,\n        \"NumLock\": 0x0045,\n        \"ScrollLock\": 0x0046,\n        \"Numpad7\": 0x0047,\n        \"Numpad8\": 0x0048,\n        \"Numpad9\": 0x0049,\n        \"NumpadSubtract\": 0x004a,\n        \"Numpad4\": 0x004b,\n        \"Numpad5\": 0x004c,\n        \"Numpad6\": 0x004d,\n        \"NumpadAdd\": 0x004e,\n        \"Numpad1\": 0x004f,\n        \"Numpad2\": 0x0050,\n        \"Numpad3\": 0x0051,\n        \"Numpad0\": 0x0052,\n        \"NumpadDecimal\": 0x0053,\n        \"IntlBackslash\": 0x0056,\n        \"F11\": 0x0057,\n        \"F12\": 0x0058,\n\n        \"NumpadEnter\": 0xe01c,\n        \"ControlRight\": 0xe01d,\n        \"NumpadDivide\": 0xe035,\n        //\"PrintScreen\": 0x0063,\n        \"AltRight\": 0xe038,\n        \"Home\": 0xe04f,\n        \"ArrowUp\": 0xe048,\n        \"PageUp\": 0xe049,\n        \"ArrowLeft\": 0xe04b,\n        \"ArrowRight\": 0xe04d,\n        \"End\": 0xe04f,\n        \"ArrowDown\": 0xe050,\n        \"PageDown\": 0xe051,\n        \"Insert\": 0xe052,\n        \"Delete\": 0xe053,\n\n        \"OSLeft\": 0xe05b,\n        \"OSRight\": 0xe05c,\n        \"ContextMenu\": 0xe05d,\n    };\n\n    this.bus = bus;\n\n    this.destroy = function()\n    {\n        if(typeof window !== \"undefined\")\n        {\n            window.removeEventListener(\"keyup\", keyup_handler, false);\n            window.removeEventListener(\"keydown\", keydown_handler, false);\n            window.removeEventListener(\"blur\", blur_handler, false);\n        }\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"keyup\", keyup_handler, false);\n        window.addEventListener(\"keydown\", keydown_handler, false);\n        window.addEventListener(\"blur\", blur_handler, false);\n    };\n    this.init();\n\n    this.simulate_press = function(code)\n    {\n        var ev = { keyCode: code };\n        handler(ev, true);\n        handler(ev, false);\n    };\n\n    this.simulate_char = function(chr)\n    {\n        var code = chr.charCodeAt(0);\n\n        if(code in asciimap)\n        {\n            this.simulate_press(asciimap[code]);\n        }\n        else if(code in asciimap_shift)\n        {\n            send_to_controller(SHIFT_SCAN_CODE);\n            this.simulate_press(asciimap_shift[code]);\n            send_to_controller(SHIFT_SCAN_CODE | SCAN_CODE_RELEASE);\n        }\n        else\n        {\n            console.log(\"ascii -> keyCode not found: \", code, chr);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(e.shiftKey && e.ctrlKey && (e.keyCode === 74 || e.keyCode === 75))\n        {\n              // don't prevent opening chromium dev tools\n              // maybe add other important combinations here, too\n              return false;\n        }\n\n        if(!keyboard.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.target)\n        {\n            // className shouldn't be hardcoded here\n            return e.target.className === \"phone_keyboard\" ||\n                (e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\");\n        }\n        else\n        {\n            return true;\n        }\n    }\n\n    function translate(e)\n    {\n        if(e.code !== undefined)\n        {\n            var code = codemap[e.code];\n\n            if(code !== undefined)\n            {\n                return code;\n            }\n        }\n\n        return charmap[e.keyCode];\n    }\n\n    function keyup_handler(e)\n    {\n        if(!e.altKey && keys_pressed[0x38])\n        {\n            // trigger ALT keyup manually - some browsers don't\n            // see issue #165\n            handle_code(0x38, false);\n        }\n        return handler(e, false);\n    }\n\n    function keydown_handler(e)\n    {\n        if(!e.altKey && keys_pressed[0x38])\n        {\n            // trigger ALT keyup manually - some browsers don't\n            // see issue #165\n            handle_code(0x38, false);\n        }\n        return handler(e, true);\n    }\n\n    function blur_handler(e)\n    {\n        // trigger keyup for all pressed keys\n        var keys = Object.keys(keys_pressed),\n            key;\n\n        for(var i = 0; i < keys.length; i++)\n        {\n            key = +keys[i];\n\n            if(keys_pressed[key])\n            {\n                handle_code(key, false);\n            }\n        }\n\n        keys_pressed = {};\n    }\n\n    /**\n     * @param {boolean} keydown\n     */\n    function handler(e, keydown)\n    {\n        if(!keyboard.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var code = translate(e);\n\n        if(!code)\n        {\n            console.log(\"Missing char in map: \" + e.keyCode.toString(16));\n            return;\n        }\n\n        handle_code(code, keydown);\n\n        e.preventDefault && e.preventDefault();\n\n        return false;\n    }\n\n    /**\n     * @param {number} code\n     * @param {boolean} keydown\n     */\n    function handle_code(code, keydown)\n    {\n        if(keydown)\n        {\n            if(keys_pressed[code])\n            {\n                handle_code(code, false);\n            }\n        }\n        else\n        {\n            if(!keys_pressed[code])\n            {\n                // stray keyup\n                return;\n            }\n        }\n\n        keys_pressed[code] = keydown;\n\n        if(!keydown)\n        {\n            code |= 0x80;\n        }\n        //console.log(\"Key: \" + code.toString(16) + \" from \" + chr.toString(16) + \" down=\" + keydown);\n\n        if(code > 0xFF)\n        {\n            // prefix\n            send_to_controller(code >> 8);\n            send_to_controller(code & 0xFF);\n        }\n        else\n        {\n            send_to_controller(code);\n        }\n    }\n\n    function send_to_controller(code)\n    {\n        keyboard.bus.send(\"keyboard-code\", code);\n    }\n}\n\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction MouseAdapter(bus, screen_container)\n{\n    /** @const */\n    var SPEED_FACTOR = 0.15;\n\n    var left_down = false,\n        right_down = false,\n        middle_down = false,\n\n        last_x = 0,\n        last_y = 0,\n\n        mouse = this;\n\n    // set by controller\n    this.enabled = false;\n\n    // set by emulator\n    this.emu_enabled = true;\n\n    this.bus = bus;\n\n    this.bus.register(\"mouse-enable\", function(enabled)\n    {\n        this.enabled = enabled;\n    }, this);\n\n    this.destroy = function()\n    {\n        window.removeEventListener(\"touchstart\", touch_start_handler, false);\n        window.removeEventListener(\"touchend\", touch_end_handler, false);\n        window.removeEventListener(\"touchmove\", mousemove_handler, false);\n        window.removeEventListener(\"mousemove\", mousemove_handler, false);\n        window.removeEventListener(\"mousedown\", mousedown_handler, false);\n        window.removeEventListener(\"mouseup\", mouseup_handler, false);\n        window.removeEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.removeEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n\n    this.init = function()\n    {\n        if(typeof window === \"undefined\")\n        {\n            return;\n        }\n        this.destroy();\n\n        window.addEventListener(\"touchstart\", touch_start_handler, false);\n        window.addEventListener(\"touchend\", touch_end_handler, false);\n        window.addEventListener(\"touchmove\", mousemove_handler, false);\n        window.addEventListener(\"mousemove\", mousemove_handler, false);\n        window.addEventListener(\"mousedown\", mousedown_handler, false);\n        window.addEventListener(\"mouseup\", mouseup_handler, false);\n        window.addEventListener(\"DOMMouseScroll\", mousewheel_handler, false);\n        window.addEventListener(\"mousewheel\", mousewheel_handler, false);\n    };\n    this.init();\n\n    function is_child(child, parent)\n    {\n        while(child.parentNode)\n        {\n            if(child === parent)\n            {\n                return true;\n            }\n            child = child.parentNode;\n        }\n\n        return false;\n    }\n\n    function may_handle(e)\n    {\n        if(!mouse.enabled || !mouse.emu_enabled)\n        {\n            return false;\n        }\n\n        if(e.type === \"mousemove\" || e.type === \"touchmove\")\n        {\n            return true;\n        }\n\n        if(e.type === \"mousewheel\" || e.type === \"DOMMouseScroll\")\n        {\n            var parent = screen_container || document.body;\n            return is_child(e.target, parent);\n        }\n\n        return !e.target || e.target.nodeName !== \"INPUT\" && e.target.nodeName !== \"TEXTAREA\";\n    }\n\n    function touch_start_handler(e)\n    {\n        if(may_handle(e))\n        {\n            var touches = e[\"changedTouches\"];\n\n            if(touches && touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n            }\n        }\n    }\n\n    function touch_end_handler(e)\n    {\n        if(left_down || middle_down || right_down)\n        {\n            mouse.bus.send(\"mouse-click\", [false, false, false]);\n            left_down = middle_down = right_down = false;\n        }\n    }\n\n    function mousemove_handler(e)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = 0;\n        var delta_y = 0;\n\n        var touches = e[\"changedTouches\"];\n\n        if(touches)\n        {\n            if(touches.length)\n            {\n                var touch = touches[touches.length - 1];\n                delta_x = touch.clientX - last_x;\n                delta_y = touch.clientY - last_y;\n\n                last_x = touch.clientX;\n                last_y = touch.clientY;\n\n                e.preventDefault();\n            }\n        }\n        else\n        {\n            if(typeof e[\"movementX\"] === \"number\")\n            {\n                delta_x = e[\"movementX\"];\n                delta_y = e[\"movementY\"];\n            }\n            else if(typeof e[\"webkitMovementX\"] === \"number\")\n            {\n                delta_x = e[\"webkitMovementX\"];\n                delta_y = e[\"webkitMovementY\"];\n            }\n            else if(typeof e[\"mozMovementX\"] === \"number\")\n            {\n                delta_x = e[\"mozMovementX\"];\n                delta_y = e[\"mozMovementY\"];\n            }\n            else\n            {\n                // Fallback for other browsers?\n                delta_x = e.clientX - last_x;\n                delta_y = e.clientY - last_y;\n\n                last_x = e.clientX;\n                last_y = e.clientY;\n            }\n        }\n\n        if(SPEED_FACTOR !== 1)\n        {\n            delta_x = delta_x * SPEED_FACTOR;\n            delta_y = delta_y * SPEED_FACTOR;\n        }\n\n        //if(Math.abs(delta_x) > 100 || Math.abs(delta_y) > 100)\n        //{\n        //    // Large mouse delta, drop?\n        //}\n\n        delta_y = -delta_y;\n\n        mouse.bus.send(\"mouse-delta\", [delta_x, delta_y]);\n\n        let absolute_x = e.pageX - screen_container.offsetLeft;\n        let absolute_y = e.pageY - screen_container.offsetTop;\n        mouse.bus.send(\"mouse-absolute\", [\n            absolute_x, absolute_y, screen_container.offsetWidth, screen_container.offsetHeight]);\n    }\n\n    function mousedown_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, true);\n        }\n    }\n\n    function mouseup_handler(e)\n    {\n        if(may_handle(e))\n        {\n            click_event(e, false);\n        }\n    }\n\n    function click_event(e, down)\n    {\n        if(!mouse.bus)\n        {\n            return;\n        }\n\n        if(e.which === 1)\n        {\n            left_down = down;\n        }\n        else if(e.which === 2)\n        {\n            middle_down = down;\n        }\n        else if(e.which === 3)\n        {\n            right_down = down;\n        }\n        else\n        {\n            console.log(\"Unknown event.which: \" + e.which);\n        }\n        mouse.bus.send(\"mouse-click\", [left_down, middle_down, right_down]);\n    }\n\n    function mousewheel_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var delta_x = e.wheelDelta || -e.detail;\n        var delta_y = 0;\n\n        if(delta_x < 0)\n        {\n            delta_x = -1;\n        }\n        else if(delta_x > 0)\n        {\n            delta_x = 1;\n        }\n\n        mouse.bus.send(\"mouse-wheel\", [delta_x, delta_y]);\n        e.preventDefault();\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar DAC_QUEUE_RESERVE = 0.2;\n\n/** @const */\nvar AUDIOBUFFER_MINIMUM_SAMPLING_RATE = 8000;\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n */\nfunction SpeakerAdapter(bus)\n{\n    if(typeof window === \"undefined\")\n    {\n        return;\n    }\n    if(!window.AudioContext && !window.webkitAudioContext)\n    {\n        console.warn(\"Web browser doesn't support Web Audio API\");\n        return;\n    }\n\n    var SpeakerDAC = window.AudioWorklet ? SpeakerWorkletDAC : SpeakerBufferSourceDAC;\n\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = new (window.AudioContext || window.webkitAudioContext)();\n\n    /** @const */\n    this.mixer = new SpeakerMixer(bus, this.audio_context);\n\n    /** @const */\n    this.pcspeaker = new PCSpeaker(bus, this.audio_context, this.mixer);\n\n    /** @const */\n    this.dac = new SpeakerDAC(bus, this.audio_context, this.mixer);\n\n    this.pcspeaker.start();\n\n    bus.register(\"emulator-stopped\", function()\n    {\n        this.audio_context.suspend();\n    }, this);\n\n    bus.register(\"emulator-started\", function()\n    {\n        this.audio_context.resume();\n    }, this);\n\n    bus.register(\"speaker-confirm-initialized\", function()\n    {\n        bus.send(\"speaker-has-initialized\");\n    }, this);\n    bus.send(\"speaker-has-initialized\");\n}\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n */\nfunction SpeakerMixer(bus, audio_context)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    this.sources = new Map();\n\n    // States\n\n    this.volume_both = 1;\n    this.volume_left = 1;\n    this.volume_right = 1;\n    this.gain_left = 1;\n    this.gain_right = 1;\n\n    // Nodes\n    // TODO: Find / calibrate / verify the filter frequencies\n\n    this.node_treble_left = this.audio_context.createBiquadFilter();\n    this.node_treble_right = this.audio_context.createBiquadFilter();\n    this.node_treble_left.type = \"highshelf\";\n    this.node_treble_right.type = \"highshelf\";\n    this.node_treble_left.frequency.setValueAtTime(2000, this.audio_context.currentTime);\n    this.node_treble_right.frequency.setValueAtTime(2000, this.audio_context.currentTime);\n\n    this.node_bass_left = this.audio_context.createBiquadFilter();\n    this.node_bass_right = this.audio_context.createBiquadFilter();\n    this.node_bass_left.type = \"lowshelf\";\n    this.node_bass_right.type = \"lowshelf\";\n    this.node_bass_left.frequency.setValueAtTime(200, this.audio_context.currentTime);\n    this.node_bass_right.frequency.setValueAtTime(200, this.audio_context.currentTime);\n\n    this.node_gain_left = this.audio_context.createGain();\n    this.node_gain_right = this.audio_context.createGain();\n\n    this.node_merger = this.audio_context.createChannelMerger(2);\n\n    // Graph\n\n    this.input_left = this.node_treble_left;\n    this.input_right = this.node_treble_right;\n\n    this.node_treble_left.connect(this.node_bass_left);\n    this.node_bass_left.connect(this.node_gain_left);\n    this.node_gain_left.connect(this.node_merger, 0, 0);\n\n    this.node_treble_right.connect(this.node_bass_right);\n    this.node_bass_right.connect(this.node_gain_right);\n    this.node_gain_right.connect(this.node_merger, 0, 1);\n\n    this.node_merger.connect(this.audio_context.destination);\n\n    // Interface\n\n    bus.register(\"mixer-connect\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        this.connect_source(source_id, channel);\n    }, this);\n\n    bus.register(\"mixer-disconnect\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        this.disconnect_source(source_id, channel);\n    }, this);\n\n    bus.register(\"mixer-volume\", function(data)\n    {\n        var source_id = data[0];\n        var channel = data[1];\n        var decibels = data[2];\n\n        var gain = Math.pow(10, decibels / 20);\n\n        var source = source_id === MIXER_SRC_MASTER ? this : this.sources.get(source_id);\n\n        if(source === undefined)\n        {\n            dbg_assert(false, \"Mixer set volume - cannot set volume for undefined source: \" + source_id);\n            return;\n        }\n\n        source.set_volume(gain, channel);\n    }, this);\n\n    bus.register(\"mixer-gain-left\", function(/** number */ decibels)\n    {\n        this.gain_left = Math.pow(10, decibels / 20);\n        this.update();\n    }, this);\n\n    bus.register(\"mixer-gain-right\", function(/** number */ decibels)\n    {\n        this.gain_right = Math.pow(10, decibels / 20);\n        this.update();\n    }, this);\n\n    function create_gain_handler(audio_node)\n    {\n        return function(decibels)\n        {\n            audio_node.gain.setValueAtTime(decibels, this.audio_context.currentTime);\n        };\n    }\n    bus.register(\"mixer-treble-left\", create_gain_handler(this.node_treble_left), this);\n    bus.register(\"mixer-treble-right\", create_gain_handler(this.node_treble_right), this);\n    bus.register(\"mixer-bass-left\", create_gain_handler(this.node_bass_left), this);\n    bus.register(\"mixer-bass-right\", create_gain_handler(this.node_bass_right), this);\n}\n\n/**\n * @param {!AudioNode} source_node\n * @param {number} source_id\n * @return {SpeakerMixerSource}\n */\nSpeakerMixer.prototype.add_source = function(source_node, source_id)\n{\n    var source = new SpeakerMixerSource(\n        this.audio_context,\n        source_node,\n        this.input_left,\n        this.input_right\n    );\n\n    dbg_assert(!this.sources.has(source_id), \"Mixer add source - overwritting source: \" + source_id);\n\n    this.sources.set(source_id, source);\n    return source;\n};\n\n/**\n * @param {number} source_id\n * @param {number=} channel\n */\nSpeakerMixer.prototype.connect_source = function(source_id, channel)\n{\n    var source = this.sources.get(source_id);\n\n    if(source === undefined)\n    {\n        dbg_assert(false, \"Mixer connect - cannot connect undefined source: \" + source_id);\n        return;\n    }\n\n    source.connect(channel);\n};\n\n/**\n * @param {number} source_id\n * @param {number=} channel\n */\nSpeakerMixer.prototype.disconnect_source = function(source_id, channel)\n{\n    var source = this.sources.get(source_id);\n\n    if(source === undefined)\n    {\n        dbg_assert(false, \"Mixer disconnect - cannot disconnect undefined source: \" + source_id);\n        return;\n    }\n\n    source.disconnect(channel);\n};\n\n/**\n * @param {number} value\n * @param {number=} channel\n */\nSpeakerMixer.prototype.set_volume = function(value, channel)\n{\n    if(channel === undefined)\n    {\n        channel = MIXER_CHANNEL_BOTH;\n    }\n\n    switch(channel)\n    {\n        case MIXER_CHANNEL_LEFT:\n            this.volume_left = value;\n            break;\n        case MIXER_CHANNEL_RIGHT:\n            this.volume_right = value;\n            break;\n        case MIXER_CHANNEL_BOTH:\n            this.volume_both = value;\n            break;\n        default:\n            dbg_assert(false, \"Mixer set master volume - unknown channel: \" + channel);\n            return;\n    }\n\n    this.update();\n};\n\nSpeakerMixer.prototype.update = function()\n{\n    var net_gain_left = this.volume_both * this.volume_left * this.gain_left;\n    var net_gain_right = this.volume_both * this.volume_right * this.gain_right;\n\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\n};\n\n/**\n * @constructor\n * @param {!AudioContext} audio_context\n * @param {!AudioNode} source_node\n * @param {!AudioNode} destination_left\n * @param {!AudioNode} destination_right\n */\nfunction SpeakerMixerSource(audio_context, source_node, destination_left, destination_right)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    // States\n\n    this.connected_left = true;\n    this.connected_right = true;\n    this.gain_hidden = 1;\n    this.volume_both = 1;\n    this.volume_left = 1;\n    this.volume_right = 1;\n\n    // Nodes\n\n    this.node_splitter = audio_context.createChannelSplitter(2);\n    this.node_gain_left = audio_context.createGain();\n    this.node_gain_right = audio_context.createGain();\n\n    // Graph\n\n    source_node.connect(this.node_splitter);\n\n    this.node_splitter.connect(this.node_gain_left, 0);\n    this.node_gain_left.connect(destination_left);\n\n    this.node_splitter.connect(this.node_gain_right, 1);\n    this.node_gain_right.connect(destination_right);\n}\n\nSpeakerMixerSource.prototype.update = function()\n{\n    var net_gain_left = this.connected_left * this.gain_hidden * this.volume_both * this.volume_left;\n    var net_gain_right = this.connected_right * this.gain_hidden * this.volume_both * this.volume_right;\n\n    this.node_gain_left.gain.setValueAtTime(net_gain_left, this.audio_context.currentTime);\n    this.node_gain_right.gain.setValueAtTime(net_gain_right, this.audio_context.currentTime);\n};\n\n/** @param {number=} channel */\nSpeakerMixerSource.prototype.connect = function(channel)\n{\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\n    if(both || channel === MIXER_CHANNEL_LEFT)\n    {\n        this.connected_left = true;\n    }\n    if(both || channel === MIXER_CHANNEL_RIGHT)\n    {\n        this.connected_right = true;\n    }\n    this.update();\n};\n\n/** @param {number=} channel */\nSpeakerMixerSource.prototype.disconnect = function(channel)\n{\n    var both = !channel || channel === MIXER_CHANNEL_BOTH;\n    if(both || channel === MIXER_CHANNEL_LEFT)\n    {\n        this.connected_left = false;\n    }\n    if(both || channel === MIXER_CHANNEL_RIGHT)\n    {\n        this.connected_right = false;\n    }\n    this.update();\n};\n\n/**\n * @param {number} value\n * @param {number=} channel\n */\nSpeakerMixerSource.prototype.set_volume = function(value, channel)\n{\n    if(channel === undefined)\n    {\n        channel = MIXER_CHANNEL_BOTH;\n    }\n\n    switch(channel)\n    {\n        case MIXER_CHANNEL_LEFT:\n            this.volume_left = value;\n            break;\n        case MIXER_CHANNEL_RIGHT:\n            this.volume_right = value;\n            break;\n        case MIXER_CHANNEL_BOTH:\n            this.volume_both = value;\n            break;\n        default:\n            dbg_assert(false, \"Mixer set volume - unknown channel: \" + channel);\n            return;\n    }\n\n    this.update();\n};\n\nSpeakerMixerSource.prototype.set_gain_hidden = function(value)\n{\n    this.gain_hidden = value;\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction PCSpeaker(bus, audio_context, mixer)\n{\n    // Nodes\n\n    this.node_oscillator = audio_context.createOscillator();\n    this.node_oscillator.type = \"square\";\n    this.node_oscillator.frequency.setValueAtTime(440, audio_context.currentTime);\n\n    // Interface\n\n    this.mixer_connection = mixer.add_source(this.node_oscillator, MIXER_SRC_PCSPEAKER);\n    this.mixer_connection.disconnect();\n\n    bus.register(\"pcspeaker-enable\", function()\n    {\n        mixer.connect_source(MIXER_SRC_PCSPEAKER);\n    }, this);\n\n    bus.register(\"pcspeaker-disable\", function()\n    {\n        mixer.disconnect_source(MIXER_SRC_PCSPEAKER);\n    }, this);\n\n    bus.register(\"pcspeaker-update\", function(data)\n    {\n        var counter_mode = data[0];\n        var counter_reload = data[1];\n\n        var frequency = 0;\n        var beep_enabled = counter_mode === 3;\n\n        if(beep_enabled)\n        {\n            frequency = OSCILLATOR_FREQ * 1000 / counter_reload;\n            frequency = Math.min(frequency, this.node_oscillator.frequency.maxValue);\n            frequency = Math.max(frequency, 0);\n        }\n\n        this.node_oscillator.frequency.setValueAtTime(frequency, audio_context.currentTime);\n    }, this);\n}\n\nPCSpeaker.prototype.start = function()\n{\n    this.node_oscillator.start();\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction SpeakerWorkletDAC(bus, audio_context, mixer)\n{\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = audio_context;\n\n    // State\n\n    this.enabled = false;\n    this.sampling_rate = 48000;\n\n    // Worklet\n\n    function worklet()\n    {\n        /** @const */\n        var RENDER_QUANTUM = 128;\n\n        /** @const */\n        var MINIMUM_BUFFER_SIZE = 2 * RENDER_QUANTUM;\n\n        /** @const */\n        var QUEUE_RESERVE = 1024;\n\n        function sinc(x)\n        {\n            if(x === 0) return 1;\n            x *= Math.PI;\n            return Math.sin(x) / x;\n        }\n\n        var EMPTY_BUFFER =\n        [\n            new Float32Array(MINIMUM_BUFFER_SIZE),\n            new Float32Array(MINIMUM_BUFFER_SIZE),\n        ];\n\n        /**\n         * @constructor\n         * @extends AudioWorkletProcessor\n         */\n        function DACProcessor()\n        {\n            var self = Reflect.construct(AudioWorkletProcessor, [], DACProcessor);\n\n            // Params\n\n            self.kernel_size = 3;\n\n            // States\n\n            // Buffers waiting for their turn to be consumed\n            self.queue_data = new Array(1024);\n            self.queue_start = 0;\n            self.queue_end = 0;\n            self.queue_length = 0;\n            self.queue_size = self.queue_data.length;\n            self.queued_samples = 0;\n\n            // Buffers being actively consumed\n            /** @type{Array<Float32Array>} */\n            self.source_buffer_previous = EMPTY_BUFFER;\n            /** @type{Array<Float32Array>} */\n            self.source_buffer_current = EMPTY_BUFFER;\n\n            // Ratio of alienland sample rate to homeland sample rate.\n            self.source_samples_per_destination = 1.0;\n\n            // Integer representing the position of the first destination sample\n            // for the current block, relative to source_buffer_current.\n            self.source_block_start = 0;\n\n            // Real number representing the position of the current destination\n            // sample relative to source_buffer_current, since source_block_start.\n            self.source_time = 0.0;\n\n            // Same as source_time but rounded down to an index.\n            self.source_offset = 0;\n\n            // Interface\n\n            self.port.onmessage = (event) =>\n            {\n                switch(event.data.type)\n                {\n                    case \"queue\":\n                        self.queue_push(event.data.value);\n                        break;\n                    case \"sampling-rate\":\n                        self.source_samples_per_destination = event.data.value / sampleRate;\n                        break;\n                }\n            };\n\n            return self;\n        }\n\n        Reflect.setPrototypeOf(DACProcessor.prototype, AudioWorkletProcessor.prototype);\n        Reflect.setPrototypeOf(DACProcessor, AudioWorkletProcessor);\n\n        DACProcessor.prototype[\"process\"] =\n        DACProcessor.prototype.process = function(inputs, outputs, parameters)\n        {\n            for(var i = 0; i < outputs[0][0].length; i++)\n            {\n                // Lanczos resampling\n                var sum0 = 0;\n                var sum1 = 0;\n\n                var start = this.source_offset - this.kernel_size + 1;\n                var end = this.source_offset + this.kernel_size;\n\n                for(var j = start; j <= end; j++)\n                {\n                    var convolute_index = this.source_block_start + j;\n                    sum0 += this.get_sample(convolute_index, 0) * this.kernel(this.source_time - j);\n                    sum1 += this.get_sample(convolute_index, 1) * this.kernel(this.source_time - j);\n                }\n\n                if(isNaN(sum0) || isNaN(sum1))\n                {\n                    // NaN values cause entire audio graph to cease functioning.\n                    sum0 = sum1 = 0;\n                    this.dbg_log(\"ERROR: NaN values! Ignoring for now.\");\n                }\n\n                outputs[0][0][i] = sum0;\n                outputs[0][1][i] = sum1;\n\n                this.source_time += this.source_samples_per_destination;\n                this.source_offset = Math.floor(this.source_time);\n            }\n\n            // +2 to safeguard against rounding variations\n            var samples_needed_per_block = this.source_offset;\n            samples_needed_per_block += this.kernel_size + 2;\n\n            this.source_time -= this.source_offset;\n            this.source_block_start += this.source_offset;\n            this.source_offset = 0;\n\n            // Note: This needs to be done after source_block_start is updated.\n            this.ensure_enough_data(samples_needed_per_block);\n\n            return true;\n        };\n\n        DACProcessor.prototype.kernel = function(x)\n        {\n            return sinc(x) * sinc(x / this.kernel_size);\n        };\n\n        DACProcessor.prototype.get_sample = function(index, channel)\n        {\n            if(index < 0)\n            {\n                // -ve index represents previous buffer\n                //          <-------|\n                // [Previous buffer][Current buffer]\n                index += this.source_buffer_previous[0].length;\n                return this.source_buffer_previous[channel][index];\n            }\n            else\n            {\n                return this.source_buffer_current[channel][index];\n            }\n        };\n\n        DACProcessor.prototype.ensure_enough_data = function(needed)\n        {\n            var current_length = this.source_buffer_current[0].length;\n            var remaining = current_length - this.source_block_start;\n\n            if(remaining < needed)\n            {\n                this.prepare_next_buffer();\n                this.source_block_start -= current_length;\n            }\n        };\n\n        DACProcessor.prototype.prepare_next_buffer = function()\n        {\n            if(this.queued_samples < MINIMUM_BUFFER_SIZE && this.queue_length)\n            {\n                this.dbg_log(\"Not enough samples - should not happen during midway of playback\");\n            }\n\n            this.source_buffer_previous = this.source_buffer_current;\n            this.source_buffer_current = this.queue_shift();\n\n            var sample_count = this.source_buffer_current[0].length;\n\n            if(sample_count < MINIMUM_BUFFER_SIZE)\n            {\n                // Unfortunately, this single buffer is too small :(\n\n                var queue_pos = this.queue_start;\n                var buffer_count = 0;\n\n                // Figure out how many small buffers to combine.\n                while(sample_count < MINIMUM_BUFFER_SIZE && buffer_count < this.queue_length)\n                {\n                    sample_count += this.queue_data[queue_pos][0].length;\n\n                    queue_pos = queue_pos + 1 & this.queue_size - 1;\n                    buffer_count++;\n                }\n\n                // Note: if not enough buffers, this will be end-padded with zeros:\n                var new_big_buffer_size = Math.max(sample_count, MINIMUM_BUFFER_SIZE);\n                var new_big_buffer =\n                [\n                    new Float32Array(new_big_buffer_size),\n                    new Float32Array(new_big_buffer_size),\n                ];\n\n                // Copy the first, already-shifted, small buffer into the new buffer.\n                new_big_buffer[0].set(this.source_buffer_current[0]);\n                new_big_buffer[1].set(this.source_buffer_current[1]);\n                var new_big_buffer_pos = this.source_buffer_current[0].length;\n\n                // Copy the rest.\n                for(var i = 0; i < buffer_count; i++)\n                {\n                    var small_buffer = this.queue_shift();\n                    new_big_buffer[0].set(small_buffer[0], new_big_buffer_pos);\n                    new_big_buffer[1].set(small_buffer[1], new_big_buffer_pos);\n                    new_big_buffer_pos += small_buffer[0].length;\n                }\n\n                // Pretend that everything's just fine.\n                this.source_buffer_current = new_big_buffer;\n            }\n\n            this.pump();\n        };\n\n        DACProcessor.prototype.pump = function()\n        {\n            if(this.queued_samples / this.source_samples_per_destination < QUEUE_RESERVE)\n            {\n                this.port.postMessage(\n                {\n                    type: \"pump\",\n                });\n            }\n        };\n\n        DACProcessor.prototype.queue_push = function(item)\n        {\n            if(this.queue_length < this.queue_size)\n            {\n                this.queue_data[this.queue_end] = item;\n                this.queue_end = this.queue_end + 1 & this.queue_size - 1;\n                this.queue_length++;\n\n                this.queued_samples += item[0].length;\n\n                this.pump();\n            }\n        };\n\n        DACProcessor.prototype.queue_shift = function()\n        {\n            if(!this.queue_length)\n            {\n                return EMPTY_BUFFER;\n            }\n\n            var item = this.queue_data[this.queue_start];\n\n            this.queue_data[this.queue_start] = null;\n            this.queue_start = this.queue_start + 1 & this.queue_size - 1;\n            this.queue_length--;\n\n            this.queued_samples -= item[0].length;\n\n            return item;\n        };\n\n        DACProcessor.prototype.dbg_log = function(message)\n        {\n            if(DEBUG)\n            {\n                this.port.postMessage(\n                {\n                    type: \"debug-log\",\n                    value: message,\n                });\n            }\n        };\n\n        registerProcessor(\"dac-processor\", DACProcessor);\n    }\n\n    var worklet_string = worklet.toString();\n\n    var worklet_code_start = worklet_string.indexOf(\"{\") + 1;\n    var worklet_code_end = worklet_string.lastIndexOf(\"}\");\n    var worklet_code = worklet_string.substring(worklet_code_start, worklet_code_end);\n\n    if(DEBUG)\n    {\n        worklet_code = \"var DEBUG = true;\\n\" + worklet_code;\n    }\n\n    var worklet_blob = new Blob([worklet_code], { type: \"application/javascript\" });\n    var worklet_url = URL.createObjectURL(worklet_blob);\n\n    /** @type {AudioWorkletNode} */\n    this.node_processor = null;\n\n    // Placeholder pass-through node to connect to, when worklet node is not ready yet.\n    this.node_output = this.audio_context.createGain();\n\n    this.audio_context\n        .audioWorklet\n        .addModule(worklet_url)\n        .then(() =>\n    {\n        URL.revokeObjectURL(worklet_url);\n\n        this.node_processor = new AudioWorkletNode(this.audio_context, \"dac-processor\",\n        {\n            \"numberOfInputs\": 0,\n            \"numberOfOutputs\": 1,\n            \"outputChannelCount\": [2],\n        });\n\n        this.node_processor.port.postMessage(\n        {\n            type: \"sampling-rate\",\n            value: this.sampling_rate,\n        });\n\n        this.node_processor.port.onmessage = (event) =>\n        {\n            switch(event.data.type)\n            {\n                case \"pump\":\n                    this.pump();\n                    break;\n                case \"debug-log\":\n                    dbg_log(\"SpeakerWorkletDAC - Worklet: \" + event.data.value);\n                    break;\n            }\n        };\n\n        // Graph\n\n        this.node_processor.connect(this.node_output);\n    });\n\n    // Interface\n\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\n    this.mixer_connection.set_gain_hidden(3);\n\n    bus.register(\"dac-send-data\", function(data)\n    {\n        this.queue(data);\n    }, this);\n\n    bus.register(\"dac-enable\", function(enabled)\n    {\n        this.enabled = true;\n    }, this);\n\n    bus.register(\"dac-disable\", function()\n    {\n        this.enabled = false;\n    }, this);\n\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\n    {\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\n        this.sampling_rate = rate;\n\n        if(!this.node_processor)\n        {\n            return;\n        }\n\n        this.node_processor.port.postMessage(\n        {\n            type: \"sampling-rate\",\n            value: rate,\n        });\n    }, this);\n\n    if(DEBUG)\n    {\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\n    }\n}\n\nSpeakerWorkletDAC.prototype.queue = function(data)\n{\n    if(!this.node_processor)\n    {\n        return;\n    }\n\n    if(DEBUG)\n    {\n        this.debugger.push_queued_data(data);\n    }\n\n    this.node_processor.port.postMessage(\n    {\n        type: \"queue\",\n        value: data,\n    }, [data[0].buffer, data[1].buffer]);\n};\n\nSpeakerWorkletDAC.prototype.pump = function()\n{\n    if(!this.enabled)\n    {\n        return;\n    }\n    this.bus.send(\"dac-request-data\");\n};\n\n/**\n * @constructor\n * @param {!BusConnector} bus\n * @param {!AudioContext} audio_context\n * @param {!SpeakerMixer} mixer\n */\nfunction SpeakerBufferSourceDAC(bus, audio_context, mixer)\n{\n    /** @const */\n    this.bus = bus;\n\n    /** @const */\n    this.audio_context = audio_context;\n\n    // States\n\n    this.enabled = false;\n    this.sampling_rate = 22050;\n    this.buffered_time = 0;\n    this.rate_ratio = 1;\n\n    // Nodes\n\n    this.node_lowpass = this.audio_context.createBiquadFilter();\n    this.node_lowpass.type = \"lowpass\";\n\n    // Interface\n\n    this.node_output = this.node_lowpass;\n\n    this.mixer_connection = mixer.add_source(this.node_output, MIXER_SRC_DAC);\n    this.mixer_connection.set_gain_hidden(3);\n\n    bus.register(\"dac-send-data\", function(data)\n    {\n        this.queue(data);\n    }, this);\n\n    bus.register(\"dac-enable\", function(enabled)\n    {\n        this.enabled = true;\n        this.pump();\n    }, this);\n\n    bus.register(\"dac-disable\", function()\n    {\n        this.enabled = false;\n    }, this);\n\n    bus.register(\"dac-tell-sampling-rate\", function(/** number */ rate)\n    {\n        dbg_assert(rate > 0, \"Sampling rate should be nonzero\");\n        this.sampling_rate = rate;\n        this.rate_ratio = Math.ceil(AUDIOBUFFER_MINIMUM_SAMPLING_RATE / rate);\n        this.node_lowpass.frequency.setValueAtTime(rate / 2, this.audio_context.currentTime);\n    }, this);\n\n    if(DEBUG)\n    {\n        this.debugger = new SpeakerDACDebugger(this.audio_context, this.node_output);\n    }\n}\n\nSpeakerBufferSourceDAC.prototype.queue = function(data)\n{\n    if(DEBUG)\n    {\n        this.debugger.push_queued_data(data);\n    }\n\n    var sample_count = data[0].length;\n    var block_duration = sample_count / this.sampling_rate;\n\n    var buffer;\n    if(this.rate_ratio > 1)\n    {\n        var new_sample_count = sample_count * this.rate_ratio;\n        var new_sampling_rate = this.sampling_rate * this.rate_ratio;\n        buffer = this.audio_context.createBuffer(2, new_sample_count, new_sampling_rate);\n        var buffer_data0 = buffer.getChannelData(0);\n        var buffer_data1 = buffer.getChannelData(1);\n\n        var buffer_index = 0;\n        for(var i = 0; i < sample_count; i++)\n        {\n            for(var j = 0; j < this.rate_ratio; j++, buffer_index++)\n            {\n                buffer_data0[buffer_index] = data[0][i];\n                buffer_data1[buffer_index] = data[1][i];\n            }\n        }\n    }\n    else\n    {\n        // Allocating new AudioBuffer every block\n        // - Memory profiles show insignificant improvements if recycling old buffers.\n        buffer = this.audio_context.createBuffer(2, sample_count, this.sampling_rate);\n        buffer.copyToChannel(data[0], 0);\n        buffer.copyToChannel(data[1], 1);\n    }\n\n    var source = this.audio_context.createBufferSource();\n    source.buffer = buffer;\n    source.connect(this.node_lowpass);\n    source.addEventListener(\"ended\", this.pump.bind(this));\n\n    var current_time = this.audio_context.currentTime;\n\n    if(this.buffered_time < current_time)\n    {\n        dbg_log(\"Speaker DAC - Creating/Recreating reserve - shouldn't occur frequently during playback\");\n\n        // Schedule pump() to queue evenly, starting from current time\n        this.buffered_time = current_time;\n        var target_silence_duration = DAC_QUEUE_RESERVE - block_duration;\n        var current_silence_duration = 0;\n        while(current_silence_duration <= target_silence_duration)\n        {\n            current_silence_duration += block_duration;\n            this.buffered_time += block_duration;\n            setTimeout(() => this.pump(), current_silence_duration * 1000);\n        }\n    }\n\n    source.start(this.buffered_time);\n    this.buffered_time += block_duration;\n\n    // Chase the schedule - ensure reserve is full\n    setTimeout(() => this.pump(), 0);\n};\n\nSpeakerBufferSourceDAC.prototype.pump = function()\n{\n    if(!this.enabled)\n    {\n        return;\n    }\n    if(this.buffered_time - this.audio_context.currentTime > DAC_QUEUE_RESERVE)\n    {\n        return;\n    }\n    this.bus.send(\"dac-request-data\");\n};\n\n/**\n * @constructor\n */\nfunction SpeakerDACDebugger(audio_context, source_node)\n{\n    /** @const */\n    this.audio_context = audio_context;\n\n    /** @const */\n    this.node_source = source_node;\n\n    this.node_processor = null;\n\n    this.node_gain = this.audio_context.createGain();\n    this.node_gain.gain.setValueAtTime(0, this.audio_context.currentTime);\n\n    this.node_gain.connect(this.audio_context.destination);\n\n    this.is_active = false;\n    this.queued_history = [];\n    this.output_history = [];\n    this.queued = [[], []];\n    this.output = [[], []];\n}\n\n/** @suppress {deprecated} */\nSpeakerDACDebugger.prototype.start = function(duration_ms)\n{\n    this.is_active = true;\n    this.queued = [[], []];\n    this.output = [[], []];\n    this.queued_history.push(this.queued);\n    this.output_history.push(this.output);\n\n    this.node_processor = this.audio_context.createScriptProcessor(1024, 2, 2);\n    this.node_processor.onaudioprocess = (event) =>\n    {\n        this.output[0].push(event.inputBuffer.getChannelData(0).slice());\n        this.output[1].push(event.inputBuffer.getChannelData(1).slice());\n    };\n\n    this.node_source.connect(this.node_processor);\n    this.node_processor.connect(this.node_gain);\n\n    setTimeout(() =>\n    {\n        this.stop();\n    }, duration_ms);\n};\n\nSpeakerDACDebugger.prototype.stop = function()\n{\n    this.is_active = false;\n    this.node_source.disconnect(this.node_processor);\n    this.node_processor.disconnect();\n    this.node_processor = null;\n};\n\nSpeakerDACDebugger.prototype.push_queued_data = function(data)\n{\n    if(this.is_active)\n    {\n        this.queued[0].push(data[0].slice());\n        this.queued[1].push(data[1].slice());\n    }\n};\n\n// Useful for Audacity imports\nSpeakerDACDebugger.prototype.download_txt = function(history_id, channel)\n{\n    var txt = this.output_history[history_id][channel]\n        .map((v) => v.join(\" \"))\n        .join(\" \");\n\n    dump_file(txt, \"dacdata.txt\");\n};\n\n// Useful for general plotting\nSpeakerDACDebugger.prototype.download_csv = function(history_id)\n{\n    var buffers = this.output_history[history_id];\n    var csv_rows = [];\n    for(var buffer_id = 0; buffer_id < buffers[0].length; buffer_id++)\n    {\n        for(var i = 0; i < buffers[0][buffer_id].length; i++)\n        {\n            csv_rows.push(`${buffers[0][buffer_id][i]},${buffers[1][buffer_id][i]}`);\n        }\n    }\n    dump_file(csv_rows.join(\"\\n\"), \"dacdata.csv\");\n};\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction SerialAdapter(element, bus)\n{\n    var serial = this;\n\n    this.enabled = true;\n    this.bus = bus;\n    this.text = \"\";\n    this.text_new_line = false;\n\n    this.last_update = 0;\n\n\n    this.bus.register(\"serial0-output-char\", function(chr)\n    {\n        this.show_char(chr);\n    }, this);\n\n\n    this.destroy = function()\n    {\n        element.removeEventListener(\"keypress\", keypress_handler, false);\n        element.removeEventListener(\"keydown\", keydown_handler, false);\n        element.removeEventListener(\"paste\", paste_handler, false);\n        window.removeEventListener(\"mousedown\", window_click_handler, false);\n    };\n\n    this.init = function()\n    {\n        this.destroy();\n\n        element.addEventListener(\"keypress\", keypress_handler, false);\n        element.addEventListener(\"keydown\", keydown_handler, false);\n        element.addEventListener(\"paste\", paste_handler, false);\n        window.addEventListener(\"mousedown\", window_click_handler, false);\n    };\n    this.init();\n\n\n    this.show_char = function(chr)\n    {\n        if(chr === \"\\x08\")\n        {\n            this.text = this.text.slice(0, -1);\n            this.update();\n        }\n        else if(chr === \"\\r\")\n        {\n            // do nothing\n        }\n        else\n        {\n            this.text += chr;\n\n            if(chr === \"\\n\")\n            {\n                this.text_new_line = true;\n            }\n\n            this.update();\n        }\n    };\n\n    this.update = function()\n    {\n        var now = Date.now();\n        var delta = now - this.last_update;\n\n        if(delta < 16)\n        {\n            if(this.update_timer === undefined)\n            {\n                this.update_timer = setTimeout(() => {\n                    this.update_timer = undefined;\n                    var now = Date.now();\n                    dbg_assert(now - this.last_update >= 16);\n                    this.last_update = now;\n                    this.render();\n                }, 16 - delta);\n            }\n        }\n        else\n        {\n            if(this.update_timer !== undefined)\n            {\n                clearTimeout(this.update_timer);\n                this.update_timer = undefined;\n            }\n\n            this.last_update = now;\n            this.render();\n        }\n    };\n\n    this.render = function()\n    {\n        element.value = this.text;\n\n        if(this.text_new_line)\n        {\n            this.text_new_line = false;\n            element.scrollTop = 1e9;\n        }\n    }\n\n    /**\n     * @param {number} chr_code\n     */\n    this.send_char = function(chr_code)\n    {\n        if(serial.bus)\n        {\n            serial.bus.send(\"serial0-input\", chr_code);\n        }\n    };\n\n    function may_handle(e)\n    {\n        if(!serial.enabled)\n        {\n            return false;\n        }\n\n        // Something here?\n\n        return true;\n    }\n\n    function keypress_handler(e)\n    {\n        if(!serial.bus)\n        {\n            return;\n        }\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var chr = e.which;\n\n        serial.send_char(chr);\n        e.preventDefault();\n    }\n\n    function keydown_handler(e)\n    {\n        var chr = e.which;\n\n        if(chr === 8)\n        {\n            // supress backspace\n            serial.send_char(127);\n            e.preventDefault();\n        }\n        else if(chr === 9)\n        {\n            // tab\n            serial.send_char(9);\n            e.preventDefault();\n        }\n    }\n\n    function paste_handler(e)\n    {\n        if(!may_handle(e))\n        {\n            return;\n        }\n\n        var data = e.clipboardData.getData(\"text/plain\");\n\n        for(var i = 0; i < data.length; i++)\n        {\n            serial.send_char(data.charCodeAt(i));\n        }\n\n        e.preventDefault();\n    }\n\n    function window_click_handler(e)\n    {\n        if(e.target !== element)\n        {\n            element.blur();\n        }\n    }\n}\n","\"use strict\";\n\n/**\n * An ethernet-through-websocket adapter, to be used with\n *     https://github.com/benjamincburns/websockproxy\n *\n * emulated ethernet card <--\u003e this <--\u003e websocket proxy <--\u003e network\n *\n * @constructor\n *\n * @param {string} url\n * @param {BusConnector} bus\n */\nfunction NetworkAdapter(url, bus)\n{\n    this.send_data = function(x) {};\n\n    this.bus = bus;\n    this.socket = undefined;\n\n    // TODO: circular buffer?\n    this.send_queue = [];\n    this.url = url;\n\n    this.reconnect_interval = 10000;\n    this.last_connect_attempt = Date.now() - this.reconnect_interval;\n    this.send_queue_limit = 64;\n\n    this.bus.register(\"net0-send\", function(data)\n    {\n        this.send(data);\n    }, this);\n}\n\nNetworkAdapter.prototype.handle_message = function(e)\n{\n    if(this.bus)\n    {\n        this.bus.send(\"net0-receive\", new Uint8Array(e.data));\n    }\n};\n\nNetworkAdapter.prototype.handle_close = function(e)\n{\n    //console.log(\"onclose\", e);\n\n    this.connect();\n    setTimeout(this.connect.bind(this), this.reconnect_interval);\n};\n\nNetworkAdapter.prototype.handle_open = function(e)\n{\n    //console.log(\"open\", e);\n\n    for(var i = 0; i < this.send_queue.length; i++)\n    {\n        this.send(this.send_queue[i]);\n    }\n\n    this.send_queue = [];\n};\n\nNetworkAdapter.prototype.handle_error = function(e)\n{\n    //console.log(\"onerror\", e);\n};\n\nNetworkAdapter.prototype.destroy = function()\n{\n    if(this.socket)\n    {\n        this.socket.close();\n    }\n};\n\nNetworkAdapter.prototype.connect = function()\n{\n    if(this.socket)\n    {\n        var state = this.socket.readyState;\n\n        if(state === 0 || state === 1)\n        {\n            // already or almost there\n            return;\n        }\n    }\n\n    var now = Date.now();\n\n    if(this.last_connect_attempt + this.reconnect_interval > now)\n    {\n        return;\n    }\n\n    this.last_connect_attempt = Date.now();\n\n    try\n    {\n        this.socket = new WebSocket(this.url);\n    }\n    catch(e)\n    {\n        this.handle_close(undefined);\n        return;\n    }\n\n    this.socket.binaryType = \"arraybuffer\";\n\n    this.socket.onopen = this.handle_open.bind(this);;\n    this.socket.onmessage = this.handle_message.bind(this);\n    this.socket.onclose = this.handle_close.bind(this);\n    this.socket.onerror = this.handle_error.bind(this);\n};\n\nNetworkAdapter.prototype.send = function(data)\n{\n    //console.log(\"send\", data);\n\n    if(!this.socket || this.socket.readyState !== 1)\n    {\n        this.send_queue.push(data);\n\n        if(this.send_queue.length > 2 * this.send_queue_limit)\n        {\n            this.send_queue = this.send_queue.slice(-this.send_queue_limit);\n        }\n\n        this.connect();\n    }\n    else\n    {\n        this.socket.send(data);\n    }\n}\n","\"use strict\";\n\n/** @const */\nvar ASYNC_SAFE = false;\n\n(function()\n{\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        v86util.load_file = load_file_nodejs;\n    }\n    else\n    {\n        v86util.load_file = load_file;\n    }\n\n    v86util.AsyncXHRBuffer = AsyncXHRBuffer;\n    v86util.AsyncFileBuffer = AsyncFileBuffer;\n    v86util.SyncFileBuffer = SyncFileBuffer;\n\n    /**\n     * @param {string} filename\n     * @param {Object} options\n     */\n    function load_file(filename, options)\n    {\n        var http = new XMLHttpRequest();\n\n        http.open(options.method || \"get\", filename, true);\n\n        if(!options.as_text)\n        {\n            http.responseType = \"arraybuffer\";\n        }\n\n        if(options.headers)\n        {\n            var header_names = Object.keys(options.headers);\n\n            for(var i = 0; i < header_names.length; i++)\n            {\n                var name = header_names[i];\n                http.setRequestHeader(name, options.headers[name]);\n            }\n        }\n\n        if(options.range)\n        {\n            let start = options.range.start;\n            let end = start + options.range.length - 1;\n            http.setRequestHeader(\"Range\", \"bytes=\" + start + \"-\" + end);\n        }\n\n        http.onload = function(e)\n        {\n            if(http.readyState === 4)\n            {\n                if(http.status !== 200 && http.status !== 206)\n                {\n                    console.error(\"Loading the image `\" + filename + \"` failed (status %d)\", http.status);\n                }\n                else if(http.response)\n                {\n                    options.done && options.done(http.response, http);\n                }\n            }\n        };\n\n        if(options.progress)\n        {\n            http.onprogress = function(e)\n            {\n                options.progress(e);\n            };\n        }\n\n        http.send(null);\n    }\n\n    function load_file_nodejs(filename, options)\n    {\n        let fs = require(\"fs\");\n\n        if(options.range)\n        {\n            dbg_assert(!options.as_text);\n\n            fs[\"open\"](filename, \"r\", (err, fd) =>\n            {\n                if(err) throw err;\n\n                let length = options.range.length;\n                var buffer = new global[\"Buffer\"](length);\n\n                fs[\"read\"](fd, buffer, 0, length, options.range.start, (err, bytes_read) =>\n                {\n                    if(err) throw err;\n\n                    dbg_assert(bytes_read === length);\n                    options.done && options.done(new Uint8Array(buffer));\n\n                    fs[\"close\"](fd, (err) => {\n                        if(err) throw err;\n                    });\n                });\n            });\n        }\n        else\n        {\n            var o = {\n                encoding: options.as_text ? \"utf-8\" : null,\n            };\n\n            fs[\"readFile\"](filename, o, function(err, data)\n            {\n                if(err)\n                {\n                    console.log(\"Could not read file:\", filename, err);\n                }\n                else\n                {\n                    var result = data;\n\n                    if(!options.as_text)\n                    {\n                        result = new Uint8Array(result).buffer;\n                    }\n\n                    options.done(result);\n                }\n            });\n        }\n    }\n\n    if(typeof XMLHttpRequest === \"undefined\")\n    {\n        var determine_size = function(path, cb)\n        {\n            require(\"fs\")[\"stat\"](path, (err, stats) =>\n            {\n                if(err)\n                {\n                    cb(err);\n                }\n                else\n                {\n                    cb(null, stats.size);\n                }\n            });\n        };\n    }\n    else\n    {\n        var determine_size = function(url, cb)\n        {\n            v86util.load_file(url, {\n                done: (buffer, http) =>\n                {\n                    var header = http.getResponseHeader(\"Content-Range\") || \"\";\n                    var match = header.match(/\\/(\\d+)\\s*$/);\n\n                    if(match)\n                    {\n                        cb(null, +match[1]);\n                    }\n                    else\n                    {\n                        cb({ header });\n                    }\n                },\n                headers: {\n                    Range: \"bytes=0-0\",\n\n                    //\"Accept-Encoding\": \"\",\n\n                    // Added by Chromium, but can cause the whole file to be sent\n                    // Settings this to empty also causes problems and Chromium\n                    // doesn't seem to create this header any more\n                    //\"If-Range\": \"\",\n                }\n            });\n        };\n    }\n\n    /**\n     * Asynchronous access to ArrayBuffer, loading blocks lazily as needed,\n     * using the `Range: bytes=...` header\n     *\n     * @constructor\n     * @param {string} filename Name of the file to download\n     * @param {number|undefined} size\n     */\n    function AsyncXHRBuffer(filename, size)\n    {\n        this.filename = filename;\n\n        /** @const */\n        this.block_size = 256;\n        this.byteLength = size;\n\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncXHRBuffer.prototype.load = function()\n    {\n        if(this.byteLength !== undefined)\n        {\n            this.onload && this.onload({});\n            return;\n        }\n\n        // Determine the size using a request\n\n        determine_size(this.filename, (error, size) =>\n        {\n            if(error)\n            {\n                console.assert(false,\n                    \"Cannot use: \" + this.filename + \". \" +\n                    \"`Range: bytes=...` header not supported (Got `\" + error.header + \"`)\");\n            }\n            else\n            {\n                dbg_assert(size >= 0);\n                this.byteLength = size;\n                this.onload && this.onload({});\n            }\n        });\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get_from_cache = function(offset, len, fn)\n    {\n        var number_of_blocks = len / this.block_size;\n        var block_index = offset / this.block_size;\n\n        for(var i = 0; i < number_of_blocks; i++)\n        {\n            var block = this.loaded_blocks[block_index + i];\n\n            if(!block)\n            {\n                return;\n            }\n        }\n\n        if(number_of_blocks === 1)\n        {\n            return this.loaded_blocks[block_index];\n        }\n        else\n        {\n            var result = new Uint8Array(len);\n            for(var i = 0; i < number_of_blocks; i++)\n            {\n                result.set(this.loaded_blocks[block_index + i], i * this.block_size);\n            }\n            return result;\n        }\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncXHRBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset + len <= this.byteLength);\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            if(ASYNC_SAFE)\n            {\n                setTimeout(fn.bind(this, block), 0);\n            }\n            else\n            {\n                fn(block);\n            }\n            return;\n        }\n\n        v86util.load_file(this.filename, {\n            done: function done(buffer)\n            {\n                var block = new Uint8Array(buffer);\n                this.handle_read(offset, len, block);\n                fn(block);\n            }.bind(this),\n            range: { start: offset, length: len },\n        });\n    };\n\n    /**\n     * Relies on this.byteLength, this.loaded_blocks and this.block_size\n     *\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     *\n     * @param {number} start\n     * @param {!Uint8Array} data\n     * @param {function()} fn\n     */\n    AsyncXHRBuffer.prototype.set = function(start, data, fn)\n    {\n        console.assert(start + data.byteLength <= this.byteLength);\n\n        var len = data.length;\n\n        console.assert(start % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var start_block = start / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var block = this.loaded_blocks[start_block + i];\n\n            if(block === undefined)\n            {\n                block = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            }\n\n            var data_slice = data.subarray(i * this.block_size, (i + 1) * this.block_size);\n            block.set(data_slice);\n\n            console.assert(block.byteLength === data_slice.length);\n        }\n\n        fn();\n    };\n\n    /**\n     * @this {AsyncFileBuffer|AsyncXHRBuffer}\n     * @param {number} offset\n     * @param {number} len\n     * @param {!Uint8Array} block\n     */\n    AsyncXHRBuffer.prototype.handle_read = function(offset, len, block)\n    {\n        // Used by AsyncXHRBuffer and AsyncFileBuffer\n        // Overwrites blocks from the original source that have been written since\n\n        var start_block = offset / this.block_size;\n        var block_count = len / this.block_size;\n\n        for(var i = 0; i < block_count; i++)\n        {\n            var written_block = this.loaded_blocks[start_block + i];\n\n            if(written_block)\n            {\n                block.set(written_block, i * this.block_size);\n            }\n            //else\n            //{\n            //    var cached = this.loaded_blocks[start_block + i] = new Uint8Array(this.block_size);\n            //    cached.set(block.subarray(i * this.block_size, (i + 1) * this.block_size));\n            //}\n        }\n    };\n\n    AsyncXHRBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must download all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncXHRBuffer.prototype.get_written_blocks = function()\n    {\n        var count = 0;\n        for(var _ in this.loaded_blocks)\n        {\n            count++;\n        }\n\n        var buffer = new Uint8Array(count * this.block_size);\n        var indices = [];\n\n        var i = 0;\n        for(var index in this.loaded_blocks)\n        {\n            var block = this.loaded_blocks[index];\n            dbg_assert(block.length === this.block_size);\n            index = +index;\n            indices.push(index);\n            buffer.set(\n                block,\n                i * this.block_size\n            );\n            i++;\n        }\n\n        return {\n            buffer,\n            indices,\n            block_size: this.block_size,\n        };\n    };\n\n    /**\n     * Synchronous access to File, loading blocks from the input type=file\n     * The whole file is loaded into memory during initialisation\n     *\n     * @constructor\n     */\n    function SyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        if(file.size > (1 << 30))\n        {\n            console.warn(\"SyncFileBuffer: Allocating buffer of \" + (file.size >> 20) + \" MB ...\");\n        }\n\n        this.buffer = new ArrayBuffer(file.size);\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    SyncFileBuffer.prototype.load = function()\n    {\n        this.load_next(0);\n    };\n\n    /**\n     * @param {number} start\n     */\n    SyncFileBuffer.prototype.load_next = function(start)\n    {\n        /** @const */\n        var PART_SIZE = 4 << 20;\n\n        var filereader = new FileReader();\n\n        filereader.onload = function(e)\n        {\n            var buffer = new Uint8Array(e.target.result);\n            new Uint8Array(this.buffer, start).set(buffer);\n            this.load_next(start + PART_SIZE);\n        }.bind(this);\n\n        if(this.onprogress)\n        {\n            this.onprogress({\n                loaded: start,\n                total: this.byteLength,\n                lengthComputable: true,\n            });\n        }\n\n        if(start < this.byteLength)\n        {\n            var end = Math.min(start + PART_SIZE, this.byteLength);\n            var slice = this.file.slice(start, end);\n            filereader.readAsArrayBuffer(slice);\n        }\n        else\n        {\n            this.file = undefined;\n            this.onload && this.onload({ buffer: this.buffer });\n        }\n    };\n\n    /**\n     * @param {number} start\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    SyncFileBuffer.prototype.get = function(start, len, fn)\n    {\n        console.assert(start + len <= this.byteLength);\n        fn(new Uint8Array(this.buffer, start, len));\n    };\n\n    /**\n     * @param {number} offset\n     * @param {!Uint8Array} slice\n     * @param {function()} fn\n     */\n    SyncFileBuffer.prototype.set = function(offset, slice, fn)\n    {\n        console.assert(offset + slice.byteLength <= this.byteLength);\n\n        new Uint8Array(this.buffer, offset, slice.byteLength).set(slice);\n        fn();\n    };\n\n    SyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        fn(this.buffer);\n    };\n\n    /**\n     * Asynchronous access to File, loading blocks from the input type=file\n     *\n     * @constructor\n     */\n    function AsyncFileBuffer(file)\n    {\n        this.file = file;\n        this.byteLength = file.size;\n\n        /** @const */\n        this.block_size = 256;\n        this.loaded_blocks = {};\n\n        this.onload = undefined;\n        this.onprogress = undefined;\n    }\n\n    AsyncFileBuffer.prototype.load = function()\n    {\n        this.onload && this.onload({});\n    };\n\n    /**\n     * @param {number} offset\n     * @param {number} len\n     * @param {function(!Uint8Array)} fn\n     */\n    AsyncFileBuffer.prototype.get = function(offset, len, fn)\n    {\n        console.assert(offset % this.block_size === 0);\n        console.assert(len % this.block_size === 0);\n        console.assert(len);\n\n        var block = this.get_from_cache(offset, len, fn);\n        if(block)\n        {\n            fn(block);\n            return;\n        }\n\n        var fr = new FileReader();\n\n        fr.onload = function(e)\n        {\n            var buffer = e.target.result;\n            var block = new Uint8Array(buffer);\n\n            this.handle_read(offset, len, block);\n            fn(block);\n        }.bind(this);\n\n        fr.readAsArrayBuffer(this.file.slice(offset, offset + len));\n    };\n    AsyncFileBuffer.prototype.get_from_cache = AsyncXHRBuffer.prototype.get_from_cache;\n    AsyncFileBuffer.prototype.set = AsyncXHRBuffer.prototype.set;\n    AsyncFileBuffer.prototype.handle_read = AsyncXHRBuffer.prototype.handle_read;\n\n    AsyncFileBuffer.prototype.get_buffer = function(fn)\n    {\n        // We must load all parts, unlikely a good idea for big files\n        fn();\n    };\n\n    AsyncFileBuffer.prototype.get_as_file = function(name)\n    {\n        var parts = [];\n        var existing_blocks = Object.keys(this.loaded_blocks)\n                                .map(Number)\n                                .sort(function(x, y) { return x - y; });\n\n        var current_offset = 0;\n\n        for(var i = 0; i < existing_blocks.length; i++)\n        {\n            var block_index = existing_blocks[i];\n            var block = this.loaded_blocks[block_index];\n            var start = block_index * this.block_size;\n            console.assert(start >= current_offset);\n\n            if(start !== current_offset)\n            {\n                parts.push(this.file.slice(current_offset, start));\n                current_offset = start;\n            }\n\n            parts.push(block);\n            current_offset += block.length;\n        }\n\n        if(current_offset !== this.file.size)\n        {\n            parts.push(this.file.slice(current_offset));\n        }\n\n        var file = new File(parts, name);\n        console.assert(file.size === this.file.size);\n\n        return file;\n    };\n\n})();\n","\"use strict\";\n\n/**\n * @constructor\n *\n * @param {BusConnector} bus\n */\nfunction DummyScreenAdapter(bus)\n{\n    var\n        graphic_image_data,\n        graphic_buffer,\n        graphic_buffer32,\n\n        /** @type {number} */\n        cursor_row,\n\n        /** @type {number} */\n        cursor_col,\n\n        graphical_mode_width,\n        graphical_mode_height,\n\n        // are we in graphical mode now?\n        is_graphical = false,\n\n        // Index 0: ASCII code\n        // Index 1: Background color\n        // Index 2: Foreground color\n        text_mode_data,\n\n        // number of columns\n        text_mode_width,\n\n        // number of rows\n        text_mode_height;\n\n    this.bus = bus;\n\n    bus.register(\"screen-set-mode\", function(data)\n    {\n        this.set_mode(data);\n    }, this);\n\n    bus.register(\"screen-fill-buffer-end\", function(data)\n    {\n        var min = data[0];\n        var max = data[1];\n\n        this.update_buffer(min, max);\n    }, this);\n\n    bus.register(\"screen-put-char\", function(data)\n    {\n        //console.log(data);\n        this.put_char(data[0], data[1], data[2], data[3], data[4]);\n    }, this);\n\n    bus.register(\"screen-text-scroll\", function(rows)\n    {\n        console.log(\"scroll\", rows);\n    }, this);\n\n    bus.register(\"screen-update-cursor\", function(data)\n    {\n        this.update_cursor(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-update-cursor-scanline\", function(data)\n    {\n        this.update_cursor_scanline(data[0], data[1]);\n    }, this);\n\n    bus.register(\"screen-set-size-text\", function(data)\n    {\n        this.set_size_text(data[0], data[1]);\n    }, this);\n    bus.register(\"screen-set-size-graphical\", function(data)\n    {\n        this.set_size_graphical(data[0], data[1]);\n    }, this);\n\n    this.put_char = function(row, col, chr, bg_color, fg_color)\n    {\n        if(row < text_mode_height && col < text_mode_width)\n        {\n            var p = 3 * (row * text_mode_width + col);\n\n            text_mode_data[p] = chr;\n            text_mode_data[p + 1] = bg_color;\n            text_mode_data[p + 2] = fg_color;\n        }\n    };\n\n    this.destroy = function()\n    {\n    };\n\n    this.set_mode = function(graphical)\n    {\n        is_graphical = graphical;\n    };\n\n    this.clear_screen = function()\n    {\n    };\n\n    /**\n     * @param {number} cols\n     * @param {number} rows\n     */\n    this.set_size_text = function(cols, rows)\n    {\n        if(cols === text_mode_width && rows === text_mode_height)\n        {\n            return;\n        }\n\n        text_mode_data = new Int32Array(cols * rows * 3);\n\n        text_mode_width = cols;\n        text_mode_height = rows;\n    };\n\n    this.set_size_graphical = function(width, height)\n    {\n        graphic_buffer = new Uint8Array(4 * width * height);\n        graphic_buffer32 = new Int32Array(graphic_buffer.buffer);\n\n        graphical_mode_width = width;\n        graphical_mode_height = height;\n\n        this.bus.send(\"screen-tell-buffer\", [graphic_buffer32], [graphic_buffer32.buffer]);\n    };\n\n    this.set_scale = function(s_x, s_y)\n    {\n    };\n\n    this.update_cursor_scanline = function(start, end)\n    {\n    };\n\n    this.update_cursor = function(row, col)\n    {\n        if(row !== cursor_row || col !== cursor_col)\n        {\n            cursor_row = row;\n            cursor_col = col;\n        }\n    };\n\n    this.update_buffer = function(min, max)\n    {\n        if(max < min)\n        {\n            return;\n        }\n\n        var min_y = min / graphical_mode_width | 0;\n        var max_y = max / graphical_mode_width | 0;\n    };\n\n    this.get_text_screen = function()\n    {\n        var screen = [];\n\n        for(var i = 0; i < text_mode_height; i++)\n        {\n            screen.push(this.get_text_row(i));\n        }\n\n        return screen;\n    };\n\n    this.get_text_row = function(i)\n    {\n        var row = \"\";\n        var offset = 3 * i * text_mode_width;\n\n        for(var j = 0; j < text_mode_width; j++)\n        {\n            row += String.fromCharCode(text_mode_data[offset + 3 * j]);\n        }\n\n        return row;\n    };\n}\n"],
"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.iteratorPrototype","$jscomp.polyfill","$jscomp.iteratorFromArray","$jscomp.makeIterator","$jscomp.owns","$jscomp.objectCreate","$jscomp.construct","$jscomp.setPrototypeOf","Virtio9p","filesystem","bus","fs","SendReply","this.SendReply","deviceid","hostfeature","configspace","Uint8Array","VERSION","msize","BLOCKSIZE","replybuffer","replybuffersize","fids","prototype","get_state","Virtio9p.prototype.get_state","state","map","f","inodeid","type","uid","set_state","Virtio9p.prototype.set_state","Virtio9p.prototype.BuildReply","id","tag","payloadsize","marshall.Marshall","Virtio9p.prototype.SendError","errorcode","size","BuildReply","Virtio9p.prototype.ReceiveRequest","index","GetByte","header","marshall.Unmarshall2","used_size","req","Math","floor","total_size","inodes","length","fid","mode","idx","inode","GetInode","ret","OpenInode","AddEvent","qid","bind","dfid","name","CreateInode","inodetarget","targetdata","inodedata","symlink","data","i","parentid","PushInode","gid","CreateSymlink","symgt","major","minor","CreateNode","CreateDirectory","S_IFDIR","CreateFile","FID_INODE","status","STATUS_UNLINKED","SendError","ENOENT","nlinks","atime","mtime","ctime","P9_SETATTR_MODE","P9_SETATTR_UID","P9_SETATTR_GID","P9_SETATTR_ATIME","getTime","Date","P9_SETATTR_MTIME","P9_SETATTR_CTIME","P9_SETATTR_ATIME_SET","P9_SETATTR_MTIME_SET","P9_SETATTR_SIZE","ChangeSize","offset","count","FID_XATTR","caps","file","send","Write","Rename","olddirfid","oldname","newdirfid","newname","dirfd","Search","Unlink","ENOTEMPTY","version","nwfid","nwname","wnames","push","walk","nwidx","CloseInode","FID_NONE","newfid","PrepareCAPs","window","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","ScreenAdapter","screen_container","number_as_color","n","toString","Array","join","elem_set_scale","elem","scale_x","scale_y","use_scale","style","width","height","transform","webkitTransform","MozTransform","rectangle","getBoundingClientRect","scale_str","graphic_screen","imageRendering","device_pixel_ratio","devicePixelRatio","console","assert","getElementsByTagName","graphic_context","getContext","text_screen","cursor_element","document","createElement","graphic_image_data","graphic_buffer32","cursor_row","cursor_col","changed_rows","is_graphical","text_mode_data","text_mode_width","text_mode_height","screen","charmap_high","Uint16Array","charmap_low","charmap","chr","String","fromCharCode","position","backgroundColor","display","register","set_mode","update_buffer","put_char","update_cursor","update_cursor_scanline","clear_screen","set_size_text","set_size_graphical","init","this.init","timer","make_screenshot","this.make_screenshot","open","toDataURL","e","this.put_char","row","col","bg_color","fg_color","p","this.timer","update_graphical","update_text","text_update_row","destroy","this.destroy","this.set_mode","graphical","this.clear_screen","fillStyle","fillRect","this.set_size_text","cols","rows","Int8Array","Int32Array","childNodes","removeChild","firstChild","appendChild","this.set_size_graphical","buffer_width","buffer_height","createImageData","buffer","set_scale","this.set_scale","s_x","s_y","this.update_cursor_scanline","start","end","min","marginTop","this.update_cursor","this.text_update_row","text","row_element","fragment","color_element","color","ascii","textContent","parentNode","replaceChild","this.update_buffer","layers","forEach","layer","putImageData","screen_x","buffer_x","screen_y","buffer_y","get_query_arguments","query","location","search","substr","split","parameters","param","decodeURIComponent","chr_repeat","result","$","getElementById","el","onload","start_profile","infos","title","settings","initial_state","fda","cdrom","hda","multiboot","memory_size","vga_memory_size","undefined","boot_order","description","innerHTML","start_emulation","done","emulator","query_args","setTimeout","keyboard_send_text","XMLHttpRequest","onclick","set_profile","floppy_file","files","last_file","cd_file","hd_file","multiboot_file","oses","HOST","ON_LOCALHOST","ON_HTTPS","OTHER_HOST","profile","use_bochs_bios","element","blur","parseInt","alert","MB","value","biosfile","vgabiosfile","bios","BIOSPATH","vga_bios","V86Starter","add_listener","init_ui","file_index","file_count","loaded","total","line","per100","max","per50","progress_ticks","file_name","update_info","now","instruction_counter","get_instruction_counter","last_ips","last_instr_counter","delta_time","last_tick","running_time","time","v86util.pad0","add_image_download_button","obj","elem.onclick","disk_images","filename","get_as_file","download","get_buffer","b","dump_file","ctrl_w_rescue","ctrlKey","onbeforeunload","window.onbeforeunload","init_filesystem_panel","cpu_is_running","stop","run","href","pathname","mouse_is_enabled","lock_mouse","mouse_adapter","emu_enabled","interval","os_uses_mouse","setInterval","clearInterval","args","read","write","read_sectors","write_sectors","bytes_received","bytes_transmitted","is_enabled","restart","hdb","fdb","v86","cpu","mem8","save_state","error","log","stack","click","onchange","was_running","filereader","FileReader","filereader.onload","restore_state","target","err","readAsArrayBuffer","keyboard_send_scancodes","parseFloat","screen_set_scale","screen_go_fullscreen","getSelection","isCollapsed","phone_keyboard","getElementsByClassName","top","body","scrollTop","left","scrollLeft","focus","setAttribute","tabIndex","addEventListener","screen_make_screenshot","call","loader","v86util.SyncFileBuffer","loader.onload","create_file","load","onkeypress","which","disabled","read_file","uint8array","replace","onpopstate","reload","prof","history","pushState","hostname","endsWith","protocol","readyState","IO","ports","create_empty_entry","MMAP_BLOCK_BITS","memory_map_read8","memory_map_write8","memory_map_read32","memory_map_write32","mmap_register","IO.prototype.create_empty_entry","read8","empty_port_read8","read16","empty_port_read16","read32","empty_port_read32","write8","empty_port_write","write16","write32","device","IO.prototype","IO.prototype.empty_port_read8","IO.prototype.empty_port_read16","IO.prototype.empty_port_read32","IO.prototype.empty_port_write","IO.prototype.register_read","port_addr","r8","r16","r32","IO.prototype.register_write","w8","w16","w32","register_read_consecutive","IO.prototype.register_read_consecutive","r8_1","r8_2","r8_3","r8_4","r16_1","r16_2","register_read","register_write_consecutive","IO.prototype.register_write_consecutive","w8_1","w8_2","w8_3","w8_4","w16_1","w16_2","register_write","IO.prototype.in_mmap_range","in_mapped_range","MMAP_BLOCK_SIZE","mmap_read32_shim","IO.prototype.mmap_read32_shim","addr","fn","mmap_write32_shim","IO.prototype.mmap_write32_shim","IO.prototype.mmap_register","read_func8","write_func8","read_func32","write_func32","aligned_addr","IO.prototype.port_write8","entry","IO.prototype.port_write16","IO.prototype.port_write32","IO.prototype.port_read8","IO.prototype.port_read16","IO.prototype.port_read32","stopped","running","CPU","register_tick","v86.prototype.run","fast_next_tick","v86.prototype.do_tick","in_hlt","v86.microtick","hlt_loop","devices","pit","rtc","handle_irqs","t","TIME_PER_FRAME","run_hardware_timers","do_run","do_many_cycles","dt","next_tick","v86.prototype.stop","v86.prototype.restart","reset","load_bios","v86.prototype.init","setImmediate","do_tick","postMessage","MAGIC_POST_MESSAGE","source","v86.prototype","hidden","v86.prototype.save_state","v86.prototype.restore_state","performance","str","len","h","toUpperCase","crypto","getRandomValues","rand_data","v86util.has_rand_int","v86util.get_rand_int","SyncBuffer","byteLength","SyncBuffer.prototype.load","get","SyncBuffer.prototype.get","set","SyncBuffer.prototype.set","slice","SyncBuffer.prototype.get_buffer","int_log2_table","v86util.int_log2_byte","x","v86util.int_log2","tt","ByteQueue","this.push","item","shift","this.shift","clear","this.clear","FloatQueue","DSP_DACSIZE","Float32Array","FloatQueue.prototype.push","FloatQueue.prototype.shift","FloatQueue.prototype.shift_block","slice_end","partial","subarray","FloatQueue.prototype.clear","ab","blob","Blob","file_or_blob","a","URL","createObjectURL","dataset","createEvent","ev","initMouseEvent","dispatchEvent","revokeObjectURL","FPU","st","Float64Array","float32","float32_int","float64","float64_byte","float64_int","st8","stack_empty","stack_ptr","control_word","fpu_dp_selector","fpu_dp","fpu_opcode","fpu_ip_selector","fpu_ip","status_word","indefinite_nan","NaN","constants","LN2","LOG2E","PI","LN10","FPU.prototype","FPU.prototype.get_state","FPU.prototype.set_state","FPU.prototype.fpu_unimpl","trigger_ud","FPU.prototype.invalid_arithmatic","FPU_EX_I","FPU.prototype.fcom","y","get_st0","FPU_C0","FPU_C3","FPU.prototype.fcomi","flags_changed","flags","flag_zero","FPU.prototype.finit","FPU.prototype.load_status_word","FPU.prototype.fstenv","is_osize_32","writable_or_pagefault","safe_write16","load_status_word","tag_word","load_tag_word","isFinite","safe_write32","fpu_unimpl","FPU.prototype.fldenv","safe_read16","set_status_word","sw","set_tag_word","safe_read32s","FPU.prototype.integer_round","rc","rounded","round","ceil","FPU.prototype.truncate","FPU.prototype.push","FPU_C1","stack_fault","pop","FPU.prototype.pop","FPU.prototype.get_sti","FPU.prototype.get_st0","FPU.prototype.load_m80","exponent","low","high","sign","mantissa","pow","FPU.prototype.store_m80","FPU.prototype.load_m64","FPU.prototype.store_m64","get_sti","FPU.prototype.load_m32","FPU.prototype.sign","IDEDevice","is_cd","nr","master","IDEInterface","slave","current_interface","ata_port","irq","pci_id","ata_port_high","master_port","pci_space","pci_bars","device_control","io","device_lower_irq","read_status","write_control","read_data","bytecount","sector","cylinder_low","cylinder_high","drive_head","write_data_port","lba_count","is_lba","head","dma_command","dma_status","prdt_addr","current_command","data_pointer","data_end","data_length","device_reset","push_irq","last_sector","sector_count","ata_read_sectors","is_lba48","get_count","ata_write_sectors","lba","get_lba","is_single","byte_count","sector_size","data_allocate_noclear","sectors_per_drq","write_dest","is_atapi","data_allocate","create_identify_packet","ata_read_sectors_dma","ata_write_sectors_dma","dma_read_addr","dma_set_addr","dma_read_command8","dma_read_command","dma_write_command8","dma_write_command","dma_read_status","dma_write_status","register_device","pci","IDEDevice.prototype","IDEDevice.prototype.read_status","IDEDevice.prototype.write_control","IDEDevice.prototype.dma_read_addr","IDEDevice.prototype.dma_set_addr","IDEDevice.prototype.dma_read_status","IDEDevice.prototype.dma_write_status","IDEDevice.prototype.dma_read_command","IDEDevice.prototype.dma_read_command8","IDEDevice.prototype.dma_write_command","IDEDevice.prototype.dma_write_command8","old_command","do_ata_read_sectors_dma","do_ata_write_sectors_dma","do_atapi_dma","IDEDevice.prototype.push_irq","device_raise_irq","IDEDevice.prototype.get_state","IDEDevice.prototype.set_state","device_nr","CDROM_SECTOR_SIZE","HD_SECTOR_SIZE","cylinder_count","sectors_per_track","head_count","cmos_data","CMOS_BIOS_DISKTRANSFLAG","CMOS_DISK_DATA","stats","sectors_read","sectors_written","bytes_read","bytes_written","loading","data16","data32","current_atapi_command","Object","seal","IDEInterface.prototype.device_reset","IDEInterface.prototype.push_irq","do_write","IDEInterface.prototype.do_write","ata_advance","report_write","IDEInterface.prototype.atapi_read","cmd","req_length","report_read_start","data_set","report_read_end","IDEInterface.prototype.atapi_read_dma","IDEInterface.prototype.do_atapi_dma","prdt_start","read32s","IDEInterface.prototype.read_data","read_end","IDEInterface.prototype.write_data_port","write_end","atapi_read_dma","atapi_read","format","page_code","IDEInterface.prototype.ata_advance","sectors","new_sector","get_lba48","get_lba28","get_chs","c","IDEInterface.prototype.ata_read_sectors","IDEInterface.prototype.do_ata_read_sectors_dma","prd_addr","prd_count","IDEInterface.prototype.do_ata_write_sectors_dma","prdt_count","prdt_write_count","IDEInterface.prototype.get_chs","IDEInterface.prototype.get_lba28","IDEInterface.prototype.get_lba48","IDEInterface.prototype.get_lba","IDEInterface.prototype.get_count","IDEInterface.prototype.create_identify_packet","IDEInterface.prototype.data_allocate","IDEInterface.prototype.data_allocate_noclear","IDEInterface.prototype.data_set","IDEInterface.prototype.report_read_start","IDEInterface.prototype.report_read_end","IDEInterface.prototype.report_write","IDEInterface.prototype.get_state","IDEInterface.prototype.set_state","PCI","pci_addr","pci_value","pci_response","pci_status","pci_addr32","pci_response32","pci_status32","device_spaces","PCI_CONFIG_DATA","pci_write8","pci_write16","bdf","address","space","pci_write32","bar","space_addr","written","original_bar","set_io_bars","pci_rom_size","pci_rom_address","PCI_CONFIG_ADDRESS","out_byte","pci_query","host_bridge","isa_bridge","isa_bridge_space","isa_bridge_space8","PCI.prototype.get_state","PCI.prototype.set_state","bar_nr","PCI.prototype.pci_write8","PCI.prototype.pci_write16","PCI.prototype.register_device","device_id","bar_space","bar_base","entries","j","port","PCI.prototype.set_io_bars","from","to","raise_irq","PCI.prototype.raise_irq","PCI.prototype.lower_irq","FloppyController","fda_image","dma","bytes_expecting","receiving_command","receiving_index","next_command","response_data","floppy_size","response_length","response_index","last_head","last_cylinder","drive","status_reg2","status_reg1","status_reg0","dor","number_of_cylinders","floppy_type","floppy_types","tracks","heads","CMOS_FLOPPY_DRIVE_TYPE","number_of_heads","port3F0_read","port3F2_read","port3F4_read","port3F5_read","port3F7_read","port3F2_write","port3F5_write","FloppyController.prototype","FloppyController.prototype.get_state","FloppyController.prototype.set_state","FloppyController.prototype.port3F0_read","FloppyController.prototype.port3F4_read","return_byte","FloppyController.prototype.port3F7_read","FloppyController.prototype.port3F5_read","FloppyController.prototype.port3F5_write","reg_byte","fix_drive_data","check_drive_status","this.next_command","do_sector","calibrate","check_interrupt_status","read_sector_id","seek","FloppyController.prototype.port3F2_read","FloppyController.prototype.port3F2_write","FloppyController.prototype.check_drive_status","FloppyController_prototype$seek","FloppyController.prototype.seek","FloppyController.prototype.calibrate","FloppyController.prototype.do_sector","is_write","cylinder","read_count","read_offset","do_read","FloppyController.prototype.done","FloppyController.prototype.fix_drive_data","FloppyController.prototype.read_sector_id","FloppyController.prototype.raise_irq","CPU.prototype.mmap_read16","CPU.prototype.mmap_write16","CPU.prototype.in_mapped_range","CPU.prototype","CPU.prototype.read8","mmap_read8","CPU.prototype.read16","mmap_read16","CPU.prototype.read_aligned16","mem16","CPU.prototype.read32s","mmap_read32","CPU.prototype.read_aligned32","CPU.prototype.write8","mmap_write8","CPU.prototype.write16","mmap_write16","CPU.prototype.write_aligned16","CPU.prototype.write32","mmap_write32","CPU.prototype.write_aligned32","mem32s","DMA","channel_page","channel_pagehi","channel_addr","channel_addr_init","channel_count","channel_count_init","channel_mask","channel_mode","unmask_listeners","lsb_msb_flipflop","port_addr_write","port_count_write","port_addr_read","port_count_read","port_page_write","port_page_read","port_pagehi_write","port_pagehi_read","port_singlemask_write","port_multimask_write","port_multimask_read","port_mode_write","portC_write","DMA.prototype","DMA.prototype.get_state","DMA.prototype.set_state","DMA.prototype.port_count_write","channel","data_byte","flipflop_get","DMA.prototype.port_count_read","flipflop_read","DMA.prototype.port_addr_write","DMA.prototype.port_addr_read","DMA.prototype.port_pagehi_write","DMA.prototype.port_pagehi_read","DMA.prototype.port_page_write","DMA.prototype.port_page_read","DMA.prototype.port_singlemask_write","channel_offset","update_mask","DMA.prototype.port_multimask_write","DMA.prototype.port_multimask_read","DMA.prototype.port_mode_write","DMA.prototype.portC_write","DMA.prototype.update_mask","this_value","DMA.prototype.do_read","count_get_8bit","address_get_8bit","DMA.prototype.do_write","bytes_per_count","read_bytes","unfinished","want_more","autoinit","DMA.prototype.address_get_8bit","DMA.prototype.flipflop_get","old_dword","new_byte","continuing","DMA.prototype.flipflop_read","dword","PIT","counter_start_time","counter_start_value","counter_next_low","counter_enabled","counter_mode","counter_read_mode","counter_latch","counter_latch_value","counter_reload","ref_toggle","counter2_out","did_rollover","counter_read","counter_write","port43_write","PIT.prototype.get_state","PIT.prototype.set_state","PIT.prototype.timer","no_irq","get_counter_value","PIT.prototype.get_counter_value","diff_in_ticks","OSCILLATOR_FREQ","PIT.prototype.did_rollover","diff","PIT.prototype.counter_read","latch","next_low","PIT.prototype.counter_write","PIT.prototype.port43_write","read_mode","VGA_HOST_MEMORY_SPACE_START","Uint32Array","VGA_HOST_MEMORY_SPACE_SIZE","VGAScreen","cursor_address","cursor_scanline_start","cursor_scanline_end","max_cols","max_rows","virtual_height","virtual_width","screen_height","screen_width","start_address_latched","start_address","crtc","line_compare","offset_register","preset_row_scan","underline_location_register","vertical_blank_start","vertical_display_enable_end","horizontal_blank_start","horizontal_display_enable_end","crtc_mode","graphical_mode_is_linear","graphical_mode","vga256_palette","svga_height","svga_width","latch_dword","svga_enabled","svga_bpp","svga_offset","svga_bank_offset","res_x","res_y","bpp","dac_state","dac_color_index_read","dac_color_index_write","index_crtc","dac_map","attribute_controller_index","palette_source","color_select","horizontal_panning","color_plane_enable","attribute_mode","sequencer_index","plane_write_bm","clocking_mode","sequencer_memory_mode","graphics_index","planar_rotate_reg","planar_mode","plane_read","planar_bitmap","max_scan_line","color_dont_care","color_compare","miscellaneous_graphics_register","planar_setreset_enable","planar_setreset","port_3DA_value","miscellaneous_output_register","port3C0_write","port3C0_read","port3C0_read16","port3C1_read","port3C2_write","port3C4_write","port3C5_write","port3C4_read","port3C5_read","port3CE_write","port3CF_write","port3CE_read","port3CF_read","port3C7_write","port3C7_read","port3C8_write","port3C8_read","port3C9_write","port3C9_read","port3CC_read","port3D4_write","port3D5_write","port3D4_read","port3D5_read","port3DA_read","dispi_index","dispi_enable_value","port1CE_write","port1CF_write","port1CF_read","VGA_MIN_MEMORY_SIZE","svga_memory","diff_addr_min","diff_addr_max","diff_plot_min","diff_plot_max","dest_buffer","screen_fill_buffer","start_pixel","end_pixel","svga_memory32","red","green","blue","word","svga_memory16","min_y","addr_shift","vga_addr_shift_count","addr_substitution","shift_mode","pel_width","pixel_addr","byte0","plane0","byte1","plane1","byte2","plane2","byte3","plane3","shift_loads","pixel_buffer","mask","colorset","color256","update_vertical_retrace","vga_memory","VGA_BANK_SIZE","VGA_PIXEL_BUFFER_START","VGA_PIXEL_BUFFER_SIZE","me","vga_memory_read","memory_space_select","bitmask","apply_feed","setreset_dword","apply_expand","setreset_enable_dword","plane_dword","apply_logical","plane_select","vga_addr_to_pixel","memory_start","VGA_LFB_ADDRESS","VGAScreen.prototype","VGAScreen.prototype.get_state","VGAScreen.prototype.set_state","update_layers","update_vga_size","complete_replot","complete_redraw","VGAScreen.prototype.vga_memory_read","reading","plane","VGAScreen.prototype.apply_feed","VGAScreen.prototype.apply_expand","VGAScreen.prototype.apply_logical","data_dword","VGAScreen.prototype.text_mode_redraw","VGAScreen.prototype.update_cursor","VGAScreen.prototype.complete_redraw","text_mode_redraw","VGAScreen.prototype.complete_replot","VGAScreen.prototype.destroy","VGAScreen.prototype.vga_addr_shift_count","shift_count","VGAScreen.prototype.vga_addr_to_pixel","VGAScreen.prototype.scan_line_to_screen_row","scan_line","VGAScreen.prototype.set_size_text","cols_count","rows_count","VGAScreen.prototype.set_size_graphical","VGAScreen.prototype.update_vga_size","horizontal_characters","vertical_scans","bytes_per_line","vga_bytes_per_line","scan_line_to_screen_row","available_bytes","VGAScreen.prototype.update_layers","start_addr","pixel_panning","byte_panning","pixel_addr_start","start_buffer_row","start_buffer_col","split_screen_row","split_buffer_height","start_split_col","VGAScreen.prototype.update_vertical_retrace","VGAScreen.prototype.update_cursor_scanline","VGAScreen.prototype.port3C0_write","previous_mode","VGAScreen.prototype.port3C0_read","VGAScreen.prototype.port3C0_read16","VGAScreen.prototype.port3C1_read","VGAScreen.prototype.port3C2_write","VGAScreen.prototype.port3C4_write","VGAScreen.prototype.port3C4_read","VGAScreen.prototype.port3C5_write","previous_clocking_mode","VGAScreen.prototype.port3C5_read","VGAScreen.prototype.port3C7_write","VGAScreen.prototype.port3C7_read","VGAScreen.prototype.port3C8_write","VGAScreen.prototype.port3C8_read","VGAScreen.prototype.port3C9_write","color_byte","VGAScreen.prototype.port3C9_read","VGAScreen.prototype.port3CC_read","VGAScreen.prototype.port3CE_write","VGAScreen.prototype.port3CE_read","VGAScreen.prototype.port3CF_write","previous_planar_mode","VGAScreen.prototype.port3CF_read","VGAScreen.prototype.port3D4_write","VGAScreen.prototype.port3D4_read","VGAScreen.prototype.port3D5_write","previous_vertical_display_enable_end","previous_vertical_blank_start","previous_underline","VGAScreen.prototype.port3D5_read","VGAScreen.prototype.port3DA_read","VGAScreen.prototype.port1CE_write","VGAScreen.prototype.port1CF_write","MAX_XRES","MAX_YRES","svga_bytes_per_line","bits","VGAScreen.prototype.port1CF_read","svga_register_read","VGAScreen.prototype.svga_register_read","MAX_BPP","PS2","use_mouse","enable_mouse_stream","have_mouse","mouse_clicks","mouse_delta_y","mouse_delta_x","have_keyboard","next_read_resolution","next_read_rate","next_handle_scan_code_set","next_read_led","next_read_sample","next_is_mouse_command","enable_keyboard_stream","kbd_buffer","last_port60_byte","sample_rate","resolution","scaling2","mouse_buffer","next_byte_is_aux","next_byte_is_ready","code","kbd_send_code","mouse_send_click","right","middle","send_mouse_packet","mouse_send_delta","factor","delta_x","delta_y","change_x","change_y","command_register","read_command_register","read_output_register","port60_read","port64_read","port60_write","port64_write","PS2.prototype","PS2.prototype.get_state","PS2.prototype.set_state","PS2.prototype.raise_irq","kbd_irq","mouse_irq","PS2.prototype.mouse_irq","PS2.prototype.kbd_irq","PS2.prototype.send_mouse_packet","dx","dy","PS2.prototype.port60_read","PS2.prototype.port64_read","status_byte","PS2.prototype.port60_write","write_byte","PS2.prototype.port64_write","MAGIC_CPU_EXCEPTION","PIC","irq_value","irr","isr","irq_map","irq_mask","requested_irq","is_master","expect_icw4","read_isr","auto_eoi","elcr","special_mask_mode","check_irqs","this.check_irqs","enabled_irr","special_mask","irq_number","acknowledge_irq","this.acknowledge_irq","pic_call_irq","set_irq","io_base","iobase_high","port20_write","port20_read","port21_write","port21_read","port4D0_write","port4D0_read","this.set_irq","clear_irq","this.clear_irq","PIC.prototype","PIC.prototype.get_state","PIC.prototype.set_state","PIC.prototype.port20_write","eoi_type","PIC.prototype.port20_read","PIC.prototype.port21_write","PIC.prototype.port21_read","PIC.prototype.port4D0_read","PIC.prototype.port4D0_write","RTC","cmos_index","last_update","rtc_time","next_interrupt","periodic_interrupt","periodic_interrupt_time","cmos_a","cmos_b","nmi_disabled","cmos_c","cmos_port_write","cmos_port_read","RTC.prototype","RTC.prototype.get_state","RTC.prototype.set_state","RTC.prototype.timer","RTC.prototype.encode_time","digit","RTC.prototype.cmos_port_read","CMOS_RTC_SECONDS","encode_time","getUTCSeconds","CMOS_RTC_MINUTES","getUTCMinutes","CMOS_RTC_HOURS","getUTCHours","CMOS_RTC_DAY_MONTH","getUTCDate","CMOS_RTC_MONTH","getUTCMonth","CMOS_RTC_YEAR","getUTCFullYear","CMOS_STATUS_A","CMOS_STATUS_B","CMOS_STATUS_C","CMOS_STATUS_D","CMOS_CENTURY","RTC.prototype.cmos_port_write","UART","ints","line_control","baud_rate","lsr","ier","fifo_control","iir","UART_IIR_NO_INT","scratch_register","modem_status","modem_control","input","current_line","data_received","UART_LSR_DATA_READY","CheckInterrupt","write_data","out_word","DLAB","ClearInterrupt","UART_IIR_THRI","UART.prototype.get_state","UART.prototype.set_state","UART.prototype.CheckInterrupt","UART_IER_RDI","UART_IIR_CTI","UART_IER_THRI","UART_IER_MSI","UART_IIR_MSI","UART.prototype.write_data","ThrowInterrupt","char","apply","StateLoadError","msg","message","Error","save_object","saved_buffers","BYTES_PER_ELEMENT","byteOffset","constructor","restore_object","base","buffers","current","table","Int16Array","info","full","buf","CPU.prototype.save_state","buffer_infos","total_buffer_size","info_object","JSON","stringify","buffer_block_start","STATE_INFO_BLOCK_START","ArrayBuffer","header_block","info_block","buffer_block","STATE_INDEX_MAGIC","STATE_MAGIC","STATE_INDEX_VERSION","STATE_VERSION","STATE_INDEX_TOTAL_LEN","STATE_INDEX_INFO_LEN","charCodeAt","CPU.prototype.restore_state","info_block_len","info_block_str_len","info_block_buffer","info_block_obj","parse","state_object","Ne2k","receive","cr","rxcr","memory","curpg","total_length","packet_length","data_start","next","cut","START_RX_PAGE","pstop","pstart","ENRSR_RXOK","do_interrupt","ENISR_RX","imr","tpsr","tcnt","rcnt","dcfg","tsr","mac","random","rsar","START_PAGE","STOP_PAGE","boundary","E8390_CMD","ENISR_RDC","ENISR_TX","EN0_COUNTER0","EN0_COUNTER1","EN0_COUNTER2","NE_RESET","get_page","ENISR_RESET","EN0_STARTPG","EN0_STOPPG","EN0_ISR","update_irq","EN0_TXCR","EN0_DCFG","EN0_RCNTLO","EN0_RCNTHI","EN0_RSARLO","EN0_RSARHI","EN0_IMR","EN0_BOUNDARY","EN0_TSR","EN0_TPSR","EN0_TCNTLO","EN0_TCNTHI","EN0_RSR","EN0_RXCR","data_port_read8","data_port_read16","data_port_read32","data_port_write16","data_port_write32","Ne2k.prototype","Ne2k.prototype.get_state","Ne2k.prototype.set_state","Ne2k.prototype.do_interrupt","ir_mask","Ne2k.prototype.update_irq","lower_irq","Ne2k.prototype.data_port_write","Ne2k.prototype.data_port_write16","data_port_write","Ne2k.prototype.data_port_write32","Ne2k.prototype.data_port_read","Ne2k.prototype.data_port_read8","Ne2k.prototype.data_port_read16","data_port_read","Ne2k.prototype.data_port_read32","DSP_COMMAND_SIZES","DSP_COMMAND_HANDLERS","MIXER_READ_HANDLERS","MIXER_WRITE_HANDLERS","FM_HANDLERS","SB16","write_buffer","DSP_BUFSIZE","read_buffer","mixer_current_address","command_size","command","read_buffer_lastvalue","mixer_registers","mixer_reset","dummy_speaker_enabled","test_register","dsp_signed","dsp_16bit","dsp_stereo","dsp_highspeed","dac_buffers","dma_channel","dma_irq","dma_bytes_block","dma_bytes_left","dma_bytes_count","dma_sample_count","dma_channel_8bit","SB_DMA1","dma_channel_16bit","SB_DMA5","dma_autoinit","dma_buffer","SB_DMA_BUFSIZE","dma_buffer_int8","dma_buffer_uint8","dma_buffer_int16","dma_buffer_uint16","dma_syncbuffer","dma_paused","dma_waiting_transfer","sampling_rate","bytes_per_sample","e2_value","e2_count","asp_registers","mpu_read_buffer","fm_current_address1","fm_current_address0","mpu_read_buffer_lastvalue","fm_waveform_select_enable","SB_IRQ5","irq_triggered","port2x0_read","port2x1_read","port2x2_read","port2x3_read","port2x4_read","port2x5_read","port2x6_read","port2x7_read","port2x8_read","port2x9_read","port2xA_read","port2xB_read","port2xC_read","port2xD_read","port2xE_read","port2xF_read","port2x0_write","port2x1_write","port2x2_write","port2x3_write","port2x4_write","port2x5_write","port2x6_write","port2x7_write","port2x8_write","port2x9_write","port2xA_write","port2xB_write","port2xC_write","port2xD_write","port2xE_write","port2xF_write","port3x0_read","port3x1_read","port3x0_write","port3x1_write","dma_on_unmask","dac_handle_request","dac_send","dma_transfer_next","dsp_reset","SB16.prototype.dsp_reset","DSP_NO_COMMAND","fill","SB_IRQ_8BIT","SB16.prototype","SB16.prototype.get_state","mpu_read_buffer_last_value","SB16.prototype.set_state","mixer_full_update","SB16.prototype.port2x0_read","SB16.prototype.port2x1_read","SB16.prototype.port2x2_read","SB16.prototype.port2x3_read","SB16.prototype.port2x4_read","SB16.prototype.port2x5_read","handler","mixer_read","SB16.prototype.port2x6_read","SB16.prototype.port2x7_read","SB16.prototype.port2x8_read","SB16.prototype.port2x9_read","SB16.prototype.port2xA_read","SB16.prototype.port2xB_read","SB16.prototype.port2xC_read","SB16.prototype.port2xD_read","SB16.prototype.port2xE_read","SB16.prototype.port2xF_read","SB_IRQ_16BIT","SB16.prototype.port2x0_write","SB16.prototype.port2x1_write","fm_default_write","SB16.prototype.port2x2_write","SB16.prototype.port2x3_write","SB16.prototype.port2x4_write","SB16.prototype.port2x5_write","mixer_write","SB16.prototype.port2x6_write","yesplease","SB16.prototype.port2x7_write","SB16.prototype.port2x8_write","SB16.prototype.port2x9_write","SB16.prototype.port2xA_write","SB16.prototype.port2xB_write","SB16.prototype.port2xC_write","command_do","dsp_default_handler","SB16.prototype.port2xD_write","SB16.prototype.port2xE_write","SB16.prototype.port2xF_write","SB16.prototype.port3x0_read","SB16.prototype.port3x0_write","SB16.prototype.port3x1_read","SB16.prototype.port3x1_write","SB16.prototype.dsp_default_handler","register_dsp_command","commands","any_first_digit","audio_clip","amplitude","dma_transfer_size_set","dma_transfer_start","sampling_rate_change","get_channel_count","DSP_COPYRIGHT","SB_F9","SB16.prototype.mixer_write","mixer_default_read","SB16.prototype.mixer_default_read","mixer_default_write","SB16.prototype.mixer_default_write","SB16.prototype.mixer_reset","SB16.prototype.mixer_full_update","register_mixer_read","register_mixer_write","register_mixer_legacy","address_old","address_new_left","address_new_right","prev_right","prev_left","register_mixer_volume","mixer_source","MIXER_SRC_MASTER","MIXER_CHANNEL_LEFT","MIXER_CHANNEL_RIGHT","MIXER_SRC_DAC","MIXER_SRC_PCSPEAKER","MIXER_CHANNEL_BOTH","SB_IRQ2","SB_IRQ7","SB_IRQ10","SB_DMA0","SB_DMA3","SB_DMA6","SB_DMA7","SB16.prototype.fm_default_write","register_fm_write","addresses","between","SB_FM_OPERATORS_BY_OFFSET","SB16.prototype.sampling_rate_change","rate","SB16.prototype.dma_transfer_size_set","SB16.prototype.dma_transfer_start","SB_DMA_BLOCK_SAMPLES","max_bytes_block","SB16.prototype.dma_on_unmask","SB16.prototype.dma_transfer_next","samples","dma_to_dac","repeats","sample","SB16.prototype.dac_send","out0","shift_block","out1","SB16.prototype.raise_irq","SB16.prototype.lower_irq","VirtIO","queue_select","queue_size","queue_address","device_status","ring_start","ring_desc_start","last_idx","desc_idx","handle_descriptor","device_reply","VirtIO.prototype.get_state","VirtIO.prototype.set_state","VirtIO.prototype.reset","VirtIO.prototype.handle_descriptor","desc_start","buffer_idx","VRING_DESC_F_WRITE","addr_low","addr_high","VRING_DESC_F_NEXT","buffer_len","pointer","ReceiveRequest","VirtIO.prototype.device_reply","queueidx","result_length","used_desc_start","used_idx","used_desc_offset","BusConnector","listeners","pair","BusConnector.prototype.register","unregister","BusConnector.prototype.unregister","filter","l","BusConnector.prototype.send","listener","Bus.create","c0","c1","a20_enabled","segment_is_null","segment_limits","segment_offsets","tlb_data","tlb_info","tlb_info_global","protected_mode","gdtr_offset","gdtr_size","idtr_offset","idtr_size","page_fault","tss_size_32","page_size_extensions","cpl","stack_size_32","is_32","last_result","last_add_result","last_op_size","last_op2","last_op1","prefixes","sysenter_eip","sysenter_esp","sysenter_cs","esp_phys","last_virt_esp","eip_phys","last_virt_eip","mul32_result","div32_result","phys_addr_high","phys_addr","modrm_byte","tsc_offset","paging","previous_ip","instruction_pointer","apic_enabled","timestamp_counter","reg32s","reg32","reg16s","reg16","reg8s","reg8","reg_mmxs","reg_mmx8s","reg_mmx8","reg_xmm32s","mxcsr","sreg","dreg","main","vga","fw_value","fpu","update_operand_size","debug_init","CPU.prototype.get_state","virtio","apic","acpi","hpet","ps2","uart","fdc","net","pic","sb16","ioapic","CPU.prototype.set_state","full_clear_tlb","exception_cleanup","CPU.prototype.exception_cleanup","clear_prefixes","CPU.prototype.reset","flags_default","switch_cs_real_mode","switch_seg","reg_ss","reg_sp","create_memory","CPU.prototype.create_memory","goog.exportProperty","CPU.prototype.init","device_bus","a20_byte","FW_CFG_SIGNATURE","FW_CFG_RAM_SIZE","FW_CFG_NB_CPUS","load_devices","fill_cmos","ide_device_count","enable_ne2k","fs9p","load_multiboot","CPU.prototype.load_multiboot","MULTIBOOT_SEARCH_BYTES","buf32","MAGIC","checksum","reg_eax","reg_ebx","multiboot_info_addr","update_cs_size","MULTIBOOT_HEADER_ADDRESS","load_addr","load_end_addr","entry_addr","header_addr","write_blob","get_seg","reg_cs","ELF_MAGIC","elf","read_elf","program_headers","program","filesz","paddr","CPU.prototype.fill_cmos","CMOS_BIOS_BOOTFLAG1","CMOS_BIOS_BOOTFLAG2","CMOS_MEM_BASE_LOW","CMOS_MEM_BASE_HIGH","memory_above_1m","CMOS_MEM_OLD_EXT_LOW","CMOS_MEM_OLD_EXT_HIGH","CMOS_MEM_EXTMEM_LOW","CMOS_MEM_EXTMEM_HIGH","memory_above_16m","CMOS_MEM_EXTMEM2_LOW","CMOS_MEM_EXTMEM2_HIGH","CMOS_MEM_HIGHMEM_LOW","CMOS_MEM_HIGHMEM_MID","CMOS_MEM_HIGHMEM_HIGH","CMOS_EQUIPMENT_INFO","CMOS_BIOS_SMP_COUNT","fastboot","CPU.prototype.load_bios","vga_bios8","CPU.prototype.do_many_cycles","do_many_cycles_unsafe","CPU.prototype.do_many_cycles_unsafe","k","LOOP_COUNTER","cycle_internal","CPU.prototype.cycle_internal","opcode","read_imm8","cycle","CPU.prototype.cycle","CPU.prototype.segment_prefix_op","run_prefix_instruction","CPU.prototype.run_prefix_instruction","table32","table16","CPU.prototype.set_cr0","cr0","CR0_PG","debug","unimpl","CR0_EM","CR0_ET","new_paging","CR0_PE","CPU.prototype.cpl_changed","CPU.prototype.read_imm8","translate_address_read","data8","read_imm8s","CPU.prototype.read_imm8s","read_imm16","CPU.prototype.read_imm16","read_imm32s","CPU.prototype.read_imm32s","CPU.prototype.create_atom64s","CPU.prototype.create_atom128s","d0","d1","d2","d3","CPU.prototype.read_modrm_byte","read_op0F","read_sib","read_op8","read_op8s","read_op16","read_op32s","read_disp8","read_disp8s","read_disp16","read_disp32s","CPU.prototype.modrm_resolve","is_asize_32","modrm_table32","modrm_table16","CPU.prototype.sib_resolve","mod","sib_table","CPU.prototype.virt_boundary_write32","CPU.prototype.safe_read8","CPU.prototype.safe_read16","safe_read8","CPU.prototype.safe_read32s","CPU.prototype.safe_read64s","create_atom64s","CPU.prototype.safe_write8","translate_address_write","CPU.prototype.safe_write16","phys_low","virt_boundary_write16","CPU.prototype.safe_write32","virt_boundary_write32","CPU.prototype.safe_write64","CPU.prototype.safe_write128","CPU.prototype.read_moffs","get_seg_prefix","reg_ds","CPU.prototype.getiopl","CPU.prototype.vm86_mode","flag_vm","CPU.prototype.get_eflags","getcf","getpf","getaf","getzf","getsf","getof","CPU.prototype.update_eflags","new_flags","dont_update","flag_iopl","getiopl","flag_interrupt","CPU.prototype.get_stack_reg","reg_esp","CPU.prototype.set_stack_reg","CPU.prototype.adjust_stack_reg","CPU.prototype.get_stack_pointer","CPU.prototype.get_real_eip","CPU.prototype.call_interrupt_vector","interrupt_nr","is_software_int","error_code","vm86_mode","CR4_VME","trigger_gp","translate_address_system_read","selector","access","dpl","descriptor","lookup_segment_selector","do_task_switch","tss_is_16","tss_is_busy","is_valid","is_null","from_gdt","is_present","effective_limit","tsr_offset","reg_tr","old_eflags","get_eflags","TSR_EIP","get_real_eip","TSR_EFLAGS","TSR_EAX","TSR_ECX","reg_ecx","TSR_EDX","reg_edx","TSR_EBX","TSR_ESP","TSR_EBP","reg_ebp","TSR_ESI","reg_esi","TSR_EDI","reg_edi","TSR_ES","reg_es","TSR_CS","TSR_SS","TSR_DS","TSR_FS","reg_fs","TSR_GS","reg_gs","table_offset","new_tsr_offset","TSR_BACKLINK","new_cr3","TSR_CR3","new_eip","new_cs","is_system","is_executable","dc_bit","rpl","cpl_changed","new_eflags","flag_nt","update_eflags","new_ldt","TSR_LDT","load_ldt","clear_tlb","CR0_TS","push16","push32","is_trap","is_16","trigger_np","old_flags","tss_stack_addr","get_tss_stack_addr","new_esp","new_ss","ss_info","rw_bit","old_esp","old_ss","stack_space","translate_address_system_write","set_stack_reg","get_stack_pointer","new_ip","CPU.prototype.iret","adjust_stack_reg","temp_esp","temp_ss","new_es","new_ds","new_fs","new_gs","new_cpl","is_writable","trigger_ss","call_interrupt_vector","CPU.prototype.switch_cs_real_mode","CPU.prototype.far_return","eip","stack_adjust","CPU.prototype.far_jump","is_call","cs_selector","raw0","cs_info","parameter_count","raw1","old_stack_pointer","parameter","types","CPU.prototype.get_tss_stack_addr","CPU.prototype.trigger_de","raise_exception","CPU.prototype.trigger_ud","CPU.prototype.trigger_nm","CPU.prototype.trigger_gp","raise_exception_with_code","CPU.prototype.trigger_np","CPU.prototype.task_switch_test","trigger_nm","CPU.prototype.task_switch_test_mmx","CPU.prototype.get_seg_prefix_ds","CPU.prototype.get_seg_prefix_ss","CPU.prototype.get_seg_prefix","default_segment","prefix","PREFIX_MASK_SEGMENT","SEG_PREFIX_ZERO","CPU.prototype.get_seg","segment","CPU.prototype.read_e8","modrm_resolve","CPU.prototype.read_e16","CPU.prototype.read_e32s","CPU.prototype.read_mmx_mem32s","CPU.prototype.read_mmx_mem64s","safe_read64s","CPU.prototype.read_xmm_mem64s","CPU.prototype.read_xmm_mem128s","phys","safe_read128s_aligned","create_atom128s","CPU.prototype.set_e8","safe_write8","CPU.prototype.set_e16","CPU.prototype.set_e32","CPU.prototype.read_write_e8","virt_addr","CPU.prototype.write_e8","CPU.prototype.read_write_e16","virt_boundary_read16","CPU.prototype.write_e16","CPU.prototype.read_write_e32","virt_boundary_read32s","mid","CPU.prototype.write_e32","CPU.prototype.read_reg_e16","CPU.prototype.write_reg_e16","CPU.prototype.read_reg_e32s","CPU.prototype.write_reg_e32","CPU.prototype.read_g8","CPU.prototype.write_g8","CPU.prototype.read_g16","CPU.prototype.read_g16s","CPU.prototype.write_g16","CPU.prototype.read_g32s","CPU.prototype.write_g32","CPU.prototype.read_xmm64s","CPU.prototype.read_xmm128s","CPU.prototype.read_mmx64s","CPU.prototype.write_mmx64s","CPU.prototype.write_xmm128s","CPU.prototype.pic_call_irq","int","CPU.prototype.handle_irqs","CPU.prototype.device_raise_irq","CPU.prototype.device_lower_irq","CPU.prototype.test_privileges_for_io","tsr_size","iomap_base","port_info","CPU.prototype.update_cs_size","new_size","CPU.prototype.update_operand_size","CPU.prototype.lookup_segment_selector","is_gdt","selector_offset","is_conforming_executable","is_readable","table_limit","reg_ldtr","limit","CPU.prototype.switch_seg","reg","CPU.prototype.load_ldt","CPU.prototype.lar","original","dpl_bad","LAR_INVALID_TYPE","CPU.prototype.lsl","LSL_INVALID_TYPE","CPU.prototype.clear_tlb","CPU.prototype.full_clear_tlb","CPU.prototype.translate_address_read","TLB_USER_READ","do_page_translation","CPU.prototype.translate_address_write","TLB_USER_WRITE","CPU.prototype.translate_address_system_write","TLB_SYSTEM_WRITE","CPU.prototype.translate_address_system_read","TLB_SYSTEM_READ","CPU.prototype.do_page_translation","for_writing","user","page","page_dir_addr","page_dir_entry","can_write","allow_user","trigger_pagefault","CR0_WP","page_table_addr","page_table_entry","write_aligned32","global","allowed_flag","CR4_PGE","CPU.prototype.writable_or_pagefault","CPU.prototype.trigger_pagefault","present","CPU.prototype.is_osize_32","PREFIX_MASK_OPSIZE","CPU.prototype.is_asize_32","PREFIX_MASK_ADDRSIZE","CPU.prototype.get_reg_asize","r","CPU.prototype.set_ecx_asize","reg_cx","CPU.prototype.add_reg_asize","CPU.prototype.decr_ecx_asize","module","exports","importScripts","self","get_seg_prefix_ds","reg_bx","reg_si","reg_di","get_seg_prefix_ss","reg_bp","sib_resolve","string_get_cycle_count","string_get_cycle_count2","addr1","addr2","CPU.prototype.add8","dest","src","add","OPSIZE_8","CPU.prototype.add16","OPSIZE_16","CPU.prototype.add32","OPSIZE_32","CPU.prototype.adc8","adc","CPU.prototype.adc16","CPU.prototype.adc32","CPU.prototype.sub8","sub","CPU.prototype.sub16","CPU.prototype.sub32","CPU.prototype.sbb8","sbb","CPU.prototype.sbb16","CPU.prototype.sbb32","CPU.prototype.add","dest_operand","source_operand","op_size","flags_all","CPU.prototype.adc","cf","CPU.prototype.sub","CPU.prototype.sbb","CPU.prototype.inc","CPU.prototype.dec","CPU.prototype.neg","CPU.prototype.imul_reg16","operand1","operand2","CPU.prototype.do_mul32","a00","a16","b00","b16","low_result","high_result","CPU.prototype.do_imul32","is_neg","do_mul32","CPU.prototype.imul_reg32","do_imul32","CPU.prototype.do_div32","div_low","div_high","quot","trigger_de","q","div","CPU.prototype.and8","and","CPU.prototype.and16","CPU.prototype.and32","CPU.prototype.or8","or","CPU.prototype.or16","CPU.prototype.or32","CPU.prototype.xor8","xor","CPU.prototype.xor16","CPU.prototype.xor32","CPU.prototype.and","CPU.prototype.or","CPU.prototype.xor","CPU.prototype.rol8","flag_overflow","CPU.prototype.rol16","CPU.prototype.rol32","CPU.prototype.rcl8","CPU.prototype.rcl16","CPU.prototype.rcl32","CPU.prototype.ror8","CPU.prototype.ror16","CPU.prototype.ror32","CPU.prototype.rcr8","CPU.prototype.rcr16","CPU.prototype.rcr32","CPU.prototype.shl8","CPU.prototype.shl16","CPU.prototype.shl32","CPU.prototype.shr8","CPU.prototype.shr16","CPU.prototype.shr32","CPU.prototype.sar8","CPU.prototype.sar16","CPU.prototype.sar32","CPU.prototype.shrd16","CPU.prototype.shrd32","CPU.prototype.shld16","CPU.prototype.shld32","CPU.prototype.bt_reg","bit_base","bit_offset","CPU.prototype.btc_reg","CPU.prototype.bts_reg","CPU.prototype.btr_reg","CPU.prototype.bt_mem","CPU.prototype.btc_mem","CPU.prototype.btr_mem","CPU.prototype.bts_mem","CPU.prototype.popcnt","v","CPU.prototype.saturate_sw_to_ub","CPU.prototype.saturate_sw_to_sb","CPU.prototype.saturate_sd_to_sw","CPU.prototype.saturate_sd_to_sb","CPU.prototype.saturate_sd_to_ub","CPU.prototype.saturate_ud_to_ub","CPU.prototype.saturate_uw","CPU.prototype.jmpcc8","condition","imm8","CPU.prototype.jmp_rel16","rel16","current_cs","CPU.prototype.jmpcc16","imm16","jmp_rel16","CPU.prototype.jmpcc32","imm32s","CPU.prototype.cmovcc16","read_e16","write_g16","CPU.prototype.cmovcc32","read_e32s","write_g32","CPU.prototype.setcc","set_e8","loop","CPU.prototype.loop","imm8s","decr_ecx_asize","CPU.prototype.getcf","CPU.prototype.getpf","flag_parity","CPU.prototype.getaf","flag_adjust","CPU.prototype.getzf","CPU.prototype.getsf","flag_sign","CPU.prototype.getof","test_o","test_b","test_z","test_s","test_p","CPU.prototype.test_be","CPU.prototype.test_l","CPU.prototype.test_le","CPU.prototype.push16","sp","CPU.prototype.push32","imm32","CPU.prototype.pop16","get_stack_reg","CPU.prototype.pop32s","CPU.prototype.xchg16r","operand","temp","reg_ax","CPU.prototype.xchg32r","CPU.prototype.lss16","seg","new_reg","new_seg","CPU.prototype.lss32","CPU.prototype.bswap","t16","t32","read_modrm_byte","write_e8","add8","read_write_e8","read_g8","write_e16","add16","read_write_e16","read_g16","write_e32","add32","read_write_e32","read_g32s","write_g8","read_e8","reg_al","or8","or16","or32","table0F_16","table0F_32","adc8","adc16","adc32","sbb8","sbb16","sbb32","and8","and16","and32","segment_prefix_op","old_al","old_cf","old_af","sub8","sub16","sub32","xor8","xor16","xor32","reg_ah","inc","reg_dx","dec","pop16","pop32s","imul_reg16","imul_reg32","test_privileges_for_io","get_reg_asize","flag_direction","PREFIX_MASK_REP","start_count","cycle_counter","MAX_COUNT_PER_CYCLE","phys_dest","port_read8","cont","add_reg_asize","set_ecx_asize","port_read16","single_size","write_aligned16","port_read32","phys_src","port_write8","port_write16","read_aligned16","port_write32","read_aligned32","jmpcc8","test_be","test_l","test_le","tmp","set_e16","set_e32","write_reg_e16","write_reg_e32","xchg16r","xchg32r","far_jump","flag_trap","flags_mask","read_moffs","ds","es","align_mask","in_mmap_range","is_repz","PREFIX_REPZ","data_dest","data_src","reg_cl","reg_dl","reg_bl","reg_ch","reg_dh","reg_bh","op1","op2","rol8","ror8","rcl8","rcr8","shl8","shr8","sar8","rol16","ror16","rcl16","rcr16","shl16","shr16","sar16","rol32","ror32","rcl32","rcr32","shl32","shr32","sar32","ip","lss16","lss32","nesting_level","frame_temp","tmp_ebp","old_vbp","new_bp","new_ebp","cs","far_return","iret","task_switch_test","m32","load_m32","st0","fcom","sti","store_m32","fldenv","fstenv","abs","ftst","isNaN","fxam","Infinity","FPU_C2","tan","atan2","fxtract","st1","fprem_quotient","trunc","sqrt","sin","cos","integer_round","truncate","fucom","int32","invalid_arithmatic","load_m80","store_m80","finit","fcomi","fucomi","m64","load_m64","low_ptr","store_m64","frstor","fsave","m16","TWO_POW_63","st0_low","st0_high","PREFIX_REPNZ","show","neg","target_operand","result_mod","do_div32","dest_operand_low","dest_operand_high","div_is_neg","flag_carry","set_cr0","lar","lsl","task_switch_test_mmx","read_xmm_mem64s","read_xmm64s","safe_write64","CR4_DE","read_reg_e32s","cr4","CR4_PSE","PSE_ENABLED","CR4_PAE","read_xmm_mem128s","write_xmm128s","PREFIX_66","read_xmm128s","safe_write128","IA32_SYSENTER_CS","IA32_SYSENTER_EIP","IA32_SYSENTER_ESP","IA32_APIC_BASE_MSR","IA32_APIC_BASE_EN","IA32_TIME_STAMP_COUNTER","new_tick","TSC_RATE","CR4_TSD","MSR_EBC_FREQUENCY_ID","cmovcc16","cmovcc32","destination","source8","destination8","read_mmx_mem32s","destination_low","write_mmx64s","source16","destination16","read_mmx_mem64s","destination_high","saturate_sw_to_sb","source64s","source8s","reg_offset","destination8s","byte4","byte5","byte6","byte7","word0","word1","word2","word3","source16s","destination16s","result8","saturate_sw_to_ub","saturate_sd_to_sw","PREFIX_F3","order","PREFIX_F2","word0_shift","word1_shift","word2_shift","word3_shift","destination128","read_mmx64s","jmpcc16","jmpcc32","setcc","eax","ecx","edx","ebx","bt_mem","read_g16s","bt_reg","read_reg_e16","shld16","shld32","bts_mem","bts_reg","shrd16","shrd32","MXCSR_MASK","new_mxcsr","btr_mem","btr_reg","popcnt","btc_mem","btc_reg","old","m64_low","m64_high","rand","has_rand","bswap","saturate_sd_to_ub","saturate_ud_to_ub","saturate_uw","saturate_sd_to_sb","CPU.prototype.debug_init","step_mode","ops","all_ops","trace_all","debug.show","debug.init","get_regs_short","r32_names","line1","line2","dump_regs","dump_regs_short","dump_instructions","get_instructions","vm","iopl","cs_eip","ss_esp","if_","flag_names","flag_string","dump_state","dump_stack","dump_page_directory","dump_gdt_ldt","dump_idt","get_memory_dump","memory_hex_dump","used_memory_dump","step","run_until","debug.unimpl","s","logop","debug.logop","debug_interrupt","debug.debug_interrupt","DataView","U8","getUint8","setUint8","U16","getUint16","setUint16","U32","getUint32","setUint32","Header","create_struct","magic","class","version0","osabi","abiversion","pad0","pad","machine","version1","phoff","shoff","ehsize","phentsize","phnum","shentsize","shnum","shstrndx","reduce","ProgramHeader","vaddr","memsz","align","SectionHeader","link","addralign","entsize","struct","keys","view","read_struct","read_structs","sections_headers","Struct","LITTLE_ENDIAN","FS","baseurl","events","filesinloadingqueue","qidnumber","OnLoaded","this.OnLoaded","FS.prototype.AddEvent","OnEvent","STATUS_OK","FS.prototype.HandleEvent","newevents","FS.prototype.OnJSONLoaded","fsdata","JSONFS_VERSION","fsroot","LoadRecursive","me.OnLoaded","FS.prototype.LoadRecursive","JSONFS_IDX_NAME","JSONFS_IDX_SIZE","JSONFS_IDX_MTIME","JSONFS_IDX_MODE","JSONFS_IDX_UID","JSONFS_IDX_GID","ifmt","S_IFMT","JSONFS_IDX_TARGET","updatedir","LoadDir","children","S_IFREG","STATUS_ON_SERVER","S_IFLNK","FS.prototype.LoadFile","STATUS_LOADING","LoadBinaryResource","GetFullPath","HandleEvent","FS.prototype.PushInode","parent_node","nextid","firstid","Inode","path","FS.prototype.CreateInode","FS.prototype.CreateDirectory","FS.prototype.CreateFile","FS.prototype.CreateNode","FS.prototype.CreateSymlink","FS.prototype.CreateBinaryFile","FS.prototype.OpenInode","FillDirectory","UTF8.UTF8Length","LoadFile","FS.prototype.CloseInode","STATUS_INVALID","FS.prototype.Rename","olddirid","newdirid","oldid","newid","FindPreviousID","FS.prototype.Write","FS.prototype.Search","FS.prototype.GetFullPath","substring","FS.prototype.FindPreviousID","FS.prototype.Unlink","FS.prototype.GetInode","FS.prototype.ChangeSize","newsize","FS.prototype.SearchPath","FS.prototype.PrepareCAPs","url","OnSuccess","OnError","responseType","onreadystatechange","req.onreadystatechange","arrayBuffer","response","require","typelist","lengthoffset","UnicodeToUTF8Stream","utf8","output","val","utf8converter","UTF8StreamToUnicode","Put","stream","ofs","this.Put","key","KeyboardAdapter","keyup_handler","altKey","keys_pressed","handle_code","keydown_handler","blur_handler","keydown","keyboard","shiftKey","keyCode","className","nodeName","codemap","preventDefault","send_to_controller","asciimap","asciimap_shift","removeEventListener","simulate_press","this.simulate_press","simulate_char","this.simulate_char","SHIFT_SCAN_CODE","MouseAdapter","may_handle","mouse","enabled","child","touch_start_handler","touches","touch","last_x","clientX","last_y","clientY","touch_end_handler","left_down","middle_down","right_down","mousemove_handler","SPEED_FACTOR","pageX","offsetLeft","pageY","offsetTop","offsetWidth","offsetHeight","mousedown_handler","click_event","mouseup_handler","down","mousewheel_handler","wheelDelta","detail","SpeakerAdapter","AudioContext","webkitAudioContext","SpeakerDAC","AudioWorklet","SpeakerWorkletDAC","SpeakerBufferSourceDAC","audio_context","mixer","SpeakerMixer","pcspeaker","PCSpeaker","suspend","resume","warn","create_gain_handler","audio_node","decibels","gain","setValueAtTime","currentTime","sources","Map","gain_right","gain_left","volume_right","volume_left","volume_both","node_treble_left","createBiquadFilter","node_treble_right","frequency","node_bass_left","node_bass_right","node_gain_left","createGain","node_gain_right","node_merger","createChannelMerger","input_left","input_right","connect","connect_source","source_id","disconnect_source","disconnect","set_volume","update","SpeakerMixer.prototype.add_source","source_node","SpeakerMixerSource","has","SpeakerMixer.prototype.set_volume","SpeakerMixer.prototype.update","net_gain_right","destination_left","destination_right","connected_right","connected_left","gain_hidden","node_splitter","createChannelSplitter","SpeakerMixerSource.prototype.update","SpeakerMixerSource.prototype.connect","both","SpeakerMixerSource.prototype.disconnect","SpeakerMixerSource.prototype.set_volume","node_oscillator","createOscillator","mixer_connection","add_source","maxValue","PCSpeaker.prototype.start","worklet_string","worklet","sinc","DACProcessor","Reflect","construct","AudioWorkletProcessor","kernel_size","queue_data","queue_start","queue_end","queue_length","queued_samples","source_buffer_previous","EMPTY_BUFFER","source_buffer_current","source_samples_per_destination","source_block_start","source_time","source_offset","onmessage","self.port.onmessage","event","queue_push","sampleRate","MINIMUM_BUFFER_SIZE","setPrototypeOf","DACProcessor.prototype.process","inputs","outputs","sum0","sum1","convolute_index","get_sample","kernel","samples_needed_per_block","ensure_enough_data","DACProcessor.prototype.kernel","DACProcessor.prototype.get_sample","DACProcessor.prototype.ensure_enough_data","needed","current_length","prepare_next_buffer","DACProcessor.prototype.prepare_next_buffer","queue_shift","sample_count","queue_pos","buffer_count","new_big_buffer_size","new_big_buffer","new_big_buffer_pos","small_buffer","pump","DACProcessor.prototype.pump","QUEUE_RESERVE","DACProcessor.prototype.queue_push","DACProcessor.prototype.queue_shift","registerProcessor","worklet_url","worklet_blob","worklet_code","indexOf","lastIndexOf","worklet_code_end","node_processor","node_output","audioWorklet","addModule","then","AudioWorkletNode","this.node_processor.port.onmessage","queue","SpeakerWorkletDAC.prototype.queue","SpeakerWorkletDAC.prototype.pump","buffered_time","rate_ratio","node_lowpass","AUDIOBUFFER_MINIMUM_SAMPLING_RATE","SpeakerBufferSourceDAC.prototype.queue","block_duration","createBuffer","buffer_data0","getChannelData","buffer_data1","buffer_index","copyToChannel","createBufferSource","current_time","current_silence_duration","target_silence_duration","DAC_QUEUE_RESERVE","SpeakerBufferSourceDAC.prototype.pump","SerialAdapter","keypress_handler","serial","send_char","paste_handler","clipboardData","getData","window_click_handler","text_new_line","show_char","this.show_char","this.update","delta","update_timer","render","clearTimeout","this.render","this.send_char","chr_code","NetworkAdapter","socket","send_queue","last_connect_attempt","reconnect_interval","NetworkAdapter.prototype","handle_message","NetworkAdapter.prototype.handle_message","handle_close","NetworkAdapter.prototype.handle_close","handle_open","NetworkAdapter.prototype.handle_open","handle_error","NetworkAdapter.prototype.handle_error","NetworkAdapter.prototype.destroy","close","NetworkAdapter.prototype.connect","WebSocket","binaryType","onopen","onclose","onerror","NetworkAdapter.prototype.send","load_file","options","http","method","as_text","headers","header_names","setRequestHeader","range","http.onload","progress","onprogress","http.onprogress","load_file_nodejs","fd","o","encoding","AsyncXHRBuffer","block_size","loaded_blocks","SyncFileBuffer","AsyncFileBuffer","v86util.load_file","v86util.AsyncXHRBuffer","v86util.AsyncFileBuffer","determine_size","cb","getResponseHeader","match","Range","AsyncXHRBuffer.prototype.load","get_from_cache","AsyncXHRBuffer.prototype.get_from_cache","number_of_blocks","block_index","block","AsyncXHRBuffer.prototype.get","handle_read","AsyncXHRBuffer.prototype.set","start_block","block_count","data_slice","AsyncXHRBuffer.prototype.handle_read","written_block","AsyncXHRBuffer.prototype.get_buffer","SyncFileBuffer.prototype.load","load_next","SyncFileBuffer.prototype.load_next","PART_SIZE","SyncFileBuffer.prototype.get","SyncFileBuffer.prototype.set","SyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.load","AsyncFileBuffer.prototype.get","fr","AsyncFileBuffer.prototype.get_buffer","AsyncFileBuffer.prototype.get_as_file","parts","existing_blocks","Number","sort","current_offset","File","put_on_settings","fs9p_json","add_file","files_to_load","loadable","async","OnJSONLoaded","adapter_bus","emulator_bus","keyboard_adapter","screen_adapter","DummyScreenAdapter","image_names","fs_url","base_url","starter","lengthComputable","request","V86Starter.prototype.run","V86Starter.prototype.stop","V86Starter.prototype.destroy","V86Starter.prototype.restart","V86Starter.prototype.add_listener","remove_listener","V86Starter.prototype.remove_listener","V86Starter.prototype.restore_state","V86Starter.prototype.save_state","callback","get_statistics","V86Starter.prototype.get_statistics","V86Starter.prototype.get_instruction_counter","is_running","V86Starter.prototype.is_running","V86Starter.prototype.keyboard_send_scancodes","codes","keyboard_send_keys","V86Starter.prototype.keyboard_send_keys","V86Starter.prototype.keyboard_send_text","string","V86Starter.prototype.screen_make_screenshot","V86Starter.prototype.screen_set_scale","sx","sy","V86Starter.prototype.screen_go_fullscreen","focus_element","V86Starter.prototype.lock_mouse","keyboard_set_status","V86Starter.prototype.keyboard_set_status","serial0_send","V86Starter.prototype.serial0_send","V86Starter.prototype.create_file","parent_id","SearchPath","path_infos","not_found","CreateBinaryFile","FileNotFoundError","V86Starter.prototype.read_file","graphic_buffer"]
}
